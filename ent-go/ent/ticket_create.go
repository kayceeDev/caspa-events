// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/kayceeDev/caspa-events/ent-go/ent/ticket"
)

// TicketCreate is the builder for creating a Ticket entity.
type TicketCreate struct {
	config
	mutation *TicketMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreateTime sets the "create_time" field.
func (tc *TicketCreate) SetCreateTime(t time.Time) *TicketCreate {
	tc.mutation.SetCreateTime(t)
	return tc
}

// SetNillableCreateTime sets the "create_time" field if the given value is not nil.
func (tc *TicketCreate) SetNillableCreateTime(t *time.Time) *TicketCreate {
	if t != nil {
		tc.SetCreateTime(*t)
	}
	return tc
}

// SetUpdateTime sets the "update_time" field.
func (tc *TicketCreate) SetUpdateTime(t time.Time) *TicketCreate {
	tc.mutation.SetUpdateTime(t)
	return tc
}

// SetNillableUpdateTime sets the "update_time" field if the given value is not nil.
func (tc *TicketCreate) SetNillableUpdateTime(t *time.Time) *TicketCreate {
	if t != nil {
		tc.SetUpdateTime(*t)
	}
	return tc
}

// SetUUID sets the "uuid" field.
func (tc *TicketCreate) SetUUID(u uuid.UUID) *TicketCreate {
	tc.mutation.SetUUID(u)
	return tc
}

// SetNillableUUID sets the "uuid" field if the given value is not nil.
func (tc *TicketCreate) SetNillableUUID(u *uuid.UUID) *TicketCreate {
	if u != nil {
		tc.SetUUID(*u)
	}
	return tc
}

// SetName sets the "name" field.
func (tc *TicketCreate) SetName(s string) *TicketCreate {
	tc.mutation.SetName(s)
	return tc
}

// SetDescription sets the "description" field.
func (tc *TicketCreate) SetDescription(s string) *TicketCreate {
	tc.mutation.SetDescription(s)
	return tc
}

// SetPrice sets the "price" field.
func (tc *TicketCreate) SetPrice(f float64) *TicketCreate {
	tc.mutation.SetPrice(f)
	return tc
}

// SetQuantity sets the "quantity" field.
func (tc *TicketCreate) SetQuantity(i int) *TicketCreate {
	tc.mutation.SetQuantity(i)
	return tc
}

// SetQuantitySold sets the "quantity_sold" field.
func (tc *TicketCreate) SetQuantitySold(i int) *TicketCreate {
	tc.mutation.SetQuantitySold(i)
	return tc
}

// SetNillableQuantitySold sets the "quantity_sold" field if the given value is not nil.
func (tc *TicketCreate) SetNillableQuantitySold(i *int) *TicketCreate {
	if i != nil {
		tc.SetQuantitySold(*i)
	}
	return tc
}

// SetSaleStartDate sets the "sale_start_date" field.
func (tc *TicketCreate) SetSaleStartDate(t time.Time) *TicketCreate {
	tc.mutation.SetSaleStartDate(t)
	return tc
}

// SetSaleEndDate sets the "sale_end_date" field.
func (tc *TicketCreate) SetSaleEndDate(t time.Time) *TicketCreate {
	tc.mutation.SetSaleEndDate(t)
	return tc
}

// SetNillableSaleEndDate sets the "sale_end_date" field if the given value is not nil.
func (tc *TicketCreate) SetNillableSaleEndDate(t *time.Time) *TicketCreate {
	if t != nil {
		tc.SetSaleEndDate(*t)
	}
	return tc
}

// SetEventID sets the "event_id" field.
func (tc *TicketCreate) SetEventID(s string) *TicketCreate {
	tc.mutation.SetEventID(s)
	return tc
}

// SetTicketType sets the "ticket_type" field.
func (tc *TicketCreate) SetTicketType(s string) *TicketCreate {
	tc.mutation.SetTicketType(s)
	return tc
}

// SetIsActive sets the "is_active" field.
func (tc *TicketCreate) SetIsActive(b bool) *TicketCreate {
	tc.mutation.SetIsActive(b)
	return tc
}

// SetNillableIsActive sets the "is_active" field if the given value is not nil.
func (tc *TicketCreate) SetNillableIsActive(b *bool) *TicketCreate {
	if b != nil {
		tc.SetIsActive(*b)
	}
	return tc
}

// SetIsRefundable sets the "is_refundable" field.
func (tc *TicketCreate) SetIsRefundable(b bool) *TicketCreate {
	tc.mutation.SetIsRefundable(b)
	return tc
}

// SetNillableIsRefundable sets the "is_refundable" field if the given value is not nil.
func (tc *TicketCreate) SetNillableIsRefundable(b *bool) *TicketCreate {
	if b != nil {
		tc.SetIsRefundable(*b)
	}
	return tc
}

// Mutation returns the TicketMutation object of the builder.
func (tc *TicketCreate) Mutation() *TicketMutation {
	return tc.mutation
}

// Save creates the Ticket in the database.
func (tc *TicketCreate) Save(ctx context.Context) (*Ticket, error) {
	tc.defaults()
	return withHooks(ctx, tc.sqlSave, tc.mutation, tc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (tc *TicketCreate) SaveX(ctx context.Context) *Ticket {
	v, err := tc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (tc *TicketCreate) Exec(ctx context.Context) error {
	_, err := tc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tc *TicketCreate) ExecX(ctx context.Context) {
	if err := tc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (tc *TicketCreate) defaults() {
	if _, ok := tc.mutation.CreateTime(); !ok {
		v := ticket.DefaultCreateTime()
		tc.mutation.SetCreateTime(v)
	}
	if _, ok := tc.mutation.UpdateTime(); !ok {
		v := ticket.DefaultUpdateTime()
		tc.mutation.SetUpdateTime(v)
	}
	if _, ok := tc.mutation.UUID(); !ok {
		v := ticket.DefaultUUID()
		tc.mutation.SetUUID(v)
	}
	if _, ok := tc.mutation.QuantitySold(); !ok {
		v := ticket.DefaultQuantitySold
		tc.mutation.SetQuantitySold(v)
	}
	if _, ok := tc.mutation.IsActive(); !ok {
		v := ticket.DefaultIsActive
		tc.mutation.SetIsActive(v)
	}
	if _, ok := tc.mutation.IsRefundable(); !ok {
		v := ticket.DefaultIsRefundable
		tc.mutation.SetIsRefundable(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tc *TicketCreate) check() error {
	if _, ok := tc.mutation.CreateTime(); !ok {
		return &ValidationError{Name: "create_time", err: errors.New(`ent: missing required field "Ticket.create_time"`)}
	}
	if _, ok := tc.mutation.UpdateTime(); !ok {
		return &ValidationError{Name: "update_time", err: errors.New(`ent: missing required field "Ticket.update_time"`)}
	}
	if _, ok := tc.mutation.UUID(); !ok {
		return &ValidationError{Name: "uuid", err: errors.New(`ent: missing required field "Ticket.uuid"`)}
	}
	if _, ok := tc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "Ticket.name"`)}
	}
	if v, ok := tc.mutation.Name(); ok {
		if err := ticket.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Ticket.name": %w`, err)}
		}
	}
	if _, ok := tc.mutation.Description(); !ok {
		return &ValidationError{Name: "description", err: errors.New(`ent: missing required field "Ticket.description"`)}
	}
	if v, ok := tc.mutation.Description(); ok {
		if err := ticket.DescriptionValidator(v); err != nil {
			return &ValidationError{Name: "description", err: fmt.Errorf(`ent: validator failed for field "Ticket.description": %w`, err)}
		}
	}
	if _, ok := tc.mutation.Price(); !ok {
		return &ValidationError{Name: "price", err: errors.New(`ent: missing required field "Ticket.price"`)}
	}
	if v, ok := tc.mutation.Price(); ok {
		if err := ticket.PriceValidator(v); err != nil {
			return &ValidationError{Name: "price", err: fmt.Errorf(`ent: validator failed for field "Ticket.price": %w`, err)}
		}
	}
	if _, ok := tc.mutation.Quantity(); !ok {
		return &ValidationError{Name: "quantity", err: errors.New(`ent: missing required field "Ticket.quantity"`)}
	}
	if v, ok := tc.mutation.Quantity(); ok {
		if err := ticket.QuantityValidator(v); err != nil {
			return &ValidationError{Name: "quantity", err: fmt.Errorf(`ent: validator failed for field "Ticket.quantity": %w`, err)}
		}
	}
	if _, ok := tc.mutation.QuantitySold(); !ok {
		return &ValidationError{Name: "quantity_sold", err: errors.New(`ent: missing required field "Ticket.quantity_sold"`)}
	}
	if v, ok := tc.mutation.QuantitySold(); ok {
		if err := ticket.QuantitySoldValidator(v); err != nil {
			return &ValidationError{Name: "quantity_sold", err: fmt.Errorf(`ent: validator failed for field "Ticket.quantity_sold": %w`, err)}
		}
	}
	if _, ok := tc.mutation.SaleStartDate(); !ok {
		return &ValidationError{Name: "sale_start_date", err: errors.New(`ent: missing required field "Ticket.sale_start_date"`)}
	}
	if _, ok := tc.mutation.EventID(); !ok {
		return &ValidationError{Name: "event_id", err: errors.New(`ent: missing required field "Ticket.event_id"`)}
	}
	if _, ok := tc.mutation.TicketType(); !ok {
		return &ValidationError{Name: "ticket_type", err: errors.New(`ent: missing required field "Ticket.ticket_type"`)}
	}
	if v, ok := tc.mutation.TicketType(); ok {
		if err := ticket.TicketTypeValidator(v); err != nil {
			return &ValidationError{Name: "ticket_type", err: fmt.Errorf(`ent: validator failed for field "Ticket.ticket_type": %w`, err)}
		}
	}
	if _, ok := tc.mutation.IsActive(); !ok {
		return &ValidationError{Name: "is_active", err: errors.New(`ent: missing required field "Ticket.is_active"`)}
	}
	if _, ok := tc.mutation.IsRefundable(); !ok {
		return &ValidationError{Name: "is_refundable", err: errors.New(`ent: missing required field "Ticket.is_refundable"`)}
	}
	return nil
}

func (tc *TicketCreate) sqlSave(ctx context.Context) (*Ticket, error) {
	if err := tc.check(); err != nil {
		return nil, err
	}
	_node, _spec := tc.createSpec()
	if err := sqlgraph.CreateNode(ctx, tc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	tc.mutation.id = &_node.ID
	tc.mutation.done = true
	return _node, nil
}

func (tc *TicketCreate) createSpec() (*Ticket, *sqlgraph.CreateSpec) {
	var (
		_node = &Ticket{config: tc.config}
		_spec = sqlgraph.NewCreateSpec(ticket.Table, sqlgraph.NewFieldSpec(ticket.FieldID, field.TypeInt))
	)
	_spec.OnConflict = tc.conflict
	if value, ok := tc.mutation.CreateTime(); ok {
		_spec.SetField(ticket.FieldCreateTime, field.TypeTime, value)
		_node.CreateTime = value
	}
	if value, ok := tc.mutation.UpdateTime(); ok {
		_spec.SetField(ticket.FieldUpdateTime, field.TypeTime, value)
		_node.UpdateTime = value
	}
	if value, ok := tc.mutation.UUID(); ok {
		_spec.SetField(ticket.FieldUUID, field.TypeUUID, value)
		_node.UUID = value
	}
	if value, ok := tc.mutation.Name(); ok {
		_spec.SetField(ticket.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := tc.mutation.Description(); ok {
		_spec.SetField(ticket.FieldDescription, field.TypeString, value)
		_node.Description = value
	}
	if value, ok := tc.mutation.Price(); ok {
		_spec.SetField(ticket.FieldPrice, field.TypeFloat64, value)
		_node.Price = value
	}
	if value, ok := tc.mutation.Quantity(); ok {
		_spec.SetField(ticket.FieldQuantity, field.TypeInt, value)
		_node.Quantity = value
	}
	if value, ok := tc.mutation.QuantitySold(); ok {
		_spec.SetField(ticket.FieldQuantitySold, field.TypeInt, value)
		_node.QuantitySold = value
	}
	if value, ok := tc.mutation.SaleStartDate(); ok {
		_spec.SetField(ticket.FieldSaleStartDate, field.TypeTime, value)
		_node.SaleStartDate = value
	}
	if value, ok := tc.mutation.SaleEndDate(); ok {
		_spec.SetField(ticket.FieldSaleEndDate, field.TypeTime, value)
		_node.SaleEndDate = &value
	}
	if value, ok := tc.mutation.EventID(); ok {
		_spec.SetField(ticket.FieldEventID, field.TypeString, value)
		_node.EventID = value
	}
	if value, ok := tc.mutation.TicketType(); ok {
		_spec.SetField(ticket.FieldTicketType, field.TypeString, value)
		_node.TicketType = value
	}
	if value, ok := tc.mutation.IsActive(); ok {
		_spec.SetField(ticket.FieldIsActive, field.TypeBool, value)
		_node.IsActive = value
	}
	if value, ok := tc.mutation.IsRefundable(); ok {
		_spec.SetField(ticket.FieldIsRefundable, field.TypeBool, value)
		_node.IsRefundable = value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Ticket.Create().
//		SetCreateTime(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.TicketUpsert) {
//			SetCreateTime(v+v).
//		}).
//		Exec(ctx)
func (tc *TicketCreate) OnConflict(opts ...sql.ConflictOption) *TicketUpsertOne {
	tc.conflict = opts
	return &TicketUpsertOne{
		create: tc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Ticket.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (tc *TicketCreate) OnConflictColumns(columns ...string) *TicketUpsertOne {
	tc.conflict = append(tc.conflict, sql.ConflictColumns(columns...))
	return &TicketUpsertOne{
		create: tc,
	}
}

type (
	// TicketUpsertOne is the builder for "upsert"-ing
	//  one Ticket node.
	TicketUpsertOne struct {
		create *TicketCreate
	}

	// TicketUpsert is the "OnConflict" setter.
	TicketUpsert struct {
		*sql.UpdateSet
	}
)

// SetUpdateTime sets the "update_time" field.
func (u *TicketUpsert) SetUpdateTime(v time.Time) *TicketUpsert {
	u.Set(ticket.FieldUpdateTime, v)
	return u
}

// UpdateUpdateTime sets the "update_time" field to the value that was provided on create.
func (u *TicketUpsert) UpdateUpdateTime() *TicketUpsert {
	u.SetExcluded(ticket.FieldUpdateTime)
	return u
}

// SetName sets the "name" field.
func (u *TicketUpsert) SetName(v string) *TicketUpsert {
	u.Set(ticket.FieldName, v)
	return u
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *TicketUpsert) UpdateName() *TicketUpsert {
	u.SetExcluded(ticket.FieldName)
	return u
}

// SetDescription sets the "description" field.
func (u *TicketUpsert) SetDescription(v string) *TicketUpsert {
	u.Set(ticket.FieldDescription, v)
	return u
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *TicketUpsert) UpdateDescription() *TicketUpsert {
	u.SetExcluded(ticket.FieldDescription)
	return u
}

// SetPrice sets the "price" field.
func (u *TicketUpsert) SetPrice(v float64) *TicketUpsert {
	u.Set(ticket.FieldPrice, v)
	return u
}

// UpdatePrice sets the "price" field to the value that was provided on create.
func (u *TicketUpsert) UpdatePrice() *TicketUpsert {
	u.SetExcluded(ticket.FieldPrice)
	return u
}

// AddPrice adds v to the "price" field.
func (u *TicketUpsert) AddPrice(v float64) *TicketUpsert {
	u.Add(ticket.FieldPrice, v)
	return u
}

// SetQuantity sets the "quantity" field.
func (u *TicketUpsert) SetQuantity(v int) *TicketUpsert {
	u.Set(ticket.FieldQuantity, v)
	return u
}

// UpdateQuantity sets the "quantity" field to the value that was provided on create.
func (u *TicketUpsert) UpdateQuantity() *TicketUpsert {
	u.SetExcluded(ticket.FieldQuantity)
	return u
}

// AddQuantity adds v to the "quantity" field.
func (u *TicketUpsert) AddQuantity(v int) *TicketUpsert {
	u.Add(ticket.FieldQuantity, v)
	return u
}

// SetQuantitySold sets the "quantity_sold" field.
func (u *TicketUpsert) SetQuantitySold(v int) *TicketUpsert {
	u.Set(ticket.FieldQuantitySold, v)
	return u
}

// UpdateQuantitySold sets the "quantity_sold" field to the value that was provided on create.
func (u *TicketUpsert) UpdateQuantitySold() *TicketUpsert {
	u.SetExcluded(ticket.FieldQuantitySold)
	return u
}

// AddQuantitySold adds v to the "quantity_sold" field.
func (u *TicketUpsert) AddQuantitySold(v int) *TicketUpsert {
	u.Add(ticket.FieldQuantitySold, v)
	return u
}

// SetSaleStartDate sets the "sale_start_date" field.
func (u *TicketUpsert) SetSaleStartDate(v time.Time) *TicketUpsert {
	u.Set(ticket.FieldSaleStartDate, v)
	return u
}

// UpdateSaleStartDate sets the "sale_start_date" field to the value that was provided on create.
func (u *TicketUpsert) UpdateSaleStartDate() *TicketUpsert {
	u.SetExcluded(ticket.FieldSaleStartDate)
	return u
}

// SetSaleEndDate sets the "sale_end_date" field.
func (u *TicketUpsert) SetSaleEndDate(v time.Time) *TicketUpsert {
	u.Set(ticket.FieldSaleEndDate, v)
	return u
}

// UpdateSaleEndDate sets the "sale_end_date" field to the value that was provided on create.
func (u *TicketUpsert) UpdateSaleEndDate() *TicketUpsert {
	u.SetExcluded(ticket.FieldSaleEndDate)
	return u
}

// ClearSaleEndDate clears the value of the "sale_end_date" field.
func (u *TicketUpsert) ClearSaleEndDate() *TicketUpsert {
	u.SetNull(ticket.FieldSaleEndDate)
	return u
}

// SetEventID sets the "event_id" field.
func (u *TicketUpsert) SetEventID(v string) *TicketUpsert {
	u.Set(ticket.FieldEventID, v)
	return u
}

// UpdateEventID sets the "event_id" field to the value that was provided on create.
func (u *TicketUpsert) UpdateEventID() *TicketUpsert {
	u.SetExcluded(ticket.FieldEventID)
	return u
}

// SetTicketType sets the "ticket_type" field.
func (u *TicketUpsert) SetTicketType(v string) *TicketUpsert {
	u.Set(ticket.FieldTicketType, v)
	return u
}

// UpdateTicketType sets the "ticket_type" field to the value that was provided on create.
func (u *TicketUpsert) UpdateTicketType() *TicketUpsert {
	u.SetExcluded(ticket.FieldTicketType)
	return u
}

// SetIsActive sets the "is_active" field.
func (u *TicketUpsert) SetIsActive(v bool) *TicketUpsert {
	u.Set(ticket.FieldIsActive, v)
	return u
}

// UpdateIsActive sets the "is_active" field to the value that was provided on create.
func (u *TicketUpsert) UpdateIsActive() *TicketUpsert {
	u.SetExcluded(ticket.FieldIsActive)
	return u
}

// SetIsRefundable sets the "is_refundable" field.
func (u *TicketUpsert) SetIsRefundable(v bool) *TicketUpsert {
	u.Set(ticket.FieldIsRefundable, v)
	return u
}

// UpdateIsRefundable sets the "is_refundable" field to the value that was provided on create.
func (u *TicketUpsert) UpdateIsRefundable() *TicketUpsert {
	u.SetExcluded(ticket.FieldIsRefundable)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.Ticket.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *TicketUpsertOne) UpdateNewValues() *TicketUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.CreateTime(); exists {
			s.SetIgnore(ticket.FieldCreateTime)
		}
		if _, exists := u.create.mutation.UUID(); exists {
			s.SetIgnore(ticket.FieldUUID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Ticket.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *TicketUpsertOne) Ignore() *TicketUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *TicketUpsertOne) DoNothing() *TicketUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the TicketCreate.OnConflict
// documentation for more info.
func (u *TicketUpsertOne) Update(set func(*TicketUpsert)) *TicketUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&TicketUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdateTime sets the "update_time" field.
func (u *TicketUpsertOne) SetUpdateTime(v time.Time) *TicketUpsertOne {
	return u.Update(func(s *TicketUpsert) {
		s.SetUpdateTime(v)
	})
}

// UpdateUpdateTime sets the "update_time" field to the value that was provided on create.
func (u *TicketUpsertOne) UpdateUpdateTime() *TicketUpsertOne {
	return u.Update(func(s *TicketUpsert) {
		s.UpdateUpdateTime()
	})
}

// SetName sets the "name" field.
func (u *TicketUpsertOne) SetName(v string) *TicketUpsertOne {
	return u.Update(func(s *TicketUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *TicketUpsertOne) UpdateName() *TicketUpsertOne {
	return u.Update(func(s *TicketUpsert) {
		s.UpdateName()
	})
}

// SetDescription sets the "description" field.
func (u *TicketUpsertOne) SetDescription(v string) *TicketUpsertOne {
	return u.Update(func(s *TicketUpsert) {
		s.SetDescription(v)
	})
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *TicketUpsertOne) UpdateDescription() *TicketUpsertOne {
	return u.Update(func(s *TicketUpsert) {
		s.UpdateDescription()
	})
}

// SetPrice sets the "price" field.
func (u *TicketUpsertOne) SetPrice(v float64) *TicketUpsertOne {
	return u.Update(func(s *TicketUpsert) {
		s.SetPrice(v)
	})
}

// AddPrice adds v to the "price" field.
func (u *TicketUpsertOne) AddPrice(v float64) *TicketUpsertOne {
	return u.Update(func(s *TicketUpsert) {
		s.AddPrice(v)
	})
}

// UpdatePrice sets the "price" field to the value that was provided on create.
func (u *TicketUpsertOne) UpdatePrice() *TicketUpsertOne {
	return u.Update(func(s *TicketUpsert) {
		s.UpdatePrice()
	})
}

// SetQuantity sets the "quantity" field.
func (u *TicketUpsertOne) SetQuantity(v int) *TicketUpsertOne {
	return u.Update(func(s *TicketUpsert) {
		s.SetQuantity(v)
	})
}

// AddQuantity adds v to the "quantity" field.
func (u *TicketUpsertOne) AddQuantity(v int) *TicketUpsertOne {
	return u.Update(func(s *TicketUpsert) {
		s.AddQuantity(v)
	})
}

// UpdateQuantity sets the "quantity" field to the value that was provided on create.
func (u *TicketUpsertOne) UpdateQuantity() *TicketUpsertOne {
	return u.Update(func(s *TicketUpsert) {
		s.UpdateQuantity()
	})
}

// SetQuantitySold sets the "quantity_sold" field.
func (u *TicketUpsertOne) SetQuantitySold(v int) *TicketUpsertOne {
	return u.Update(func(s *TicketUpsert) {
		s.SetQuantitySold(v)
	})
}

// AddQuantitySold adds v to the "quantity_sold" field.
func (u *TicketUpsertOne) AddQuantitySold(v int) *TicketUpsertOne {
	return u.Update(func(s *TicketUpsert) {
		s.AddQuantitySold(v)
	})
}

// UpdateQuantitySold sets the "quantity_sold" field to the value that was provided on create.
func (u *TicketUpsertOne) UpdateQuantitySold() *TicketUpsertOne {
	return u.Update(func(s *TicketUpsert) {
		s.UpdateQuantitySold()
	})
}

// SetSaleStartDate sets the "sale_start_date" field.
func (u *TicketUpsertOne) SetSaleStartDate(v time.Time) *TicketUpsertOne {
	return u.Update(func(s *TicketUpsert) {
		s.SetSaleStartDate(v)
	})
}

// UpdateSaleStartDate sets the "sale_start_date" field to the value that was provided on create.
func (u *TicketUpsertOne) UpdateSaleStartDate() *TicketUpsertOne {
	return u.Update(func(s *TicketUpsert) {
		s.UpdateSaleStartDate()
	})
}

// SetSaleEndDate sets the "sale_end_date" field.
func (u *TicketUpsertOne) SetSaleEndDate(v time.Time) *TicketUpsertOne {
	return u.Update(func(s *TicketUpsert) {
		s.SetSaleEndDate(v)
	})
}

// UpdateSaleEndDate sets the "sale_end_date" field to the value that was provided on create.
func (u *TicketUpsertOne) UpdateSaleEndDate() *TicketUpsertOne {
	return u.Update(func(s *TicketUpsert) {
		s.UpdateSaleEndDate()
	})
}

// ClearSaleEndDate clears the value of the "sale_end_date" field.
func (u *TicketUpsertOne) ClearSaleEndDate() *TicketUpsertOne {
	return u.Update(func(s *TicketUpsert) {
		s.ClearSaleEndDate()
	})
}

// SetEventID sets the "event_id" field.
func (u *TicketUpsertOne) SetEventID(v string) *TicketUpsertOne {
	return u.Update(func(s *TicketUpsert) {
		s.SetEventID(v)
	})
}

// UpdateEventID sets the "event_id" field to the value that was provided on create.
func (u *TicketUpsertOne) UpdateEventID() *TicketUpsertOne {
	return u.Update(func(s *TicketUpsert) {
		s.UpdateEventID()
	})
}

// SetTicketType sets the "ticket_type" field.
func (u *TicketUpsertOne) SetTicketType(v string) *TicketUpsertOne {
	return u.Update(func(s *TicketUpsert) {
		s.SetTicketType(v)
	})
}

// UpdateTicketType sets the "ticket_type" field to the value that was provided on create.
func (u *TicketUpsertOne) UpdateTicketType() *TicketUpsertOne {
	return u.Update(func(s *TicketUpsert) {
		s.UpdateTicketType()
	})
}

// SetIsActive sets the "is_active" field.
func (u *TicketUpsertOne) SetIsActive(v bool) *TicketUpsertOne {
	return u.Update(func(s *TicketUpsert) {
		s.SetIsActive(v)
	})
}

// UpdateIsActive sets the "is_active" field to the value that was provided on create.
func (u *TicketUpsertOne) UpdateIsActive() *TicketUpsertOne {
	return u.Update(func(s *TicketUpsert) {
		s.UpdateIsActive()
	})
}

// SetIsRefundable sets the "is_refundable" field.
func (u *TicketUpsertOne) SetIsRefundable(v bool) *TicketUpsertOne {
	return u.Update(func(s *TicketUpsert) {
		s.SetIsRefundable(v)
	})
}

// UpdateIsRefundable sets the "is_refundable" field to the value that was provided on create.
func (u *TicketUpsertOne) UpdateIsRefundable() *TicketUpsertOne {
	return u.Update(func(s *TicketUpsert) {
		s.UpdateIsRefundable()
	})
}

// Exec executes the query.
func (u *TicketUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for TicketCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *TicketUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *TicketUpsertOne) ID(ctx context.Context) (id int, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *TicketUpsertOne) IDX(ctx context.Context) int {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// TicketCreateBulk is the builder for creating many Ticket entities in bulk.
type TicketCreateBulk struct {
	config
	err      error
	builders []*TicketCreate
	conflict []sql.ConflictOption
}

// Save creates the Ticket entities in the database.
func (tcb *TicketCreateBulk) Save(ctx context.Context) ([]*Ticket, error) {
	if tcb.err != nil {
		return nil, tcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(tcb.builders))
	nodes := make([]*Ticket, len(tcb.builders))
	mutators := make([]Mutator, len(tcb.builders))
	for i := range tcb.builders {
		func(i int, root context.Context) {
			builder := tcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*TicketMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, tcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = tcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, tcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, tcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (tcb *TicketCreateBulk) SaveX(ctx context.Context) []*Ticket {
	v, err := tcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (tcb *TicketCreateBulk) Exec(ctx context.Context) error {
	_, err := tcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tcb *TicketCreateBulk) ExecX(ctx context.Context) {
	if err := tcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Ticket.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.TicketUpsert) {
//			SetCreateTime(v+v).
//		}).
//		Exec(ctx)
func (tcb *TicketCreateBulk) OnConflict(opts ...sql.ConflictOption) *TicketUpsertBulk {
	tcb.conflict = opts
	return &TicketUpsertBulk{
		create: tcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Ticket.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (tcb *TicketCreateBulk) OnConflictColumns(columns ...string) *TicketUpsertBulk {
	tcb.conflict = append(tcb.conflict, sql.ConflictColumns(columns...))
	return &TicketUpsertBulk{
		create: tcb,
	}
}

// TicketUpsertBulk is the builder for "upsert"-ing
// a bulk of Ticket nodes.
type TicketUpsertBulk struct {
	create *TicketCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Ticket.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *TicketUpsertBulk) UpdateNewValues() *TicketUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.CreateTime(); exists {
				s.SetIgnore(ticket.FieldCreateTime)
			}
			if _, exists := b.mutation.UUID(); exists {
				s.SetIgnore(ticket.FieldUUID)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Ticket.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *TicketUpsertBulk) Ignore() *TicketUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *TicketUpsertBulk) DoNothing() *TicketUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the TicketCreateBulk.OnConflict
// documentation for more info.
func (u *TicketUpsertBulk) Update(set func(*TicketUpsert)) *TicketUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&TicketUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdateTime sets the "update_time" field.
func (u *TicketUpsertBulk) SetUpdateTime(v time.Time) *TicketUpsertBulk {
	return u.Update(func(s *TicketUpsert) {
		s.SetUpdateTime(v)
	})
}

// UpdateUpdateTime sets the "update_time" field to the value that was provided on create.
func (u *TicketUpsertBulk) UpdateUpdateTime() *TicketUpsertBulk {
	return u.Update(func(s *TicketUpsert) {
		s.UpdateUpdateTime()
	})
}

// SetName sets the "name" field.
func (u *TicketUpsertBulk) SetName(v string) *TicketUpsertBulk {
	return u.Update(func(s *TicketUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *TicketUpsertBulk) UpdateName() *TicketUpsertBulk {
	return u.Update(func(s *TicketUpsert) {
		s.UpdateName()
	})
}

// SetDescription sets the "description" field.
func (u *TicketUpsertBulk) SetDescription(v string) *TicketUpsertBulk {
	return u.Update(func(s *TicketUpsert) {
		s.SetDescription(v)
	})
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *TicketUpsertBulk) UpdateDescription() *TicketUpsertBulk {
	return u.Update(func(s *TicketUpsert) {
		s.UpdateDescription()
	})
}

// SetPrice sets the "price" field.
func (u *TicketUpsertBulk) SetPrice(v float64) *TicketUpsertBulk {
	return u.Update(func(s *TicketUpsert) {
		s.SetPrice(v)
	})
}

// AddPrice adds v to the "price" field.
func (u *TicketUpsertBulk) AddPrice(v float64) *TicketUpsertBulk {
	return u.Update(func(s *TicketUpsert) {
		s.AddPrice(v)
	})
}

// UpdatePrice sets the "price" field to the value that was provided on create.
func (u *TicketUpsertBulk) UpdatePrice() *TicketUpsertBulk {
	return u.Update(func(s *TicketUpsert) {
		s.UpdatePrice()
	})
}

// SetQuantity sets the "quantity" field.
func (u *TicketUpsertBulk) SetQuantity(v int) *TicketUpsertBulk {
	return u.Update(func(s *TicketUpsert) {
		s.SetQuantity(v)
	})
}

// AddQuantity adds v to the "quantity" field.
func (u *TicketUpsertBulk) AddQuantity(v int) *TicketUpsertBulk {
	return u.Update(func(s *TicketUpsert) {
		s.AddQuantity(v)
	})
}

// UpdateQuantity sets the "quantity" field to the value that was provided on create.
func (u *TicketUpsertBulk) UpdateQuantity() *TicketUpsertBulk {
	return u.Update(func(s *TicketUpsert) {
		s.UpdateQuantity()
	})
}

// SetQuantitySold sets the "quantity_sold" field.
func (u *TicketUpsertBulk) SetQuantitySold(v int) *TicketUpsertBulk {
	return u.Update(func(s *TicketUpsert) {
		s.SetQuantitySold(v)
	})
}

// AddQuantitySold adds v to the "quantity_sold" field.
func (u *TicketUpsertBulk) AddQuantitySold(v int) *TicketUpsertBulk {
	return u.Update(func(s *TicketUpsert) {
		s.AddQuantitySold(v)
	})
}

// UpdateQuantitySold sets the "quantity_sold" field to the value that was provided on create.
func (u *TicketUpsertBulk) UpdateQuantitySold() *TicketUpsertBulk {
	return u.Update(func(s *TicketUpsert) {
		s.UpdateQuantitySold()
	})
}

// SetSaleStartDate sets the "sale_start_date" field.
func (u *TicketUpsertBulk) SetSaleStartDate(v time.Time) *TicketUpsertBulk {
	return u.Update(func(s *TicketUpsert) {
		s.SetSaleStartDate(v)
	})
}

// UpdateSaleStartDate sets the "sale_start_date" field to the value that was provided on create.
func (u *TicketUpsertBulk) UpdateSaleStartDate() *TicketUpsertBulk {
	return u.Update(func(s *TicketUpsert) {
		s.UpdateSaleStartDate()
	})
}

// SetSaleEndDate sets the "sale_end_date" field.
func (u *TicketUpsertBulk) SetSaleEndDate(v time.Time) *TicketUpsertBulk {
	return u.Update(func(s *TicketUpsert) {
		s.SetSaleEndDate(v)
	})
}

// UpdateSaleEndDate sets the "sale_end_date" field to the value that was provided on create.
func (u *TicketUpsertBulk) UpdateSaleEndDate() *TicketUpsertBulk {
	return u.Update(func(s *TicketUpsert) {
		s.UpdateSaleEndDate()
	})
}

// ClearSaleEndDate clears the value of the "sale_end_date" field.
func (u *TicketUpsertBulk) ClearSaleEndDate() *TicketUpsertBulk {
	return u.Update(func(s *TicketUpsert) {
		s.ClearSaleEndDate()
	})
}

// SetEventID sets the "event_id" field.
func (u *TicketUpsertBulk) SetEventID(v string) *TicketUpsertBulk {
	return u.Update(func(s *TicketUpsert) {
		s.SetEventID(v)
	})
}

// UpdateEventID sets the "event_id" field to the value that was provided on create.
func (u *TicketUpsertBulk) UpdateEventID() *TicketUpsertBulk {
	return u.Update(func(s *TicketUpsert) {
		s.UpdateEventID()
	})
}

// SetTicketType sets the "ticket_type" field.
func (u *TicketUpsertBulk) SetTicketType(v string) *TicketUpsertBulk {
	return u.Update(func(s *TicketUpsert) {
		s.SetTicketType(v)
	})
}

// UpdateTicketType sets the "ticket_type" field to the value that was provided on create.
func (u *TicketUpsertBulk) UpdateTicketType() *TicketUpsertBulk {
	return u.Update(func(s *TicketUpsert) {
		s.UpdateTicketType()
	})
}

// SetIsActive sets the "is_active" field.
func (u *TicketUpsertBulk) SetIsActive(v bool) *TicketUpsertBulk {
	return u.Update(func(s *TicketUpsert) {
		s.SetIsActive(v)
	})
}

// UpdateIsActive sets the "is_active" field to the value that was provided on create.
func (u *TicketUpsertBulk) UpdateIsActive() *TicketUpsertBulk {
	return u.Update(func(s *TicketUpsert) {
		s.UpdateIsActive()
	})
}

// SetIsRefundable sets the "is_refundable" field.
func (u *TicketUpsertBulk) SetIsRefundable(v bool) *TicketUpsertBulk {
	return u.Update(func(s *TicketUpsert) {
		s.SetIsRefundable(v)
	})
}

// UpdateIsRefundable sets the "is_refundable" field to the value that was provided on create.
func (u *TicketUpsertBulk) UpdateIsRefundable() *TicketUpsertBulk {
	return u.Update(func(s *TicketUpsert) {
		s.UpdateIsRefundable()
	})
}

// Exec executes the query.
func (u *TicketUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the TicketCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for TicketCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *TicketUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
