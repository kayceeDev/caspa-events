// Code generated by ent, DO NOT EDIT.

package event

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
	"github.com/kayceeDev/caspa-events/ent-go/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Event {
	return predicate.Event(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Event {
	return predicate.Event(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Event {
	return predicate.Event(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Event {
	return predicate.Event(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Event {
	return predicate.Event(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Event {
	return predicate.Event(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Event {
	return predicate.Event(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Event {
	return predicate.Event(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Event {
	return predicate.Event(sql.FieldLTE(FieldID, id))
}

// CreateTime applies equality check predicate on the "create_time" field. It's identical to CreateTimeEQ.
func CreateTime(v time.Time) predicate.Event {
	return predicate.Event(sql.FieldEQ(FieldCreateTime, v))
}

// UpdateTime applies equality check predicate on the "update_time" field. It's identical to UpdateTimeEQ.
func UpdateTime(v time.Time) predicate.Event {
	return predicate.Event(sql.FieldEQ(FieldUpdateTime, v))
}

// UUID applies equality check predicate on the "uuid" field. It's identical to UUIDEQ.
func UUID(v uuid.UUID) predicate.Event {
	return predicate.Event(sql.FieldEQ(FieldUUID, v))
}

// Title applies equality check predicate on the "title" field. It's identical to TitleEQ.
func Title(v string) predicate.Event {
	return predicate.Event(sql.FieldEQ(FieldTitle, v))
}

// Description applies equality check predicate on the "description" field. It's identical to DescriptionEQ.
func Description(v string) predicate.Event {
	return predicate.Event(sql.FieldEQ(FieldDescription, v))
}

// StartDate applies equality check predicate on the "start_date" field. It's identical to StartDateEQ.
func StartDate(v time.Time) predicate.Event {
	return predicate.Event(sql.FieldEQ(FieldStartDate, v))
}

// EndDate applies equality check predicate on the "end_date" field. It's identical to EndDateEQ.
func EndDate(v time.Time) predicate.Event {
	return predicate.Event(sql.FieldEQ(FieldEndDate, v))
}

// EventType applies equality check predicate on the "event_type" field. It's identical to EventTypeEQ.
func EventType(v string) predicate.Event {
	return predicate.Event(sql.FieldEQ(FieldEventType, v))
}

// IsPublic applies equality check predicate on the "is_public" field. It's identical to IsPublicEQ.
func IsPublic(v bool) predicate.Event {
	return predicate.Event(sql.FieldEQ(FieldIsPublic, v))
}

// IsPaid applies equality check predicate on the "is_paid" field. It's identical to IsPaidEQ.
func IsPaid(v bool) predicate.Event {
	return predicate.Event(sql.FieldEQ(FieldIsPaid, v))
}

// MaxParticipants applies equality check predicate on the "max_participants" field. It's identical to MaxParticipantsEQ.
func MaxParticipants(v int) predicate.Event {
	return predicate.Event(sql.FieldEQ(FieldMaxParticipants, v))
}

// RegistrationDeadline applies equality check predicate on the "registration_deadline" field. It's identical to RegistrationDeadlineEQ.
func RegistrationDeadline(v time.Time) predicate.Event {
	return predicate.Event(sql.FieldEQ(FieldRegistrationDeadline, v))
}

// CoverPhotoID applies equality check predicate on the "cover_photo_id" field. It's identical to CoverPhotoIDEQ.
func CoverPhotoID(v string) predicate.Event {
	return predicate.Event(sql.FieldEQ(FieldCoverPhotoID, v))
}

// OrganizerID applies equality check predicate on the "organizer_id" field. It's identical to OrganizerIDEQ.
func OrganizerID(v int) predicate.Event {
	return predicate.Event(sql.FieldEQ(FieldOrganizerID, v))
}

// LocationID applies equality check predicate on the "location_id" field. It's identical to LocationIDEQ.
func LocationID(v int) predicate.Event {
	return predicate.Event(sql.FieldEQ(FieldLocationID, v))
}

// CreateTimeEQ applies the EQ predicate on the "create_time" field.
func CreateTimeEQ(v time.Time) predicate.Event {
	return predicate.Event(sql.FieldEQ(FieldCreateTime, v))
}

// CreateTimeNEQ applies the NEQ predicate on the "create_time" field.
func CreateTimeNEQ(v time.Time) predicate.Event {
	return predicate.Event(sql.FieldNEQ(FieldCreateTime, v))
}

// CreateTimeIn applies the In predicate on the "create_time" field.
func CreateTimeIn(vs ...time.Time) predicate.Event {
	return predicate.Event(sql.FieldIn(FieldCreateTime, vs...))
}

// CreateTimeNotIn applies the NotIn predicate on the "create_time" field.
func CreateTimeNotIn(vs ...time.Time) predicate.Event {
	return predicate.Event(sql.FieldNotIn(FieldCreateTime, vs...))
}

// CreateTimeGT applies the GT predicate on the "create_time" field.
func CreateTimeGT(v time.Time) predicate.Event {
	return predicate.Event(sql.FieldGT(FieldCreateTime, v))
}

// CreateTimeGTE applies the GTE predicate on the "create_time" field.
func CreateTimeGTE(v time.Time) predicate.Event {
	return predicate.Event(sql.FieldGTE(FieldCreateTime, v))
}

// CreateTimeLT applies the LT predicate on the "create_time" field.
func CreateTimeLT(v time.Time) predicate.Event {
	return predicate.Event(sql.FieldLT(FieldCreateTime, v))
}

// CreateTimeLTE applies the LTE predicate on the "create_time" field.
func CreateTimeLTE(v time.Time) predicate.Event {
	return predicate.Event(sql.FieldLTE(FieldCreateTime, v))
}

// UpdateTimeEQ applies the EQ predicate on the "update_time" field.
func UpdateTimeEQ(v time.Time) predicate.Event {
	return predicate.Event(sql.FieldEQ(FieldUpdateTime, v))
}

// UpdateTimeNEQ applies the NEQ predicate on the "update_time" field.
func UpdateTimeNEQ(v time.Time) predicate.Event {
	return predicate.Event(sql.FieldNEQ(FieldUpdateTime, v))
}

// UpdateTimeIn applies the In predicate on the "update_time" field.
func UpdateTimeIn(vs ...time.Time) predicate.Event {
	return predicate.Event(sql.FieldIn(FieldUpdateTime, vs...))
}

// UpdateTimeNotIn applies the NotIn predicate on the "update_time" field.
func UpdateTimeNotIn(vs ...time.Time) predicate.Event {
	return predicate.Event(sql.FieldNotIn(FieldUpdateTime, vs...))
}

// UpdateTimeGT applies the GT predicate on the "update_time" field.
func UpdateTimeGT(v time.Time) predicate.Event {
	return predicate.Event(sql.FieldGT(FieldUpdateTime, v))
}

// UpdateTimeGTE applies the GTE predicate on the "update_time" field.
func UpdateTimeGTE(v time.Time) predicate.Event {
	return predicate.Event(sql.FieldGTE(FieldUpdateTime, v))
}

// UpdateTimeLT applies the LT predicate on the "update_time" field.
func UpdateTimeLT(v time.Time) predicate.Event {
	return predicate.Event(sql.FieldLT(FieldUpdateTime, v))
}

// UpdateTimeLTE applies the LTE predicate on the "update_time" field.
func UpdateTimeLTE(v time.Time) predicate.Event {
	return predicate.Event(sql.FieldLTE(FieldUpdateTime, v))
}

// UUIDEQ applies the EQ predicate on the "uuid" field.
func UUIDEQ(v uuid.UUID) predicate.Event {
	return predicate.Event(sql.FieldEQ(FieldUUID, v))
}

// UUIDNEQ applies the NEQ predicate on the "uuid" field.
func UUIDNEQ(v uuid.UUID) predicate.Event {
	return predicate.Event(sql.FieldNEQ(FieldUUID, v))
}

// UUIDIn applies the In predicate on the "uuid" field.
func UUIDIn(vs ...uuid.UUID) predicate.Event {
	return predicate.Event(sql.FieldIn(FieldUUID, vs...))
}

// UUIDNotIn applies the NotIn predicate on the "uuid" field.
func UUIDNotIn(vs ...uuid.UUID) predicate.Event {
	return predicate.Event(sql.FieldNotIn(FieldUUID, vs...))
}

// UUIDGT applies the GT predicate on the "uuid" field.
func UUIDGT(v uuid.UUID) predicate.Event {
	return predicate.Event(sql.FieldGT(FieldUUID, v))
}

// UUIDGTE applies the GTE predicate on the "uuid" field.
func UUIDGTE(v uuid.UUID) predicate.Event {
	return predicate.Event(sql.FieldGTE(FieldUUID, v))
}

// UUIDLT applies the LT predicate on the "uuid" field.
func UUIDLT(v uuid.UUID) predicate.Event {
	return predicate.Event(sql.FieldLT(FieldUUID, v))
}

// UUIDLTE applies the LTE predicate on the "uuid" field.
func UUIDLTE(v uuid.UUID) predicate.Event {
	return predicate.Event(sql.FieldLTE(FieldUUID, v))
}

// TitleEQ applies the EQ predicate on the "title" field.
func TitleEQ(v string) predicate.Event {
	return predicate.Event(sql.FieldEQ(FieldTitle, v))
}

// TitleNEQ applies the NEQ predicate on the "title" field.
func TitleNEQ(v string) predicate.Event {
	return predicate.Event(sql.FieldNEQ(FieldTitle, v))
}

// TitleIn applies the In predicate on the "title" field.
func TitleIn(vs ...string) predicate.Event {
	return predicate.Event(sql.FieldIn(FieldTitle, vs...))
}

// TitleNotIn applies the NotIn predicate on the "title" field.
func TitleNotIn(vs ...string) predicate.Event {
	return predicate.Event(sql.FieldNotIn(FieldTitle, vs...))
}

// TitleGT applies the GT predicate on the "title" field.
func TitleGT(v string) predicate.Event {
	return predicate.Event(sql.FieldGT(FieldTitle, v))
}

// TitleGTE applies the GTE predicate on the "title" field.
func TitleGTE(v string) predicate.Event {
	return predicate.Event(sql.FieldGTE(FieldTitle, v))
}

// TitleLT applies the LT predicate on the "title" field.
func TitleLT(v string) predicate.Event {
	return predicate.Event(sql.FieldLT(FieldTitle, v))
}

// TitleLTE applies the LTE predicate on the "title" field.
func TitleLTE(v string) predicate.Event {
	return predicate.Event(sql.FieldLTE(FieldTitle, v))
}

// TitleContains applies the Contains predicate on the "title" field.
func TitleContains(v string) predicate.Event {
	return predicate.Event(sql.FieldContains(FieldTitle, v))
}

// TitleHasPrefix applies the HasPrefix predicate on the "title" field.
func TitleHasPrefix(v string) predicate.Event {
	return predicate.Event(sql.FieldHasPrefix(FieldTitle, v))
}

// TitleHasSuffix applies the HasSuffix predicate on the "title" field.
func TitleHasSuffix(v string) predicate.Event {
	return predicate.Event(sql.FieldHasSuffix(FieldTitle, v))
}

// TitleEqualFold applies the EqualFold predicate on the "title" field.
func TitleEqualFold(v string) predicate.Event {
	return predicate.Event(sql.FieldEqualFold(FieldTitle, v))
}

// TitleContainsFold applies the ContainsFold predicate on the "title" field.
func TitleContainsFold(v string) predicate.Event {
	return predicate.Event(sql.FieldContainsFold(FieldTitle, v))
}

// DescriptionEQ applies the EQ predicate on the "description" field.
func DescriptionEQ(v string) predicate.Event {
	return predicate.Event(sql.FieldEQ(FieldDescription, v))
}

// DescriptionNEQ applies the NEQ predicate on the "description" field.
func DescriptionNEQ(v string) predicate.Event {
	return predicate.Event(sql.FieldNEQ(FieldDescription, v))
}

// DescriptionIn applies the In predicate on the "description" field.
func DescriptionIn(vs ...string) predicate.Event {
	return predicate.Event(sql.FieldIn(FieldDescription, vs...))
}

// DescriptionNotIn applies the NotIn predicate on the "description" field.
func DescriptionNotIn(vs ...string) predicate.Event {
	return predicate.Event(sql.FieldNotIn(FieldDescription, vs...))
}

// DescriptionGT applies the GT predicate on the "description" field.
func DescriptionGT(v string) predicate.Event {
	return predicate.Event(sql.FieldGT(FieldDescription, v))
}

// DescriptionGTE applies the GTE predicate on the "description" field.
func DescriptionGTE(v string) predicate.Event {
	return predicate.Event(sql.FieldGTE(FieldDescription, v))
}

// DescriptionLT applies the LT predicate on the "description" field.
func DescriptionLT(v string) predicate.Event {
	return predicate.Event(sql.FieldLT(FieldDescription, v))
}

// DescriptionLTE applies the LTE predicate on the "description" field.
func DescriptionLTE(v string) predicate.Event {
	return predicate.Event(sql.FieldLTE(FieldDescription, v))
}

// DescriptionContains applies the Contains predicate on the "description" field.
func DescriptionContains(v string) predicate.Event {
	return predicate.Event(sql.FieldContains(FieldDescription, v))
}

// DescriptionHasPrefix applies the HasPrefix predicate on the "description" field.
func DescriptionHasPrefix(v string) predicate.Event {
	return predicate.Event(sql.FieldHasPrefix(FieldDescription, v))
}

// DescriptionHasSuffix applies the HasSuffix predicate on the "description" field.
func DescriptionHasSuffix(v string) predicate.Event {
	return predicate.Event(sql.FieldHasSuffix(FieldDescription, v))
}

// DescriptionEqualFold applies the EqualFold predicate on the "description" field.
func DescriptionEqualFold(v string) predicate.Event {
	return predicate.Event(sql.FieldEqualFold(FieldDescription, v))
}

// DescriptionContainsFold applies the ContainsFold predicate on the "description" field.
func DescriptionContainsFold(v string) predicate.Event {
	return predicate.Event(sql.FieldContainsFold(FieldDescription, v))
}

// StartDateEQ applies the EQ predicate on the "start_date" field.
func StartDateEQ(v time.Time) predicate.Event {
	return predicate.Event(sql.FieldEQ(FieldStartDate, v))
}

// StartDateNEQ applies the NEQ predicate on the "start_date" field.
func StartDateNEQ(v time.Time) predicate.Event {
	return predicate.Event(sql.FieldNEQ(FieldStartDate, v))
}

// StartDateIn applies the In predicate on the "start_date" field.
func StartDateIn(vs ...time.Time) predicate.Event {
	return predicate.Event(sql.FieldIn(FieldStartDate, vs...))
}

// StartDateNotIn applies the NotIn predicate on the "start_date" field.
func StartDateNotIn(vs ...time.Time) predicate.Event {
	return predicate.Event(sql.FieldNotIn(FieldStartDate, vs...))
}

// StartDateGT applies the GT predicate on the "start_date" field.
func StartDateGT(v time.Time) predicate.Event {
	return predicate.Event(sql.FieldGT(FieldStartDate, v))
}

// StartDateGTE applies the GTE predicate on the "start_date" field.
func StartDateGTE(v time.Time) predicate.Event {
	return predicate.Event(sql.FieldGTE(FieldStartDate, v))
}

// StartDateLT applies the LT predicate on the "start_date" field.
func StartDateLT(v time.Time) predicate.Event {
	return predicate.Event(sql.FieldLT(FieldStartDate, v))
}

// StartDateLTE applies the LTE predicate on the "start_date" field.
func StartDateLTE(v time.Time) predicate.Event {
	return predicate.Event(sql.FieldLTE(FieldStartDate, v))
}

// EndDateEQ applies the EQ predicate on the "end_date" field.
func EndDateEQ(v time.Time) predicate.Event {
	return predicate.Event(sql.FieldEQ(FieldEndDate, v))
}

// EndDateNEQ applies the NEQ predicate on the "end_date" field.
func EndDateNEQ(v time.Time) predicate.Event {
	return predicate.Event(sql.FieldNEQ(FieldEndDate, v))
}

// EndDateIn applies the In predicate on the "end_date" field.
func EndDateIn(vs ...time.Time) predicate.Event {
	return predicate.Event(sql.FieldIn(FieldEndDate, vs...))
}

// EndDateNotIn applies the NotIn predicate on the "end_date" field.
func EndDateNotIn(vs ...time.Time) predicate.Event {
	return predicate.Event(sql.FieldNotIn(FieldEndDate, vs...))
}

// EndDateGT applies the GT predicate on the "end_date" field.
func EndDateGT(v time.Time) predicate.Event {
	return predicate.Event(sql.FieldGT(FieldEndDate, v))
}

// EndDateGTE applies the GTE predicate on the "end_date" field.
func EndDateGTE(v time.Time) predicate.Event {
	return predicate.Event(sql.FieldGTE(FieldEndDate, v))
}

// EndDateLT applies the LT predicate on the "end_date" field.
func EndDateLT(v time.Time) predicate.Event {
	return predicate.Event(sql.FieldLT(FieldEndDate, v))
}

// EndDateLTE applies the LTE predicate on the "end_date" field.
func EndDateLTE(v time.Time) predicate.Event {
	return predicate.Event(sql.FieldLTE(FieldEndDate, v))
}

// EventTypeEQ applies the EQ predicate on the "event_type" field.
func EventTypeEQ(v string) predicate.Event {
	return predicate.Event(sql.FieldEQ(FieldEventType, v))
}

// EventTypeNEQ applies the NEQ predicate on the "event_type" field.
func EventTypeNEQ(v string) predicate.Event {
	return predicate.Event(sql.FieldNEQ(FieldEventType, v))
}

// EventTypeIn applies the In predicate on the "event_type" field.
func EventTypeIn(vs ...string) predicate.Event {
	return predicate.Event(sql.FieldIn(FieldEventType, vs...))
}

// EventTypeNotIn applies the NotIn predicate on the "event_type" field.
func EventTypeNotIn(vs ...string) predicate.Event {
	return predicate.Event(sql.FieldNotIn(FieldEventType, vs...))
}

// EventTypeGT applies the GT predicate on the "event_type" field.
func EventTypeGT(v string) predicate.Event {
	return predicate.Event(sql.FieldGT(FieldEventType, v))
}

// EventTypeGTE applies the GTE predicate on the "event_type" field.
func EventTypeGTE(v string) predicate.Event {
	return predicate.Event(sql.FieldGTE(FieldEventType, v))
}

// EventTypeLT applies the LT predicate on the "event_type" field.
func EventTypeLT(v string) predicate.Event {
	return predicate.Event(sql.FieldLT(FieldEventType, v))
}

// EventTypeLTE applies the LTE predicate on the "event_type" field.
func EventTypeLTE(v string) predicate.Event {
	return predicate.Event(sql.FieldLTE(FieldEventType, v))
}

// EventTypeContains applies the Contains predicate on the "event_type" field.
func EventTypeContains(v string) predicate.Event {
	return predicate.Event(sql.FieldContains(FieldEventType, v))
}

// EventTypeHasPrefix applies the HasPrefix predicate on the "event_type" field.
func EventTypeHasPrefix(v string) predicate.Event {
	return predicate.Event(sql.FieldHasPrefix(FieldEventType, v))
}

// EventTypeHasSuffix applies the HasSuffix predicate on the "event_type" field.
func EventTypeHasSuffix(v string) predicate.Event {
	return predicate.Event(sql.FieldHasSuffix(FieldEventType, v))
}

// EventTypeEqualFold applies the EqualFold predicate on the "event_type" field.
func EventTypeEqualFold(v string) predicate.Event {
	return predicate.Event(sql.FieldEqualFold(FieldEventType, v))
}

// EventTypeContainsFold applies the ContainsFold predicate on the "event_type" field.
func EventTypeContainsFold(v string) predicate.Event {
	return predicate.Event(sql.FieldContainsFold(FieldEventType, v))
}

// StatusEQ applies the EQ predicate on the "status" field.
func StatusEQ(v Status) predicate.Event {
	return predicate.Event(sql.FieldEQ(FieldStatus, v))
}

// StatusNEQ applies the NEQ predicate on the "status" field.
func StatusNEQ(v Status) predicate.Event {
	return predicate.Event(sql.FieldNEQ(FieldStatus, v))
}

// StatusIn applies the In predicate on the "status" field.
func StatusIn(vs ...Status) predicate.Event {
	return predicate.Event(sql.FieldIn(FieldStatus, vs...))
}

// StatusNotIn applies the NotIn predicate on the "status" field.
func StatusNotIn(vs ...Status) predicate.Event {
	return predicate.Event(sql.FieldNotIn(FieldStatus, vs...))
}

// IsPublicEQ applies the EQ predicate on the "is_public" field.
func IsPublicEQ(v bool) predicate.Event {
	return predicate.Event(sql.FieldEQ(FieldIsPublic, v))
}

// IsPublicNEQ applies the NEQ predicate on the "is_public" field.
func IsPublicNEQ(v bool) predicate.Event {
	return predicate.Event(sql.FieldNEQ(FieldIsPublic, v))
}

// IsPaidEQ applies the EQ predicate on the "is_paid" field.
func IsPaidEQ(v bool) predicate.Event {
	return predicate.Event(sql.FieldEQ(FieldIsPaid, v))
}

// IsPaidNEQ applies the NEQ predicate on the "is_paid" field.
func IsPaidNEQ(v bool) predicate.Event {
	return predicate.Event(sql.FieldNEQ(FieldIsPaid, v))
}

// MaxParticipantsEQ applies the EQ predicate on the "max_participants" field.
func MaxParticipantsEQ(v int) predicate.Event {
	return predicate.Event(sql.FieldEQ(FieldMaxParticipants, v))
}

// MaxParticipantsNEQ applies the NEQ predicate on the "max_participants" field.
func MaxParticipantsNEQ(v int) predicate.Event {
	return predicate.Event(sql.FieldNEQ(FieldMaxParticipants, v))
}

// MaxParticipantsIn applies the In predicate on the "max_participants" field.
func MaxParticipantsIn(vs ...int) predicate.Event {
	return predicate.Event(sql.FieldIn(FieldMaxParticipants, vs...))
}

// MaxParticipantsNotIn applies the NotIn predicate on the "max_participants" field.
func MaxParticipantsNotIn(vs ...int) predicate.Event {
	return predicate.Event(sql.FieldNotIn(FieldMaxParticipants, vs...))
}

// MaxParticipantsGT applies the GT predicate on the "max_participants" field.
func MaxParticipantsGT(v int) predicate.Event {
	return predicate.Event(sql.FieldGT(FieldMaxParticipants, v))
}

// MaxParticipantsGTE applies the GTE predicate on the "max_participants" field.
func MaxParticipantsGTE(v int) predicate.Event {
	return predicate.Event(sql.FieldGTE(FieldMaxParticipants, v))
}

// MaxParticipantsLT applies the LT predicate on the "max_participants" field.
func MaxParticipantsLT(v int) predicate.Event {
	return predicate.Event(sql.FieldLT(FieldMaxParticipants, v))
}

// MaxParticipantsLTE applies the LTE predicate on the "max_participants" field.
func MaxParticipantsLTE(v int) predicate.Event {
	return predicate.Event(sql.FieldLTE(FieldMaxParticipants, v))
}

// RegistrationDeadlineEQ applies the EQ predicate on the "registration_deadline" field.
func RegistrationDeadlineEQ(v time.Time) predicate.Event {
	return predicate.Event(sql.FieldEQ(FieldRegistrationDeadline, v))
}

// RegistrationDeadlineNEQ applies the NEQ predicate on the "registration_deadline" field.
func RegistrationDeadlineNEQ(v time.Time) predicate.Event {
	return predicate.Event(sql.FieldNEQ(FieldRegistrationDeadline, v))
}

// RegistrationDeadlineIn applies the In predicate on the "registration_deadline" field.
func RegistrationDeadlineIn(vs ...time.Time) predicate.Event {
	return predicate.Event(sql.FieldIn(FieldRegistrationDeadline, vs...))
}

// RegistrationDeadlineNotIn applies the NotIn predicate on the "registration_deadline" field.
func RegistrationDeadlineNotIn(vs ...time.Time) predicate.Event {
	return predicate.Event(sql.FieldNotIn(FieldRegistrationDeadline, vs...))
}

// RegistrationDeadlineGT applies the GT predicate on the "registration_deadline" field.
func RegistrationDeadlineGT(v time.Time) predicate.Event {
	return predicate.Event(sql.FieldGT(FieldRegistrationDeadline, v))
}

// RegistrationDeadlineGTE applies the GTE predicate on the "registration_deadline" field.
func RegistrationDeadlineGTE(v time.Time) predicate.Event {
	return predicate.Event(sql.FieldGTE(FieldRegistrationDeadline, v))
}

// RegistrationDeadlineLT applies the LT predicate on the "registration_deadline" field.
func RegistrationDeadlineLT(v time.Time) predicate.Event {
	return predicate.Event(sql.FieldLT(FieldRegistrationDeadline, v))
}

// RegistrationDeadlineLTE applies the LTE predicate on the "registration_deadline" field.
func RegistrationDeadlineLTE(v time.Time) predicate.Event {
	return predicate.Event(sql.FieldLTE(FieldRegistrationDeadline, v))
}

// RegistrationDeadlineIsNil applies the IsNil predicate on the "registration_deadline" field.
func RegistrationDeadlineIsNil() predicate.Event {
	return predicate.Event(sql.FieldIsNull(FieldRegistrationDeadline))
}

// RegistrationDeadlineNotNil applies the NotNil predicate on the "registration_deadline" field.
func RegistrationDeadlineNotNil() predicate.Event {
	return predicate.Event(sql.FieldNotNull(FieldRegistrationDeadline))
}

// CoverPhotoIDEQ applies the EQ predicate on the "cover_photo_id" field.
func CoverPhotoIDEQ(v string) predicate.Event {
	return predicate.Event(sql.FieldEQ(FieldCoverPhotoID, v))
}

// CoverPhotoIDNEQ applies the NEQ predicate on the "cover_photo_id" field.
func CoverPhotoIDNEQ(v string) predicate.Event {
	return predicate.Event(sql.FieldNEQ(FieldCoverPhotoID, v))
}

// CoverPhotoIDIn applies the In predicate on the "cover_photo_id" field.
func CoverPhotoIDIn(vs ...string) predicate.Event {
	return predicate.Event(sql.FieldIn(FieldCoverPhotoID, vs...))
}

// CoverPhotoIDNotIn applies the NotIn predicate on the "cover_photo_id" field.
func CoverPhotoIDNotIn(vs ...string) predicate.Event {
	return predicate.Event(sql.FieldNotIn(FieldCoverPhotoID, vs...))
}

// CoverPhotoIDGT applies the GT predicate on the "cover_photo_id" field.
func CoverPhotoIDGT(v string) predicate.Event {
	return predicate.Event(sql.FieldGT(FieldCoverPhotoID, v))
}

// CoverPhotoIDGTE applies the GTE predicate on the "cover_photo_id" field.
func CoverPhotoIDGTE(v string) predicate.Event {
	return predicate.Event(sql.FieldGTE(FieldCoverPhotoID, v))
}

// CoverPhotoIDLT applies the LT predicate on the "cover_photo_id" field.
func CoverPhotoIDLT(v string) predicate.Event {
	return predicate.Event(sql.FieldLT(FieldCoverPhotoID, v))
}

// CoverPhotoIDLTE applies the LTE predicate on the "cover_photo_id" field.
func CoverPhotoIDLTE(v string) predicate.Event {
	return predicate.Event(sql.FieldLTE(FieldCoverPhotoID, v))
}

// CoverPhotoIDContains applies the Contains predicate on the "cover_photo_id" field.
func CoverPhotoIDContains(v string) predicate.Event {
	return predicate.Event(sql.FieldContains(FieldCoverPhotoID, v))
}

// CoverPhotoIDHasPrefix applies the HasPrefix predicate on the "cover_photo_id" field.
func CoverPhotoIDHasPrefix(v string) predicate.Event {
	return predicate.Event(sql.FieldHasPrefix(FieldCoverPhotoID, v))
}

// CoverPhotoIDHasSuffix applies the HasSuffix predicate on the "cover_photo_id" field.
func CoverPhotoIDHasSuffix(v string) predicate.Event {
	return predicate.Event(sql.FieldHasSuffix(FieldCoverPhotoID, v))
}

// CoverPhotoIDIsNil applies the IsNil predicate on the "cover_photo_id" field.
func CoverPhotoIDIsNil() predicate.Event {
	return predicate.Event(sql.FieldIsNull(FieldCoverPhotoID))
}

// CoverPhotoIDNotNil applies the NotNil predicate on the "cover_photo_id" field.
func CoverPhotoIDNotNil() predicate.Event {
	return predicate.Event(sql.FieldNotNull(FieldCoverPhotoID))
}

// CoverPhotoIDEqualFold applies the EqualFold predicate on the "cover_photo_id" field.
func CoverPhotoIDEqualFold(v string) predicate.Event {
	return predicate.Event(sql.FieldEqualFold(FieldCoverPhotoID, v))
}

// CoverPhotoIDContainsFold applies the ContainsFold predicate on the "cover_photo_id" field.
func CoverPhotoIDContainsFold(v string) predicate.Event {
	return predicate.Event(sql.FieldContainsFold(FieldCoverPhotoID, v))
}

// OrganizerIDEQ applies the EQ predicate on the "organizer_id" field.
func OrganizerIDEQ(v int) predicate.Event {
	return predicate.Event(sql.FieldEQ(FieldOrganizerID, v))
}

// OrganizerIDNEQ applies the NEQ predicate on the "organizer_id" field.
func OrganizerIDNEQ(v int) predicate.Event {
	return predicate.Event(sql.FieldNEQ(FieldOrganizerID, v))
}

// OrganizerIDIn applies the In predicate on the "organizer_id" field.
func OrganizerIDIn(vs ...int) predicate.Event {
	return predicate.Event(sql.FieldIn(FieldOrganizerID, vs...))
}

// OrganizerIDNotIn applies the NotIn predicate on the "organizer_id" field.
func OrganizerIDNotIn(vs ...int) predicate.Event {
	return predicate.Event(sql.FieldNotIn(FieldOrganizerID, vs...))
}

// LocationIDEQ applies the EQ predicate on the "location_id" field.
func LocationIDEQ(v int) predicate.Event {
	return predicate.Event(sql.FieldEQ(FieldLocationID, v))
}

// LocationIDNEQ applies the NEQ predicate on the "location_id" field.
func LocationIDNEQ(v int) predicate.Event {
	return predicate.Event(sql.FieldNEQ(FieldLocationID, v))
}

// LocationIDIn applies the In predicate on the "location_id" field.
func LocationIDIn(vs ...int) predicate.Event {
	return predicate.Event(sql.FieldIn(FieldLocationID, vs...))
}

// LocationIDNotIn applies the NotIn predicate on the "location_id" field.
func LocationIDNotIn(vs ...int) predicate.Event {
	return predicate.Event(sql.FieldNotIn(FieldLocationID, vs...))
}

// LocationIDIsNil applies the IsNil predicate on the "location_id" field.
func LocationIDIsNil() predicate.Event {
	return predicate.Event(sql.FieldIsNull(FieldLocationID))
}

// LocationIDNotNil applies the NotNil predicate on the "location_id" field.
func LocationIDNotNil() predicate.Event {
	return predicate.Event(sql.FieldNotNull(FieldLocationID))
}

// HasUser applies the HasEdge predicate on the "user" edge.
func HasUser() predicate.Event {
	return predicate.Event(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, UserTable, UserColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasUserWith applies the HasEdge predicate on the "user" edge with a given conditions (other predicates).
func HasUserWith(preds ...predicate.User) predicate.Event {
	return predicate.Event(func(s *sql.Selector) {
		step := newUserStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasLocation applies the HasEdge predicate on the "location" edge.
func HasLocation() predicate.Event {
	return predicate.Event(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, LocationTable, LocationColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasLocationWith applies the HasEdge predicate on the "location" edge with a given conditions (other predicates).
func HasLocationWith(preds ...predicate.Location) predicate.Event {
	return predicate.Event(func(s *sql.Selector) {
		step := newLocationStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasGuest applies the HasEdge predicate on the "guest" edge.
func HasGuest() predicate.Event {
	return predicate.Event(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, GuestTable, GuestColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasGuestWith applies the HasEdge predicate on the "guest" edge with a given conditions (other predicates).
func HasGuestWith(preds ...predicate.User) predicate.Event {
	return predicate.Event(func(s *sql.Selector) {
		step := newGuestStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasTicket applies the HasEdge predicate on the "ticket" edge.
func HasTicket() predicate.Event {
	return predicate.Event(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, TicketTable, TicketColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasTicketWith applies the HasEdge predicate on the "ticket" edge with a given conditions (other predicates).
func HasTicketWith(preds ...predicate.Ticket) predicate.Event {
	return predicate.Event(func(s *sql.Selector) {
		step := newTicketStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Event) predicate.Event {
	return predicate.Event(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Event) predicate.Event {
	return predicate.Event(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Event) predicate.Event {
	return predicate.Event(sql.NotPredicates(p))
}
