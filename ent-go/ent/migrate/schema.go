// Code generated by ent, DO NOT EDIT.

package migrate

import (
	"entgo.io/ent/dialect/sql/schema"
	"entgo.io/ent/schema/field"
)

var (
	// EventsColumns holds the columns for the "events" table.
	EventsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "create_time", Type: field.TypeTime},
		{Name: "update_time", Type: field.TypeTime},
		{Name: "uuid", Type: field.TypeUUID, Unique: true},
		{Name: "title", Type: field.TypeString},
		{Name: "description", Type: field.TypeString},
		{Name: "start_date", Type: field.TypeTime},
		{Name: "end_date", Type: field.TypeTime},
		{Name: "event_type", Type: field.TypeString, Size: 50},
		{Name: "status", Type: field.TypeEnum, Enums: []string{"draft", "published", "cancelled", "ended"}, Default: "draft"},
		{Name: "is_public", Type: field.TypeBool, Default: false},
		{Name: "is_paid", Type: field.TypeBool, Default: false},
		{Name: "max_participants", Type: field.TypeInt, Default: 0},
		{Name: "registration_deadline", Type: field.TypeTime, Nullable: true},
		{Name: "cover_photo_id", Type: field.TypeString, Nullable: true},
		{Name: "location_id", Type: field.TypeInt, Nullable: true},
		{Name: "organizer_id", Type: field.TypeInt},
	}
	// EventsTable holds the schema information for the "events" table.
	EventsTable = &schema.Table{
		Name:       "events",
		Columns:    EventsColumns,
		PrimaryKey: []*schema.Column{EventsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "events_locations_event",
				Columns:    []*schema.Column{EventsColumns[15]},
				RefColumns: []*schema.Column{LocationsColumns[0]},
				OnDelete:   schema.SetNull,
			},
			{
				Symbol:     "events_users_event",
				Columns:    []*schema.Column{EventsColumns[16]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.NoAction,
			},
		},
	}
	// LocationsColumns holds the columns for the "locations" table.
	LocationsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "create_time", Type: field.TypeTime},
		{Name: "update_time", Type: field.TypeTime},
		{Name: "uuid", Type: field.TypeUUID, Unique: true},
		{Name: "name", Type: field.TypeString, Size: 255},
		{Name: "address", Type: field.TypeString, Nullable: true},
		{Name: "city", Type: field.TypeString, Nullable: true, Size: 100},
		{Name: "state", Type: field.TypeString, Nullable: true, Size: 100},
		{Name: "country", Type: field.TypeString, Nullable: true, Size: 100},
		{Name: "postal_code", Type: field.TypeString, Nullable: true, Size: 20},
		{Name: "latitude", Type: field.TypeFloat64, Nullable: true},
		{Name: "longitude", Type: field.TypeFloat64, Nullable: true},
		{Name: "capacity", Type: field.TypeInt, Nullable: true},
	}
	// LocationsTable holds the schema information for the "locations" table.
	LocationsTable = &schema.Table{
		Name:       "locations",
		Columns:    LocationsColumns,
		PrimaryKey: []*schema.Column{LocationsColumns[0]},
	}
	// TicketsColumns holds the columns for the "tickets" table.
	TicketsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "create_time", Type: field.TypeTime},
		{Name: "update_time", Type: field.TypeTime},
		{Name: "uuid", Type: field.TypeUUID, Unique: true},
		{Name: "name", Type: field.TypeString},
		{Name: "description", Type: field.TypeString},
		{Name: "price", Type: field.TypeFloat64},
		{Name: "quantity", Type: field.TypeInt},
		{Name: "quantity_sold", Type: field.TypeInt, Default: 0},
		{Name: "sale_start_date", Type: field.TypeTime},
		{Name: "sale_end_date", Type: field.TypeTime, Nullable: true},
		{Name: "event_id", Type: field.TypeString},
		{Name: "ticket_type", Type: field.TypeString, Size: 50},
		{Name: "is_active", Type: field.TypeBool, Default: true},
		{Name: "is_refundable", Type: field.TypeBool, Default: false},
		{Name: "event_ticket", Type: field.TypeInt, Nullable: true},
	}
	// TicketsTable holds the schema information for the "tickets" table.
	TicketsTable = &schema.Table{
		Name:       "tickets",
		Columns:    TicketsColumns,
		PrimaryKey: []*schema.Column{TicketsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "tickets_events_ticket",
				Columns:    []*schema.Column{TicketsColumns[15]},
				RefColumns: []*schema.Column{EventsColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
	}
	// UsersColumns holds the columns for the "users" table.
	UsersColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "create_time", Type: field.TypeTime},
		{Name: "update_time", Type: field.TypeTime},
		{Name: "uuid", Type: field.TypeUUID, Unique: true},
		{Name: "first_name", Type: field.TypeString},
		{Name: "last_name", Type: field.TypeString},
		{Name: "email", Type: field.TypeString, Unique: true},
		{Name: "password", Type: field.TypeString, Nullable: true},
		{Name: "phone", Type: field.TypeString, Unique: true, Nullable: true},
		{Name: "is_vendor", Type: field.TypeBool, Default: false},
		{Name: "email_verified", Type: field.TypeBool, Default: false},
		{Name: "phone_verified", Type: field.TypeBool, Default: false},
		{Name: "email_verified_at", Type: field.TypeTime, Nullable: true},
		{Name: "phone_verified_at", Type: field.TypeTime, Nullable: true},
		{Name: "disabled", Type: field.TypeBool, Nullable: true, Default: false},
		{Name: "event_guest", Type: field.TypeInt, Nullable: true},
	}
	// UsersTable holds the schema information for the "users" table.
	UsersTable = &schema.Table{
		Name:       "users",
		Columns:    UsersColumns,
		PrimaryKey: []*schema.Column{UsersColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "users_events_guest",
				Columns:    []*schema.Column{UsersColumns[15]},
				RefColumns: []*schema.Column{EventsColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
	}
	// Tables holds all the tables in the schema.
	Tables = []*schema.Table{
		EventsTable,
		LocationsTable,
		TicketsTable,
		UsersTable,
	}
)

func init() {
	EventsTable.ForeignKeys[0].RefTable = LocationsTable
	EventsTable.ForeignKeys[1].RefTable = UsersTable
	TicketsTable.ForeignKeys[0].RefTable = EventsTable
	UsersTable.ForeignKeys[0].RefTable = EventsTable
}
