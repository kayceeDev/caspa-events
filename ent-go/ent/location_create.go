// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/kayceeDev/caspa-events/ent-go/ent/event"
	"github.com/kayceeDev/caspa-events/ent-go/ent/location"
)

// LocationCreate is the builder for creating a Location entity.
type LocationCreate struct {
	config
	mutation *LocationMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreateTime sets the "create_time" field.
func (lc *LocationCreate) SetCreateTime(t time.Time) *LocationCreate {
	lc.mutation.SetCreateTime(t)
	return lc
}

// SetNillableCreateTime sets the "create_time" field if the given value is not nil.
func (lc *LocationCreate) SetNillableCreateTime(t *time.Time) *LocationCreate {
	if t != nil {
		lc.SetCreateTime(*t)
	}
	return lc
}

// SetUpdateTime sets the "update_time" field.
func (lc *LocationCreate) SetUpdateTime(t time.Time) *LocationCreate {
	lc.mutation.SetUpdateTime(t)
	return lc
}

// SetNillableUpdateTime sets the "update_time" field if the given value is not nil.
func (lc *LocationCreate) SetNillableUpdateTime(t *time.Time) *LocationCreate {
	if t != nil {
		lc.SetUpdateTime(*t)
	}
	return lc
}

// SetUUID sets the "uuid" field.
func (lc *LocationCreate) SetUUID(u uuid.UUID) *LocationCreate {
	lc.mutation.SetUUID(u)
	return lc
}

// SetNillableUUID sets the "uuid" field if the given value is not nil.
func (lc *LocationCreate) SetNillableUUID(u *uuid.UUID) *LocationCreate {
	if u != nil {
		lc.SetUUID(*u)
	}
	return lc
}

// SetName sets the "name" field.
func (lc *LocationCreate) SetName(s string) *LocationCreate {
	lc.mutation.SetName(s)
	return lc
}

// SetAddress sets the "address" field.
func (lc *LocationCreate) SetAddress(s string) *LocationCreate {
	lc.mutation.SetAddress(s)
	return lc
}

// SetNillableAddress sets the "address" field if the given value is not nil.
func (lc *LocationCreate) SetNillableAddress(s *string) *LocationCreate {
	if s != nil {
		lc.SetAddress(*s)
	}
	return lc
}

// SetCity sets the "city" field.
func (lc *LocationCreate) SetCity(s string) *LocationCreate {
	lc.mutation.SetCity(s)
	return lc
}

// SetNillableCity sets the "city" field if the given value is not nil.
func (lc *LocationCreate) SetNillableCity(s *string) *LocationCreate {
	if s != nil {
		lc.SetCity(*s)
	}
	return lc
}

// SetState sets the "state" field.
func (lc *LocationCreate) SetState(s string) *LocationCreate {
	lc.mutation.SetState(s)
	return lc
}

// SetNillableState sets the "state" field if the given value is not nil.
func (lc *LocationCreate) SetNillableState(s *string) *LocationCreate {
	if s != nil {
		lc.SetState(*s)
	}
	return lc
}

// SetCountry sets the "country" field.
func (lc *LocationCreate) SetCountry(s string) *LocationCreate {
	lc.mutation.SetCountry(s)
	return lc
}

// SetNillableCountry sets the "country" field if the given value is not nil.
func (lc *LocationCreate) SetNillableCountry(s *string) *LocationCreate {
	if s != nil {
		lc.SetCountry(*s)
	}
	return lc
}

// SetPostalCode sets the "postal_code" field.
func (lc *LocationCreate) SetPostalCode(s string) *LocationCreate {
	lc.mutation.SetPostalCode(s)
	return lc
}

// SetNillablePostalCode sets the "postal_code" field if the given value is not nil.
func (lc *LocationCreate) SetNillablePostalCode(s *string) *LocationCreate {
	if s != nil {
		lc.SetPostalCode(*s)
	}
	return lc
}

// SetLatitude sets the "latitude" field.
func (lc *LocationCreate) SetLatitude(f float64) *LocationCreate {
	lc.mutation.SetLatitude(f)
	return lc
}

// SetNillableLatitude sets the "latitude" field if the given value is not nil.
func (lc *LocationCreate) SetNillableLatitude(f *float64) *LocationCreate {
	if f != nil {
		lc.SetLatitude(*f)
	}
	return lc
}

// SetLongitude sets the "longitude" field.
func (lc *LocationCreate) SetLongitude(f float64) *LocationCreate {
	lc.mutation.SetLongitude(f)
	return lc
}

// SetNillableLongitude sets the "longitude" field if the given value is not nil.
func (lc *LocationCreate) SetNillableLongitude(f *float64) *LocationCreate {
	if f != nil {
		lc.SetLongitude(*f)
	}
	return lc
}

// SetCapacity sets the "capacity" field.
func (lc *LocationCreate) SetCapacity(i int) *LocationCreate {
	lc.mutation.SetCapacity(i)
	return lc
}

// SetNillableCapacity sets the "capacity" field if the given value is not nil.
func (lc *LocationCreate) SetNillableCapacity(i *int) *LocationCreate {
	if i != nil {
		lc.SetCapacity(*i)
	}
	return lc
}

// AddEventIDs adds the "event" edge to the Event entity by IDs.
func (lc *LocationCreate) AddEventIDs(ids ...int) *LocationCreate {
	lc.mutation.AddEventIDs(ids...)
	return lc
}

// AddEvent adds the "event" edges to the Event entity.
func (lc *LocationCreate) AddEvent(e ...*Event) *LocationCreate {
	ids := make([]int, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return lc.AddEventIDs(ids...)
}

// Mutation returns the LocationMutation object of the builder.
func (lc *LocationCreate) Mutation() *LocationMutation {
	return lc.mutation
}

// Save creates the Location in the database.
func (lc *LocationCreate) Save(ctx context.Context) (*Location, error) {
	lc.defaults()
	return withHooks(ctx, lc.sqlSave, lc.mutation, lc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (lc *LocationCreate) SaveX(ctx context.Context) *Location {
	v, err := lc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (lc *LocationCreate) Exec(ctx context.Context) error {
	_, err := lc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (lc *LocationCreate) ExecX(ctx context.Context) {
	if err := lc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (lc *LocationCreate) defaults() {
	if _, ok := lc.mutation.CreateTime(); !ok {
		v := location.DefaultCreateTime()
		lc.mutation.SetCreateTime(v)
	}
	if _, ok := lc.mutation.UpdateTime(); !ok {
		v := location.DefaultUpdateTime()
		lc.mutation.SetUpdateTime(v)
	}
	if _, ok := lc.mutation.UUID(); !ok {
		v := location.DefaultUUID()
		lc.mutation.SetUUID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (lc *LocationCreate) check() error {
	if _, ok := lc.mutation.CreateTime(); !ok {
		return &ValidationError{Name: "create_time", err: errors.New(`ent: missing required field "Location.create_time"`)}
	}
	if _, ok := lc.mutation.UpdateTime(); !ok {
		return &ValidationError{Name: "update_time", err: errors.New(`ent: missing required field "Location.update_time"`)}
	}
	if _, ok := lc.mutation.UUID(); !ok {
		return &ValidationError{Name: "uuid", err: errors.New(`ent: missing required field "Location.uuid"`)}
	}
	if _, ok := lc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "Location.name"`)}
	}
	if v, ok := lc.mutation.Name(); ok {
		if err := location.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Location.name": %w`, err)}
		}
	}
	if v, ok := lc.mutation.City(); ok {
		if err := location.CityValidator(v); err != nil {
			return &ValidationError{Name: "city", err: fmt.Errorf(`ent: validator failed for field "Location.city": %w`, err)}
		}
	}
	if v, ok := lc.mutation.State(); ok {
		if err := location.StateValidator(v); err != nil {
			return &ValidationError{Name: "state", err: fmt.Errorf(`ent: validator failed for field "Location.state": %w`, err)}
		}
	}
	if v, ok := lc.mutation.Country(); ok {
		if err := location.CountryValidator(v); err != nil {
			return &ValidationError{Name: "country", err: fmt.Errorf(`ent: validator failed for field "Location.country": %w`, err)}
		}
	}
	if v, ok := lc.mutation.PostalCode(); ok {
		if err := location.PostalCodeValidator(v); err != nil {
			return &ValidationError{Name: "postal_code", err: fmt.Errorf(`ent: validator failed for field "Location.postal_code": %w`, err)}
		}
	}
	return nil
}

func (lc *LocationCreate) sqlSave(ctx context.Context) (*Location, error) {
	if err := lc.check(); err != nil {
		return nil, err
	}
	_node, _spec := lc.createSpec()
	if err := sqlgraph.CreateNode(ctx, lc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	lc.mutation.id = &_node.ID
	lc.mutation.done = true
	return _node, nil
}

func (lc *LocationCreate) createSpec() (*Location, *sqlgraph.CreateSpec) {
	var (
		_node = &Location{config: lc.config}
		_spec = sqlgraph.NewCreateSpec(location.Table, sqlgraph.NewFieldSpec(location.FieldID, field.TypeInt))
	)
	_spec.OnConflict = lc.conflict
	if value, ok := lc.mutation.CreateTime(); ok {
		_spec.SetField(location.FieldCreateTime, field.TypeTime, value)
		_node.CreateTime = value
	}
	if value, ok := lc.mutation.UpdateTime(); ok {
		_spec.SetField(location.FieldUpdateTime, field.TypeTime, value)
		_node.UpdateTime = value
	}
	if value, ok := lc.mutation.UUID(); ok {
		_spec.SetField(location.FieldUUID, field.TypeUUID, value)
		_node.UUID = value
	}
	if value, ok := lc.mutation.Name(); ok {
		_spec.SetField(location.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := lc.mutation.Address(); ok {
		_spec.SetField(location.FieldAddress, field.TypeString, value)
		_node.Address = value
	}
	if value, ok := lc.mutation.City(); ok {
		_spec.SetField(location.FieldCity, field.TypeString, value)
		_node.City = value
	}
	if value, ok := lc.mutation.State(); ok {
		_spec.SetField(location.FieldState, field.TypeString, value)
		_node.State = value
	}
	if value, ok := lc.mutation.Country(); ok {
		_spec.SetField(location.FieldCountry, field.TypeString, value)
		_node.Country = value
	}
	if value, ok := lc.mutation.PostalCode(); ok {
		_spec.SetField(location.FieldPostalCode, field.TypeString, value)
		_node.PostalCode = value
	}
	if value, ok := lc.mutation.Latitude(); ok {
		_spec.SetField(location.FieldLatitude, field.TypeFloat64, value)
		_node.Latitude = value
	}
	if value, ok := lc.mutation.Longitude(); ok {
		_spec.SetField(location.FieldLongitude, field.TypeFloat64, value)
		_node.Longitude = value
	}
	if value, ok := lc.mutation.Capacity(); ok {
		_spec.SetField(location.FieldCapacity, field.TypeInt, value)
		_node.Capacity = value
	}
	if nodes := lc.mutation.EventIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   location.EventTable,
			Columns: []string{location.EventColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(event.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Location.Create().
//		SetCreateTime(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.LocationUpsert) {
//			SetCreateTime(v+v).
//		}).
//		Exec(ctx)
func (lc *LocationCreate) OnConflict(opts ...sql.ConflictOption) *LocationUpsertOne {
	lc.conflict = opts
	return &LocationUpsertOne{
		create: lc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Location.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (lc *LocationCreate) OnConflictColumns(columns ...string) *LocationUpsertOne {
	lc.conflict = append(lc.conflict, sql.ConflictColumns(columns...))
	return &LocationUpsertOne{
		create: lc,
	}
}

type (
	// LocationUpsertOne is the builder for "upsert"-ing
	//  one Location node.
	LocationUpsertOne struct {
		create *LocationCreate
	}

	// LocationUpsert is the "OnConflict" setter.
	LocationUpsert struct {
		*sql.UpdateSet
	}
)

// SetUpdateTime sets the "update_time" field.
func (u *LocationUpsert) SetUpdateTime(v time.Time) *LocationUpsert {
	u.Set(location.FieldUpdateTime, v)
	return u
}

// UpdateUpdateTime sets the "update_time" field to the value that was provided on create.
func (u *LocationUpsert) UpdateUpdateTime() *LocationUpsert {
	u.SetExcluded(location.FieldUpdateTime)
	return u
}

// SetName sets the "name" field.
func (u *LocationUpsert) SetName(v string) *LocationUpsert {
	u.Set(location.FieldName, v)
	return u
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *LocationUpsert) UpdateName() *LocationUpsert {
	u.SetExcluded(location.FieldName)
	return u
}

// SetAddress sets the "address" field.
func (u *LocationUpsert) SetAddress(v string) *LocationUpsert {
	u.Set(location.FieldAddress, v)
	return u
}

// UpdateAddress sets the "address" field to the value that was provided on create.
func (u *LocationUpsert) UpdateAddress() *LocationUpsert {
	u.SetExcluded(location.FieldAddress)
	return u
}

// ClearAddress clears the value of the "address" field.
func (u *LocationUpsert) ClearAddress() *LocationUpsert {
	u.SetNull(location.FieldAddress)
	return u
}

// SetCity sets the "city" field.
func (u *LocationUpsert) SetCity(v string) *LocationUpsert {
	u.Set(location.FieldCity, v)
	return u
}

// UpdateCity sets the "city" field to the value that was provided on create.
func (u *LocationUpsert) UpdateCity() *LocationUpsert {
	u.SetExcluded(location.FieldCity)
	return u
}

// ClearCity clears the value of the "city" field.
func (u *LocationUpsert) ClearCity() *LocationUpsert {
	u.SetNull(location.FieldCity)
	return u
}

// SetState sets the "state" field.
func (u *LocationUpsert) SetState(v string) *LocationUpsert {
	u.Set(location.FieldState, v)
	return u
}

// UpdateState sets the "state" field to the value that was provided on create.
func (u *LocationUpsert) UpdateState() *LocationUpsert {
	u.SetExcluded(location.FieldState)
	return u
}

// ClearState clears the value of the "state" field.
func (u *LocationUpsert) ClearState() *LocationUpsert {
	u.SetNull(location.FieldState)
	return u
}

// SetCountry sets the "country" field.
func (u *LocationUpsert) SetCountry(v string) *LocationUpsert {
	u.Set(location.FieldCountry, v)
	return u
}

// UpdateCountry sets the "country" field to the value that was provided on create.
func (u *LocationUpsert) UpdateCountry() *LocationUpsert {
	u.SetExcluded(location.FieldCountry)
	return u
}

// ClearCountry clears the value of the "country" field.
func (u *LocationUpsert) ClearCountry() *LocationUpsert {
	u.SetNull(location.FieldCountry)
	return u
}

// SetPostalCode sets the "postal_code" field.
func (u *LocationUpsert) SetPostalCode(v string) *LocationUpsert {
	u.Set(location.FieldPostalCode, v)
	return u
}

// UpdatePostalCode sets the "postal_code" field to the value that was provided on create.
func (u *LocationUpsert) UpdatePostalCode() *LocationUpsert {
	u.SetExcluded(location.FieldPostalCode)
	return u
}

// ClearPostalCode clears the value of the "postal_code" field.
func (u *LocationUpsert) ClearPostalCode() *LocationUpsert {
	u.SetNull(location.FieldPostalCode)
	return u
}

// SetLatitude sets the "latitude" field.
func (u *LocationUpsert) SetLatitude(v float64) *LocationUpsert {
	u.Set(location.FieldLatitude, v)
	return u
}

// UpdateLatitude sets the "latitude" field to the value that was provided on create.
func (u *LocationUpsert) UpdateLatitude() *LocationUpsert {
	u.SetExcluded(location.FieldLatitude)
	return u
}

// AddLatitude adds v to the "latitude" field.
func (u *LocationUpsert) AddLatitude(v float64) *LocationUpsert {
	u.Add(location.FieldLatitude, v)
	return u
}

// ClearLatitude clears the value of the "latitude" field.
func (u *LocationUpsert) ClearLatitude() *LocationUpsert {
	u.SetNull(location.FieldLatitude)
	return u
}

// SetLongitude sets the "longitude" field.
func (u *LocationUpsert) SetLongitude(v float64) *LocationUpsert {
	u.Set(location.FieldLongitude, v)
	return u
}

// UpdateLongitude sets the "longitude" field to the value that was provided on create.
func (u *LocationUpsert) UpdateLongitude() *LocationUpsert {
	u.SetExcluded(location.FieldLongitude)
	return u
}

// AddLongitude adds v to the "longitude" field.
func (u *LocationUpsert) AddLongitude(v float64) *LocationUpsert {
	u.Add(location.FieldLongitude, v)
	return u
}

// ClearLongitude clears the value of the "longitude" field.
func (u *LocationUpsert) ClearLongitude() *LocationUpsert {
	u.SetNull(location.FieldLongitude)
	return u
}

// SetCapacity sets the "capacity" field.
func (u *LocationUpsert) SetCapacity(v int) *LocationUpsert {
	u.Set(location.FieldCapacity, v)
	return u
}

// UpdateCapacity sets the "capacity" field to the value that was provided on create.
func (u *LocationUpsert) UpdateCapacity() *LocationUpsert {
	u.SetExcluded(location.FieldCapacity)
	return u
}

// AddCapacity adds v to the "capacity" field.
func (u *LocationUpsert) AddCapacity(v int) *LocationUpsert {
	u.Add(location.FieldCapacity, v)
	return u
}

// ClearCapacity clears the value of the "capacity" field.
func (u *LocationUpsert) ClearCapacity() *LocationUpsert {
	u.SetNull(location.FieldCapacity)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.Location.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *LocationUpsertOne) UpdateNewValues() *LocationUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.CreateTime(); exists {
			s.SetIgnore(location.FieldCreateTime)
		}
		if _, exists := u.create.mutation.UUID(); exists {
			s.SetIgnore(location.FieldUUID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Location.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *LocationUpsertOne) Ignore() *LocationUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *LocationUpsertOne) DoNothing() *LocationUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the LocationCreate.OnConflict
// documentation for more info.
func (u *LocationUpsertOne) Update(set func(*LocationUpsert)) *LocationUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&LocationUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdateTime sets the "update_time" field.
func (u *LocationUpsertOne) SetUpdateTime(v time.Time) *LocationUpsertOne {
	return u.Update(func(s *LocationUpsert) {
		s.SetUpdateTime(v)
	})
}

// UpdateUpdateTime sets the "update_time" field to the value that was provided on create.
func (u *LocationUpsertOne) UpdateUpdateTime() *LocationUpsertOne {
	return u.Update(func(s *LocationUpsert) {
		s.UpdateUpdateTime()
	})
}

// SetName sets the "name" field.
func (u *LocationUpsertOne) SetName(v string) *LocationUpsertOne {
	return u.Update(func(s *LocationUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *LocationUpsertOne) UpdateName() *LocationUpsertOne {
	return u.Update(func(s *LocationUpsert) {
		s.UpdateName()
	})
}

// SetAddress sets the "address" field.
func (u *LocationUpsertOne) SetAddress(v string) *LocationUpsertOne {
	return u.Update(func(s *LocationUpsert) {
		s.SetAddress(v)
	})
}

// UpdateAddress sets the "address" field to the value that was provided on create.
func (u *LocationUpsertOne) UpdateAddress() *LocationUpsertOne {
	return u.Update(func(s *LocationUpsert) {
		s.UpdateAddress()
	})
}

// ClearAddress clears the value of the "address" field.
func (u *LocationUpsertOne) ClearAddress() *LocationUpsertOne {
	return u.Update(func(s *LocationUpsert) {
		s.ClearAddress()
	})
}

// SetCity sets the "city" field.
func (u *LocationUpsertOne) SetCity(v string) *LocationUpsertOne {
	return u.Update(func(s *LocationUpsert) {
		s.SetCity(v)
	})
}

// UpdateCity sets the "city" field to the value that was provided on create.
func (u *LocationUpsertOne) UpdateCity() *LocationUpsertOne {
	return u.Update(func(s *LocationUpsert) {
		s.UpdateCity()
	})
}

// ClearCity clears the value of the "city" field.
func (u *LocationUpsertOne) ClearCity() *LocationUpsertOne {
	return u.Update(func(s *LocationUpsert) {
		s.ClearCity()
	})
}

// SetState sets the "state" field.
func (u *LocationUpsertOne) SetState(v string) *LocationUpsertOne {
	return u.Update(func(s *LocationUpsert) {
		s.SetState(v)
	})
}

// UpdateState sets the "state" field to the value that was provided on create.
func (u *LocationUpsertOne) UpdateState() *LocationUpsertOne {
	return u.Update(func(s *LocationUpsert) {
		s.UpdateState()
	})
}

// ClearState clears the value of the "state" field.
func (u *LocationUpsertOne) ClearState() *LocationUpsertOne {
	return u.Update(func(s *LocationUpsert) {
		s.ClearState()
	})
}

// SetCountry sets the "country" field.
func (u *LocationUpsertOne) SetCountry(v string) *LocationUpsertOne {
	return u.Update(func(s *LocationUpsert) {
		s.SetCountry(v)
	})
}

// UpdateCountry sets the "country" field to the value that was provided on create.
func (u *LocationUpsertOne) UpdateCountry() *LocationUpsertOne {
	return u.Update(func(s *LocationUpsert) {
		s.UpdateCountry()
	})
}

// ClearCountry clears the value of the "country" field.
func (u *LocationUpsertOne) ClearCountry() *LocationUpsertOne {
	return u.Update(func(s *LocationUpsert) {
		s.ClearCountry()
	})
}

// SetPostalCode sets the "postal_code" field.
func (u *LocationUpsertOne) SetPostalCode(v string) *LocationUpsertOne {
	return u.Update(func(s *LocationUpsert) {
		s.SetPostalCode(v)
	})
}

// UpdatePostalCode sets the "postal_code" field to the value that was provided on create.
func (u *LocationUpsertOne) UpdatePostalCode() *LocationUpsertOne {
	return u.Update(func(s *LocationUpsert) {
		s.UpdatePostalCode()
	})
}

// ClearPostalCode clears the value of the "postal_code" field.
func (u *LocationUpsertOne) ClearPostalCode() *LocationUpsertOne {
	return u.Update(func(s *LocationUpsert) {
		s.ClearPostalCode()
	})
}

// SetLatitude sets the "latitude" field.
func (u *LocationUpsertOne) SetLatitude(v float64) *LocationUpsertOne {
	return u.Update(func(s *LocationUpsert) {
		s.SetLatitude(v)
	})
}

// AddLatitude adds v to the "latitude" field.
func (u *LocationUpsertOne) AddLatitude(v float64) *LocationUpsertOne {
	return u.Update(func(s *LocationUpsert) {
		s.AddLatitude(v)
	})
}

// UpdateLatitude sets the "latitude" field to the value that was provided on create.
func (u *LocationUpsertOne) UpdateLatitude() *LocationUpsertOne {
	return u.Update(func(s *LocationUpsert) {
		s.UpdateLatitude()
	})
}

// ClearLatitude clears the value of the "latitude" field.
func (u *LocationUpsertOne) ClearLatitude() *LocationUpsertOne {
	return u.Update(func(s *LocationUpsert) {
		s.ClearLatitude()
	})
}

// SetLongitude sets the "longitude" field.
func (u *LocationUpsertOne) SetLongitude(v float64) *LocationUpsertOne {
	return u.Update(func(s *LocationUpsert) {
		s.SetLongitude(v)
	})
}

// AddLongitude adds v to the "longitude" field.
func (u *LocationUpsertOne) AddLongitude(v float64) *LocationUpsertOne {
	return u.Update(func(s *LocationUpsert) {
		s.AddLongitude(v)
	})
}

// UpdateLongitude sets the "longitude" field to the value that was provided on create.
func (u *LocationUpsertOne) UpdateLongitude() *LocationUpsertOne {
	return u.Update(func(s *LocationUpsert) {
		s.UpdateLongitude()
	})
}

// ClearLongitude clears the value of the "longitude" field.
func (u *LocationUpsertOne) ClearLongitude() *LocationUpsertOne {
	return u.Update(func(s *LocationUpsert) {
		s.ClearLongitude()
	})
}

// SetCapacity sets the "capacity" field.
func (u *LocationUpsertOne) SetCapacity(v int) *LocationUpsertOne {
	return u.Update(func(s *LocationUpsert) {
		s.SetCapacity(v)
	})
}

// AddCapacity adds v to the "capacity" field.
func (u *LocationUpsertOne) AddCapacity(v int) *LocationUpsertOne {
	return u.Update(func(s *LocationUpsert) {
		s.AddCapacity(v)
	})
}

// UpdateCapacity sets the "capacity" field to the value that was provided on create.
func (u *LocationUpsertOne) UpdateCapacity() *LocationUpsertOne {
	return u.Update(func(s *LocationUpsert) {
		s.UpdateCapacity()
	})
}

// ClearCapacity clears the value of the "capacity" field.
func (u *LocationUpsertOne) ClearCapacity() *LocationUpsertOne {
	return u.Update(func(s *LocationUpsert) {
		s.ClearCapacity()
	})
}

// Exec executes the query.
func (u *LocationUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for LocationCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *LocationUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *LocationUpsertOne) ID(ctx context.Context) (id int, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *LocationUpsertOne) IDX(ctx context.Context) int {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// LocationCreateBulk is the builder for creating many Location entities in bulk.
type LocationCreateBulk struct {
	config
	err      error
	builders []*LocationCreate
	conflict []sql.ConflictOption
}

// Save creates the Location entities in the database.
func (lcb *LocationCreateBulk) Save(ctx context.Context) ([]*Location, error) {
	if lcb.err != nil {
		return nil, lcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(lcb.builders))
	nodes := make([]*Location, len(lcb.builders))
	mutators := make([]Mutator, len(lcb.builders))
	for i := range lcb.builders {
		func(i int, root context.Context) {
			builder := lcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*LocationMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, lcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = lcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, lcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, lcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (lcb *LocationCreateBulk) SaveX(ctx context.Context) []*Location {
	v, err := lcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (lcb *LocationCreateBulk) Exec(ctx context.Context) error {
	_, err := lcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (lcb *LocationCreateBulk) ExecX(ctx context.Context) {
	if err := lcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Location.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.LocationUpsert) {
//			SetCreateTime(v+v).
//		}).
//		Exec(ctx)
func (lcb *LocationCreateBulk) OnConflict(opts ...sql.ConflictOption) *LocationUpsertBulk {
	lcb.conflict = opts
	return &LocationUpsertBulk{
		create: lcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Location.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (lcb *LocationCreateBulk) OnConflictColumns(columns ...string) *LocationUpsertBulk {
	lcb.conflict = append(lcb.conflict, sql.ConflictColumns(columns...))
	return &LocationUpsertBulk{
		create: lcb,
	}
}

// LocationUpsertBulk is the builder for "upsert"-ing
// a bulk of Location nodes.
type LocationUpsertBulk struct {
	create *LocationCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Location.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *LocationUpsertBulk) UpdateNewValues() *LocationUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.CreateTime(); exists {
				s.SetIgnore(location.FieldCreateTime)
			}
			if _, exists := b.mutation.UUID(); exists {
				s.SetIgnore(location.FieldUUID)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Location.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *LocationUpsertBulk) Ignore() *LocationUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *LocationUpsertBulk) DoNothing() *LocationUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the LocationCreateBulk.OnConflict
// documentation for more info.
func (u *LocationUpsertBulk) Update(set func(*LocationUpsert)) *LocationUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&LocationUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdateTime sets the "update_time" field.
func (u *LocationUpsertBulk) SetUpdateTime(v time.Time) *LocationUpsertBulk {
	return u.Update(func(s *LocationUpsert) {
		s.SetUpdateTime(v)
	})
}

// UpdateUpdateTime sets the "update_time" field to the value that was provided on create.
func (u *LocationUpsertBulk) UpdateUpdateTime() *LocationUpsertBulk {
	return u.Update(func(s *LocationUpsert) {
		s.UpdateUpdateTime()
	})
}

// SetName sets the "name" field.
func (u *LocationUpsertBulk) SetName(v string) *LocationUpsertBulk {
	return u.Update(func(s *LocationUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *LocationUpsertBulk) UpdateName() *LocationUpsertBulk {
	return u.Update(func(s *LocationUpsert) {
		s.UpdateName()
	})
}

// SetAddress sets the "address" field.
func (u *LocationUpsertBulk) SetAddress(v string) *LocationUpsertBulk {
	return u.Update(func(s *LocationUpsert) {
		s.SetAddress(v)
	})
}

// UpdateAddress sets the "address" field to the value that was provided on create.
func (u *LocationUpsertBulk) UpdateAddress() *LocationUpsertBulk {
	return u.Update(func(s *LocationUpsert) {
		s.UpdateAddress()
	})
}

// ClearAddress clears the value of the "address" field.
func (u *LocationUpsertBulk) ClearAddress() *LocationUpsertBulk {
	return u.Update(func(s *LocationUpsert) {
		s.ClearAddress()
	})
}

// SetCity sets the "city" field.
func (u *LocationUpsertBulk) SetCity(v string) *LocationUpsertBulk {
	return u.Update(func(s *LocationUpsert) {
		s.SetCity(v)
	})
}

// UpdateCity sets the "city" field to the value that was provided on create.
func (u *LocationUpsertBulk) UpdateCity() *LocationUpsertBulk {
	return u.Update(func(s *LocationUpsert) {
		s.UpdateCity()
	})
}

// ClearCity clears the value of the "city" field.
func (u *LocationUpsertBulk) ClearCity() *LocationUpsertBulk {
	return u.Update(func(s *LocationUpsert) {
		s.ClearCity()
	})
}

// SetState sets the "state" field.
func (u *LocationUpsertBulk) SetState(v string) *LocationUpsertBulk {
	return u.Update(func(s *LocationUpsert) {
		s.SetState(v)
	})
}

// UpdateState sets the "state" field to the value that was provided on create.
func (u *LocationUpsertBulk) UpdateState() *LocationUpsertBulk {
	return u.Update(func(s *LocationUpsert) {
		s.UpdateState()
	})
}

// ClearState clears the value of the "state" field.
func (u *LocationUpsertBulk) ClearState() *LocationUpsertBulk {
	return u.Update(func(s *LocationUpsert) {
		s.ClearState()
	})
}

// SetCountry sets the "country" field.
func (u *LocationUpsertBulk) SetCountry(v string) *LocationUpsertBulk {
	return u.Update(func(s *LocationUpsert) {
		s.SetCountry(v)
	})
}

// UpdateCountry sets the "country" field to the value that was provided on create.
func (u *LocationUpsertBulk) UpdateCountry() *LocationUpsertBulk {
	return u.Update(func(s *LocationUpsert) {
		s.UpdateCountry()
	})
}

// ClearCountry clears the value of the "country" field.
func (u *LocationUpsertBulk) ClearCountry() *LocationUpsertBulk {
	return u.Update(func(s *LocationUpsert) {
		s.ClearCountry()
	})
}

// SetPostalCode sets the "postal_code" field.
func (u *LocationUpsertBulk) SetPostalCode(v string) *LocationUpsertBulk {
	return u.Update(func(s *LocationUpsert) {
		s.SetPostalCode(v)
	})
}

// UpdatePostalCode sets the "postal_code" field to the value that was provided on create.
func (u *LocationUpsertBulk) UpdatePostalCode() *LocationUpsertBulk {
	return u.Update(func(s *LocationUpsert) {
		s.UpdatePostalCode()
	})
}

// ClearPostalCode clears the value of the "postal_code" field.
func (u *LocationUpsertBulk) ClearPostalCode() *LocationUpsertBulk {
	return u.Update(func(s *LocationUpsert) {
		s.ClearPostalCode()
	})
}

// SetLatitude sets the "latitude" field.
func (u *LocationUpsertBulk) SetLatitude(v float64) *LocationUpsertBulk {
	return u.Update(func(s *LocationUpsert) {
		s.SetLatitude(v)
	})
}

// AddLatitude adds v to the "latitude" field.
func (u *LocationUpsertBulk) AddLatitude(v float64) *LocationUpsertBulk {
	return u.Update(func(s *LocationUpsert) {
		s.AddLatitude(v)
	})
}

// UpdateLatitude sets the "latitude" field to the value that was provided on create.
func (u *LocationUpsertBulk) UpdateLatitude() *LocationUpsertBulk {
	return u.Update(func(s *LocationUpsert) {
		s.UpdateLatitude()
	})
}

// ClearLatitude clears the value of the "latitude" field.
func (u *LocationUpsertBulk) ClearLatitude() *LocationUpsertBulk {
	return u.Update(func(s *LocationUpsert) {
		s.ClearLatitude()
	})
}

// SetLongitude sets the "longitude" field.
func (u *LocationUpsertBulk) SetLongitude(v float64) *LocationUpsertBulk {
	return u.Update(func(s *LocationUpsert) {
		s.SetLongitude(v)
	})
}

// AddLongitude adds v to the "longitude" field.
func (u *LocationUpsertBulk) AddLongitude(v float64) *LocationUpsertBulk {
	return u.Update(func(s *LocationUpsert) {
		s.AddLongitude(v)
	})
}

// UpdateLongitude sets the "longitude" field to the value that was provided on create.
func (u *LocationUpsertBulk) UpdateLongitude() *LocationUpsertBulk {
	return u.Update(func(s *LocationUpsert) {
		s.UpdateLongitude()
	})
}

// ClearLongitude clears the value of the "longitude" field.
func (u *LocationUpsertBulk) ClearLongitude() *LocationUpsertBulk {
	return u.Update(func(s *LocationUpsert) {
		s.ClearLongitude()
	})
}

// SetCapacity sets the "capacity" field.
func (u *LocationUpsertBulk) SetCapacity(v int) *LocationUpsertBulk {
	return u.Update(func(s *LocationUpsert) {
		s.SetCapacity(v)
	})
}

// AddCapacity adds v to the "capacity" field.
func (u *LocationUpsertBulk) AddCapacity(v int) *LocationUpsertBulk {
	return u.Update(func(s *LocationUpsert) {
		s.AddCapacity(v)
	})
}

// UpdateCapacity sets the "capacity" field to the value that was provided on create.
func (u *LocationUpsertBulk) UpdateCapacity() *LocationUpsertBulk {
	return u.Update(func(s *LocationUpsert) {
		s.UpdateCapacity()
	})
}

// ClearCapacity clears the value of the "capacity" field.
func (u *LocationUpsertBulk) ClearCapacity() *LocationUpsertBulk {
	return u.Update(func(s *LocationUpsert) {
		s.ClearCapacity()
	})
}

// Exec executes the query.
func (u *LocationUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the LocationCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for LocationCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *LocationUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
