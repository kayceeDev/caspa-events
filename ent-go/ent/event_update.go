// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/kayceeDev/caspa-events/ent-go/ent/event"
	"github.com/kayceeDev/caspa-events/ent-go/ent/location"
	"github.com/kayceeDev/caspa-events/ent-go/ent/predicate"
	"github.com/kayceeDev/caspa-events/ent-go/ent/ticket"
	"github.com/kayceeDev/caspa-events/ent-go/ent/user"
)

// EventUpdate is the builder for updating Event entities.
type EventUpdate struct {
	config
	hooks    []Hook
	mutation *EventMutation
}

// Where appends a list predicates to the EventUpdate builder.
func (eu *EventUpdate) Where(ps ...predicate.Event) *EventUpdate {
	eu.mutation.Where(ps...)
	return eu
}

// SetUpdateTime sets the "update_time" field.
func (eu *EventUpdate) SetUpdateTime(t time.Time) *EventUpdate {
	eu.mutation.SetUpdateTime(t)
	return eu
}

// SetTitle sets the "title" field.
func (eu *EventUpdate) SetTitle(s string) *EventUpdate {
	eu.mutation.SetTitle(s)
	return eu
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (eu *EventUpdate) SetNillableTitle(s *string) *EventUpdate {
	if s != nil {
		eu.SetTitle(*s)
	}
	return eu
}

// SetDescription sets the "description" field.
func (eu *EventUpdate) SetDescription(s string) *EventUpdate {
	eu.mutation.SetDescription(s)
	return eu
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (eu *EventUpdate) SetNillableDescription(s *string) *EventUpdate {
	if s != nil {
		eu.SetDescription(*s)
	}
	return eu
}

// SetStartDate sets the "start_date" field.
func (eu *EventUpdate) SetStartDate(t time.Time) *EventUpdate {
	eu.mutation.SetStartDate(t)
	return eu
}

// SetNillableStartDate sets the "start_date" field if the given value is not nil.
func (eu *EventUpdate) SetNillableStartDate(t *time.Time) *EventUpdate {
	if t != nil {
		eu.SetStartDate(*t)
	}
	return eu
}

// SetEndDate sets the "end_date" field.
func (eu *EventUpdate) SetEndDate(t time.Time) *EventUpdate {
	eu.mutation.SetEndDate(t)
	return eu
}

// SetNillableEndDate sets the "end_date" field if the given value is not nil.
func (eu *EventUpdate) SetNillableEndDate(t *time.Time) *EventUpdate {
	if t != nil {
		eu.SetEndDate(*t)
	}
	return eu
}

// SetEventType sets the "event_type" field.
func (eu *EventUpdate) SetEventType(s string) *EventUpdate {
	eu.mutation.SetEventType(s)
	return eu
}

// SetNillableEventType sets the "event_type" field if the given value is not nil.
func (eu *EventUpdate) SetNillableEventType(s *string) *EventUpdate {
	if s != nil {
		eu.SetEventType(*s)
	}
	return eu
}

// SetStatus sets the "status" field.
func (eu *EventUpdate) SetStatus(e event.Status) *EventUpdate {
	eu.mutation.SetStatus(e)
	return eu
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (eu *EventUpdate) SetNillableStatus(e *event.Status) *EventUpdate {
	if e != nil {
		eu.SetStatus(*e)
	}
	return eu
}

// SetIsPublic sets the "is_public" field.
func (eu *EventUpdate) SetIsPublic(b bool) *EventUpdate {
	eu.mutation.SetIsPublic(b)
	return eu
}

// SetNillableIsPublic sets the "is_public" field if the given value is not nil.
func (eu *EventUpdate) SetNillableIsPublic(b *bool) *EventUpdate {
	if b != nil {
		eu.SetIsPublic(*b)
	}
	return eu
}

// SetIsPaid sets the "is_paid" field.
func (eu *EventUpdate) SetIsPaid(b bool) *EventUpdate {
	eu.mutation.SetIsPaid(b)
	return eu
}

// SetNillableIsPaid sets the "is_paid" field if the given value is not nil.
func (eu *EventUpdate) SetNillableIsPaid(b *bool) *EventUpdate {
	if b != nil {
		eu.SetIsPaid(*b)
	}
	return eu
}

// SetMaxParticipants sets the "max_participants" field.
func (eu *EventUpdate) SetMaxParticipants(i int) *EventUpdate {
	eu.mutation.ResetMaxParticipants()
	eu.mutation.SetMaxParticipants(i)
	return eu
}

// SetNillableMaxParticipants sets the "max_participants" field if the given value is not nil.
func (eu *EventUpdate) SetNillableMaxParticipants(i *int) *EventUpdate {
	if i != nil {
		eu.SetMaxParticipants(*i)
	}
	return eu
}

// AddMaxParticipants adds i to the "max_participants" field.
func (eu *EventUpdate) AddMaxParticipants(i int) *EventUpdate {
	eu.mutation.AddMaxParticipants(i)
	return eu
}

// SetRegistrationDeadline sets the "registration_deadline" field.
func (eu *EventUpdate) SetRegistrationDeadline(t time.Time) *EventUpdate {
	eu.mutation.SetRegistrationDeadline(t)
	return eu
}

// SetNillableRegistrationDeadline sets the "registration_deadline" field if the given value is not nil.
func (eu *EventUpdate) SetNillableRegistrationDeadline(t *time.Time) *EventUpdate {
	if t != nil {
		eu.SetRegistrationDeadline(*t)
	}
	return eu
}

// ClearRegistrationDeadline clears the value of the "registration_deadline" field.
func (eu *EventUpdate) ClearRegistrationDeadline() *EventUpdate {
	eu.mutation.ClearRegistrationDeadline()
	return eu
}

// SetCoverPhotoID sets the "cover_photo_id" field.
func (eu *EventUpdate) SetCoverPhotoID(s string) *EventUpdate {
	eu.mutation.SetCoverPhotoID(s)
	return eu
}

// SetNillableCoverPhotoID sets the "cover_photo_id" field if the given value is not nil.
func (eu *EventUpdate) SetNillableCoverPhotoID(s *string) *EventUpdate {
	if s != nil {
		eu.SetCoverPhotoID(*s)
	}
	return eu
}

// ClearCoverPhotoID clears the value of the "cover_photo_id" field.
func (eu *EventUpdate) ClearCoverPhotoID() *EventUpdate {
	eu.mutation.ClearCoverPhotoID()
	return eu
}

// SetOrganizerID sets the "organizer_id" field.
func (eu *EventUpdate) SetOrganizerID(i int) *EventUpdate {
	eu.mutation.SetOrganizerID(i)
	return eu
}

// SetNillableOrganizerID sets the "organizer_id" field if the given value is not nil.
func (eu *EventUpdate) SetNillableOrganizerID(i *int) *EventUpdate {
	if i != nil {
		eu.SetOrganizerID(*i)
	}
	return eu
}

// SetLocationID sets the "location_id" field.
func (eu *EventUpdate) SetLocationID(i int) *EventUpdate {
	eu.mutation.SetLocationID(i)
	return eu
}

// SetNillableLocationID sets the "location_id" field if the given value is not nil.
func (eu *EventUpdate) SetNillableLocationID(i *int) *EventUpdate {
	if i != nil {
		eu.SetLocationID(*i)
	}
	return eu
}

// ClearLocationID clears the value of the "location_id" field.
func (eu *EventUpdate) ClearLocationID() *EventUpdate {
	eu.mutation.ClearLocationID()
	return eu
}

// SetUserID sets the "user" edge to the User entity by ID.
func (eu *EventUpdate) SetUserID(id int) *EventUpdate {
	eu.mutation.SetUserID(id)
	return eu
}

// SetUser sets the "user" edge to the User entity.
func (eu *EventUpdate) SetUser(u *User) *EventUpdate {
	return eu.SetUserID(u.ID)
}

// SetLocation sets the "location" edge to the Location entity.
func (eu *EventUpdate) SetLocation(l *Location) *EventUpdate {
	return eu.SetLocationID(l.ID)
}

// AddGuestIDs adds the "guest" edge to the User entity by IDs.
func (eu *EventUpdate) AddGuestIDs(ids ...int) *EventUpdate {
	eu.mutation.AddGuestIDs(ids...)
	return eu
}

// AddGuest adds the "guest" edges to the User entity.
func (eu *EventUpdate) AddGuest(u ...*User) *EventUpdate {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return eu.AddGuestIDs(ids...)
}

// AddTicketIDs adds the "ticket" edge to the Ticket entity by IDs.
func (eu *EventUpdate) AddTicketIDs(ids ...int) *EventUpdate {
	eu.mutation.AddTicketIDs(ids...)
	return eu
}

// AddTicket adds the "ticket" edges to the Ticket entity.
func (eu *EventUpdate) AddTicket(t ...*Ticket) *EventUpdate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return eu.AddTicketIDs(ids...)
}

// Mutation returns the EventMutation object of the builder.
func (eu *EventUpdate) Mutation() *EventMutation {
	return eu.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (eu *EventUpdate) ClearUser() *EventUpdate {
	eu.mutation.ClearUser()
	return eu
}

// ClearLocation clears the "location" edge to the Location entity.
func (eu *EventUpdate) ClearLocation() *EventUpdate {
	eu.mutation.ClearLocation()
	return eu
}

// ClearGuest clears all "guest" edges to the User entity.
func (eu *EventUpdate) ClearGuest() *EventUpdate {
	eu.mutation.ClearGuest()
	return eu
}

// RemoveGuestIDs removes the "guest" edge to User entities by IDs.
func (eu *EventUpdate) RemoveGuestIDs(ids ...int) *EventUpdate {
	eu.mutation.RemoveGuestIDs(ids...)
	return eu
}

// RemoveGuest removes "guest" edges to User entities.
func (eu *EventUpdate) RemoveGuest(u ...*User) *EventUpdate {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return eu.RemoveGuestIDs(ids...)
}

// ClearTicket clears all "ticket" edges to the Ticket entity.
func (eu *EventUpdate) ClearTicket() *EventUpdate {
	eu.mutation.ClearTicket()
	return eu
}

// RemoveTicketIDs removes the "ticket" edge to Ticket entities by IDs.
func (eu *EventUpdate) RemoveTicketIDs(ids ...int) *EventUpdate {
	eu.mutation.RemoveTicketIDs(ids...)
	return eu
}

// RemoveTicket removes "ticket" edges to Ticket entities.
func (eu *EventUpdate) RemoveTicket(t ...*Ticket) *EventUpdate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return eu.RemoveTicketIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (eu *EventUpdate) Save(ctx context.Context) (int, error) {
	eu.defaults()
	return withHooks(ctx, eu.sqlSave, eu.mutation, eu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (eu *EventUpdate) SaveX(ctx context.Context) int {
	affected, err := eu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (eu *EventUpdate) Exec(ctx context.Context) error {
	_, err := eu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (eu *EventUpdate) ExecX(ctx context.Context) {
	if err := eu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (eu *EventUpdate) defaults() {
	if _, ok := eu.mutation.UpdateTime(); !ok {
		v := event.UpdateDefaultUpdateTime()
		eu.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (eu *EventUpdate) check() error {
	if v, ok := eu.mutation.Title(); ok {
		if err := event.TitleValidator(v); err != nil {
			return &ValidationError{Name: "title", err: fmt.Errorf(`ent: validator failed for field "Event.title": %w`, err)}
		}
	}
	if v, ok := eu.mutation.Description(); ok {
		if err := event.DescriptionValidator(v); err != nil {
			return &ValidationError{Name: "description", err: fmt.Errorf(`ent: validator failed for field "Event.description": %w`, err)}
		}
	}
	if v, ok := eu.mutation.EventType(); ok {
		if err := event.EventTypeValidator(v); err != nil {
			return &ValidationError{Name: "event_type", err: fmt.Errorf(`ent: validator failed for field "Event.event_type": %w`, err)}
		}
	}
	if v, ok := eu.mutation.Status(); ok {
		if err := event.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "Event.status": %w`, err)}
		}
	}
	if eu.mutation.UserCleared() && len(eu.mutation.UserIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Event.user"`)
	}
	return nil
}

func (eu *EventUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := eu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(event.Table, event.Columns, sqlgraph.NewFieldSpec(event.FieldID, field.TypeInt))
	if ps := eu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := eu.mutation.UpdateTime(); ok {
		_spec.SetField(event.FieldUpdateTime, field.TypeTime, value)
	}
	if value, ok := eu.mutation.Title(); ok {
		_spec.SetField(event.FieldTitle, field.TypeString, value)
	}
	if value, ok := eu.mutation.Description(); ok {
		_spec.SetField(event.FieldDescription, field.TypeString, value)
	}
	if value, ok := eu.mutation.StartDate(); ok {
		_spec.SetField(event.FieldStartDate, field.TypeTime, value)
	}
	if value, ok := eu.mutation.EndDate(); ok {
		_spec.SetField(event.FieldEndDate, field.TypeTime, value)
	}
	if value, ok := eu.mutation.EventType(); ok {
		_spec.SetField(event.FieldEventType, field.TypeString, value)
	}
	if value, ok := eu.mutation.Status(); ok {
		_spec.SetField(event.FieldStatus, field.TypeEnum, value)
	}
	if value, ok := eu.mutation.IsPublic(); ok {
		_spec.SetField(event.FieldIsPublic, field.TypeBool, value)
	}
	if value, ok := eu.mutation.IsPaid(); ok {
		_spec.SetField(event.FieldIsPaid, field.TypeBool, value)
	}
	if value, ok := eu.mutation.MaxParticipants(); ok {
		_spec.SetField(event.FieldMaxParticipants, field.TypeInt, value)
	}
	if value, ok := eu.mutation.AddedMaxParticipants(); ok {
		_spec.AddField(event.FieldMaxParticipants, field.TypeInt, value)
	}
	if value, ok := eu.mutation.RegistrationDeadline(); ok {
		_spec.SetField(event.FieldRegistrationDeadline, field.TypeTime, value)
	}
	if eu.mutation.RegistrationDeadlineCleared() {
		_spec.ClearField(event.FieldRegistrationDeadline, field.TypeTime)
	}
	if value, ok := eu.mutation.CoverPhotoID(); ok {
		_spec.SetField(event.FieldCoverPhotoID, field.TypeString, value)
	}
	if eu.mutation.CoverPhotoIDCleared() {
		_spec.ClearField(event.FieldCoverPhotoID, field.TypeString)
	}
	if eu.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   event.UserTable,
			Columns: []string{event.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   event.UserTable,
			Columns: []string{event.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if eu.mutation.LocationCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   event.LocationTable,
			Columns: []string{event.LocationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(location.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.LocationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   event.LocationTable,
			Columns: []string{event.LocationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(location.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if eu.mutation.GuestCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   event.GuestTable,
			Columns: []string{event.GuestColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.RemovedGuestIDs(); len(nodes) > 0 && !eu.mutation.GuestCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   event.GuestTable,
			Columns: []string{event.GuestColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.GuestIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   event.GuestTable,
			Columns: []string{event.GuestColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if eu.mutation.TicketCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   event.TicketTable,
			Columns: []string{event.TicketColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(ticket.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.RemovedTicketIDs(); len(nodes) > 0 && !eu.mutation.TicketCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   event.TicketTable,
			Columns: []string{event.TicketColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(ticket.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.TicketIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   event.TicketTable,
			Columns: []string{event.TicketColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(ticket.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, eu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{event.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	eu.mutation.done = true
	return n, nil
}

// EventUpdateOne is the builder for updating a single Event entity.
type EventUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *EventMutation
}

// SetUpdateTime sets the "update_time" field.
func (euo *EventUpdateOne) SetUpdateTime(t time.Time) *EventUpdateOne {
	euo.mutation.SetUpdateTime(t)
	return euo
}

// SetTitle sets the "title" field.
func (euo *EventUpdateOne) SetTitle(s string) *EventUpdateOne {
	euo.mutation.SetTitle(s)
	return euo
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (euo *EventUpdateOne) SetNillableTitle(s *string) *EventUpdateOne {
	if s != nil {
		euo.SetTitle(*s)
	}
	return euo
}

// SetDescription sets the "description" field.
func (euo *EventUpdateOne) SetDescription(s string) *EventUpdateOne {
	euo.mutation.SetDescription(s)
	return euo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (euo *EventUpdateOne) SetNillableDescription(s *string) *EventUpdateOne {
	if s != nil {
		euo.SetDescription(*s)
	}
	return euo
}

// SetStartDate sets the "start_date" field.
func (euo *EventUpdateOne) SetStartDate(t time.Time) *EventUpdateOne {
	euo.mutation.SetStartDate(t)
	return euo
}

// SetNillableStartDate sets the "start_date" field if the given value is not nil.
func (euo *EventUpdateOne) SetNillableStartDate(t *time.Time) *EventUpdateOne {
	if t != nil {
		euo.SetStartDate(*t)
	}
	return euo
}

// SetEndDate sets the "end_date" field.
func (euo *EventUpdateOne) SetEndDate(t time.Time) *EventUpdateOne {
	euo.mutation.SetEndDate(t)
	return euo
}

// SetNillableEndDate sets the "end_date" field if the given value is not nil.
func (euo *EventUpdateOne) SetNillableEndDate(t *time.Time) *EventUpdateOne {
	if t != nil {
		euo.SetEndDate(*t)
	}
	return euo
}

// SetEventType sets the "event_type" field.
func (euo *EventUpdateOne) SetEventType(s string) *EventUpdateOne {
	euo.mutation.SetEventType(s)
	return euo
}

// SetNillableEventType sets the "event_type" field if the given value is not nil.
func (euo *EventUpdateOne) SetNillableEventType(s *string) *EventUpdateOne {
	if s != nil {
		euo.SetEventType(*s)
	}
	return euo
}

// SetStatus sets the "status" field.
func (euo *EventUpdateOne) SetStatus(e event.Status) *EventUpdateOne {
	euo.mutation.SetStatus(e)
	return euo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (euo *EventUpdateOne) SetNillableStatus(e *event.Status) *EventUpdateOne {
	if e != nil {
		euo.SetStatus(*e)
	}
	return euo
}

// SetIsPublic sets the "is_public" field.
func (euo *EventUpdateOne) SetIsPublic(b bool) *EventUpdateOne {
	euo.mutation.SetIsPublic(b)
	return euo
}

// SetNillableIsPublic sets the "is_public" field if the given value is not nil.
func (euo *EventUpdateOne) SetNillableIsPublic(b *bool) *EventUpdateOne {
	if b != nil {
		euo.SetIsPublic(*b)
	}
	return euo
}

// SetIsPaid sets the "is_paid" field.
func (euo *EventUpdateOne) SetIsPaid(b bool) *EventUpdateOne {
	euo.mutation.SetIsPaid(b)
	return euo
}

// SetNillableIsPaid sets the "is_paid" field if the given value is not nil.
func (euo *EventUpdateOne) SetNillableIsPaid(b *bool) *EventUpdateOne {
	if b != nil {
		euo.SetIsPaid(*b)
	}
	return euo
}

// SetMaxParticipants sets the "max_participants" field.
func (euo *EventUpdateOne) SetMaxParticipants(i int) *EventUpdateOne {
	euo.mutation.ResetMaxParticipants()
	euo.mutation.SetMaxParticipants(i)
	return euo
}

// SetNillableMaxParticipants sets the "max_participants" field if the given value is not nil.
func (euo *EventUpdateOne) SetNillableMaxParticipants(i *int) *EventUpdateOne {
	if i != nil {
		euo.SetMaxParticipants(*i)
	}
	return euo
}

// AddMaxParticipants adds i to the "max_participants" field.
func (euo *EventUpdateOne) AddMaxParticipants(i int) *EventUpdateOne {
	euo.mutation.AddMaxParticipants(i)
	return euo
}

// SetRegistrationDeadline sets the "registration_deadline" field.
func (euo *EventUpdateOne) SetRegistrationDeadline(t time.Time) *EventUpdateOne {
	euo.mutation.SetRegistrationDeadline(t)
	return euo
}

// SetNillableRegistrationDeadline sets the "registration_deadline" field if the given value is not nil.
func (euo *EventUpdateOne) SetNillableRegistrationDeadline(t *time.Time) *EventUpdateOne {
	if t != nil {
		euo.SetRegistrationDeadline(*t)
	}
	return euo
}

// ClearRegistrationDeadline clears the value of the "registration_deadline" field.
func (euo *EventUpdateOne) ClearRegistrationDeadline() *EventUpdateOne {
	euo.mutation.ClearRegistrationDeadline()
	return euo
}

// SetCoverPhotoID sets the "cover_photo_id" field.
func (euo *EventUpdateOne) SetCoverPhotoID(s string) *EventUpdateOne {
	euo.mutation.SetCoverPhotoID(s)
	return euo
}

// SetNillableCoverPhotoID sets the "cover_photo_id" field if the given value is not nil.
func (euo *EventUpdateOne) SetNillableCoverPhotoID(s *string) *EventUpdateOne {
	if s != nil {
		euo.SetCoverPhotoID(*s)
	}
	return euo
}

// ClearCoverPhotoID clears the value of the "cover_photo_id" field.
func (euo *EventUpdateOne) ClearCoverPhotoID() *EventUpdateOne {
	euo.mutation.ClearCoverPhotoID()
	return euo
}

// SetOrganizerID sets the "organizer_id" field.
func (euo *EventUpdateOne) SetOrganizerID(i int) *EventUpdateOne {
	euo.mutation.SetOrganizerID(i)
	return euo
}

// SetNillableOrganizerID sets the "organizer_id" field if the given value is not nil.
func (euo *EventUpdateOne) SetNillableOrganizerID(i *int) *EventUpdateOne {
	if i != nil {
		euo.SetOrganizerID(*i)
	}
	return euo
}

// SetLocationID sets the "location_id" field.
func (euo *EventUpdateOne) SetLocationID(i int) *EventUpdateOne {
	euo.mutation.SetLocationID(i)
	return euo
}

// SetNillableLocationID sets the "location_id" field if the given value is not nil.
func (euo *EventUpdateOne) SetNillableLocationID(i *int) *EventUpdateOne {
	if i != nil {
		euo.SetLocationID(*i)
	}
	return euo
}

// ClearLocationID clears the value of the "location_id" field.
func (euo *EventUpdateOne) ClearLocationID() *EventUpdateOne {
	euo.mutation.ClearLocationID()
	return euo
}

// SetUserID sets the "user" edge to the User entity by ID.
func (euo *EventUpdateOne) SetUserID(id int) *EventUpdateOne {
	euo.mutation.SetUserID(id)
	return euo
}

// SetUser sets the "user" edge to the User entity.
func (euo *EventUpdateOne) SetUser(u *User) *EventUpdateOne {
	return euo.SetUserID(u.ID)
}

// SetLocation sets the "location" edge to the Location entity.
func (euo *EventUpdateOne) SetLocation(l *Location) *EventUpdateOne {
	return euo.SetLocationID(l.ID)
}

// AddGuestIDs adds the "guest" edge to the User entity by IDs.
func (euo *EventUpdateOne) AddGuestIDs(ids ...int) *EventUpdateOne {
	euo.mutation.AddGuestIDs(ids...)
	return euo
}

// AddGuest adds the "guest" edges to the User entity.
func (euo *EventUpdateOne) AddGuest(u ...*User) *EventUpdateOne {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return euo.AddGuestIDs(ids...)
}

// AddTicketIDs adds the "ticket" edge to the Ticket entity by IDs.
func (euo *EventUpdateOne) AddTicketIDs(ids ...int) *EventUpdateOne {
	euo.mutation.AddTicketIDs(ids...)
	return euo
}

// AddTicket adds the "ticket" edges to the Ticket entity.
func (euo *EventUpdateOne) AddTicket(t ...*Ticket) *EventUpdateOne {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return euo.AddTicketIDs(ids...)
}

// Mutation returns the EventMutation object of the builder.
func (euo *EventUpdateOne) Mutation() *EventMutation {
	return euo.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (euo *EventUpdateOne) ClearUser() *EventUpdateOne {
	euo.mutation.ClearUser()
	return euo
}

// ClearLocation clears the "location" edge to the Location entity.
func (euo *EventUpdateOne) ClearLocation() *EventUpdateOne {
	euo.mutation.ClearLocation()
	return euo
}

// ClearGuest clears all "guest" edges to the User entity.
func (euo *EventUpdateOne) ClearGuest() *EventUpdateOne {
	euo.mutation.ClearGuest()
	return euo
}

// RemoveGuestIDs removes the "guest" edge to User entities by IDs.
func (euo *EventUpdateOne) RemoveGuestIDs(ids ...int) *EventUpdateOne {
	euo.mutation.RemoveGuestIDs(ids...)
	return euo
}

// RemoveGuest removes "guest" edges to User entities.
func (euo *EventUpdateOne) RemoveGuest(u ...*User) *EventUpdateOne {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return euo.RemoveGuestIDs(ids...)
}

// ClearTicket clears all "ticket" edges to the Ticket entity.
func (euo *EventUpdateOne) ClearTicket() *EventUpdateOne {
	euo.mutation.ClearTicket()
	return euo
}

// RemoveTicketIDs removes the "ticket" edge to Ticket entities by IDs.
func (euo *EventUpdateOne) RemoveTicketIDs(ids ...int) *EventUpdateOne {
	euo.mutation.RemoveTicketIDs(ids...)
	return euo
}

// RemoveTicket removes "ticket" edges to Ticket entities.
func (euo *EventUpdateOne) RemoveTicket(t ...*Ticket) *EventUpdateOne {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return euo.RemoveTicketIDs(ids...)
}

// Where appends a list predicates to the EventUpdate builder.
func (euo *EventUpdateOne) Where(ps ...predicate.Event) *EventUpdateOne {
	euo.mutation.Where(ps...)
	return euo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (euo *EventUpdateOne) Select(field string, fields ...string) *EventUpdateOne {
	euo.fields = append([]string{field}, fields...)
	return euo
}

// Save executes the query and returns the updated Event entity.
func (euo *EventUpdateOne) Save(ctx context.Context) (*Event, error) {
	euo.defaults()
	return withHooks(ctx, euo.sqlSave, euo.mutation, euo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (euo *EventUpdateOne) SaveX(ctx context.Context) *Event {
	node, err := euo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (euo *EventUpdateOne) Exec(ctx context.Context) error {
	_, err := euo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (euo *EventUpdateOne) ExecX(ctx context.Context) {
	if err := euo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (euo *EventUpdateOne) defaults() {
	if _, ok := euo.mutation.UpdateTime(); !ok {
		v := event.UpdateDefaultUpdateTime()
		euo.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (euo *EventUpdateOne) check() error {
	if v, ok := euo.mutation.Title(); ok {
		if err := event.TitleValidator(v); err != nil {
			return &ValidationError{Name: "title", err: fmt.Errorf(`ent: validator failed for field "Event.title": %w`, err)}
		}
	}
	if v, ok := euo.mutation.Description(); ok {
		if err := event.DescriptionValidator(v); err != nil {
			return &ValidationError{Name: "description", err: fmt.Errorf(`ent: validator failed for field "Event.description": %w`, err)}
		}
	}
	if v, ok := euo.mutation.EventType(); ok {
		if err := event.EventTypeValidator(v); err != nil {
			return &ValidationError{Name: "event_type", err: fmt.Errorf(`ent: validator failed for field "Event.event_type": %w`, err)}
		}
	}
	if v, ok := euo.mutation.Status(); ok {
		if err := event.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "Event.status": %w`, err)}
		}
	}
	if euo.mutation.UserCleared() && len(euo.mutation.UserIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Event.user"`)
	}
	return nil
}

func (euo *EventUpdateOne) sqlSave(ctx context.Context) (_node *Event, err error) {
	if err := euo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(event.Table, event.Columns, sqlgraph.NewFieldSpec(event.FieldID, field.TypeInt))
	id, ok := euo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Event.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := euo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, event.FieldID)
		for _, f := range fields {
			if !event.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != event.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := euo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := euo.mutation.UpdateTime(); ok {
		_spec.SetField(event.FieldUpdateTime, field.TypeTime, value)
	}
	if value, ok := euo.mutation.Title(); ok {
		_spec.SetField(event.FieldTitle, field.TypeString, value)
	}
	if value, ok := euo.mutation.Description(); ok {
		_spec.SetField(event.FieldDescription, field.TypeString, value)
	}
	if value, ok := euo.mutation.StartDate(); ok {
		_spec.SetField(event.FieldStartDate, field.TypeTime, value)
	}
	if value, ok := euo.mutation.EndDate(); ok {
		_spec.SetField(event.FieldEndDate, field.TypeTime, value)
	}
	if value, ok := euo.mutation.EventType(); ok {
		_spec.SetField(event.FieldEventType, field.TypeString, value)
	}
	if value, ok := euo.mutation.Status(); ok {
		_spec.SetField(event.FieldStatus, field.TypeEnum, value)
	}
	if value, ok := euo.mutation.IsPublic(); ok {
		_spec.SetField(event.FieldIsPublic, field.TypeBool, value)
	}
	if value, ok := euo.mutation.IsPaid(); ok {
		_spec.SetField(event.FieldIsPaid, field.TypeBool, value)
	}
	if value, ok := euo.mutation.MaxParticipants(); ok {
		_spec.SetField(event.FieldMaxParticipants, field.TypeInt, value)
	}
	if value, ok := euo.mutation.AddedMaxParticipants(); ok {
		_spec.AddField(event.FieldMaxParticipants, field.TypeInt, value)
	}
	if value, ok := euo.mutation.RegistrationDeadline(); ok {
		_spec.SetField(event.FieldRegistrationDeadline, field.TypeTime, value)
	}
	if euo.mutation.RegistrationDeadlineCleared() {
		_spec.ClearField(event.FieldRegistrationDeadline, field.TypeTime)
	}
	if value, ok := euo.mutation.CoverPhotoID(); ok {
		_spec.SetField(event.FieldCoverPhotoID, field.TypeString, value)
	}
	if euo.mutation.CoverPhotoIDCleared() {
		_spec.ClearField(event.FieldCoverPhotoID, field.TypeString)
	}
	if euo.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   event.UserTable,
			Columns: []string{event.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   event.UserTable,
			Columns: []string{event.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if euo.mutation.LocationCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   event.LocationTable,
			Columns: []string{event.LocationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(location.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.LocationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   event.LocationTable,
			Columns: []string{event.LocationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(location.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if euo.mutation.GuestCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   event.GuestTable,
			Columns: []string{event.GuestColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.RemovedGuestIDs(); len(nodes) > 0 && !euo.mutation.GuestCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   event.GuestTable,
			Columns: []string{event.GuestColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.GuestIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   event.GuestTable,
			Columns: []string{event.GuestColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if euo.mutation.TicketCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   event.TicketTable,
			Columns: []string{event.TicketColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(ticket.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.RemovedTicketIDs(); len(nodes) > 0 && !euo.mutation.TicketCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   event.TicketTable,
			Columns: []string{event.TicketColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(ticket.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.TicketIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   event.TicketTable,
			Columns: []string{event.TicketColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(ticket.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Event{config: euo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, euo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{event.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	euo.mutation.done = true
	return _node, nil
}
