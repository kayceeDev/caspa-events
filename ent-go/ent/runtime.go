// Code generated by ent, DO NOT EDIT.

package ent

import (
	"time"

	"github.com/google/uuid"
	"github.com/kayceeDev/caspa-events/ent-go/ent/event"
	"github.com/kayceeDev/caspa-events/ent-go/ent/location"
	"github.com/kayceeDev/caspa-events/ent-go/ent/ticket"
	"github.com/kayceeDev/caspa-events/ent-go/ent/user"
	"github.com/kayceeDev/caspa-events/ent-go/schema"
)

// The init function reads all schema descriptors with runtime code
// (default values, validators, hooks and policies) and stitches it
// to their package variables.
func init() {
	eventMixin := schema.Event{}.Mixin()
	eventMixinFields0 := eventMixin[0].Fields()
	_ = eventMixinFields0
	eventFields := schema.Event{}.Fields()
	_ = eventFields
	// eventDescCreateTime is the schema descriptor for create_time field.
	eventDescCreateTime := eventMixinFields0[0].Descriptor()
	// event.DefaultCreateTime holds the default value on creation for the create_time field.
	event.DefaultCreateTime = eventDescCreateTime.Default.(func() time.Time)
	// eventDescUpdateTime is the schema descriptor for update_time field.
	eventDescUpdateTime := eventMixinFields0[1].Descriptor()
	// event.DefaultUpdateTime holds the default value on creation for the update_time field.
	event.DefaultUpdateTime = eventDescUpdateTime.Default.(func() time.Time)
	// event.UpdateDefaultUpdateTime holds the default value on update for the update_time field.
	event.UpdateDefaultUpdateTime = eventDescUpdateTime.UpdateDefault.(func() time.Time)
	// eventDescUUID is the schema descriptor for uuid field.
	eventDescUUID := eventFields[0].Descriptor()
	// event.DefaultUUID holds the default value on creation for the uuid field.
	event.DefaultUUID = eventDescUUID.Default.(func() uuid.UUID)
	// eventDescTitle is the schema descriptor for title field.
	eventDescTitle := eventFields[1].Descriptor()
	// event.TitleValidator is a validator for the "title" field. It is called by the builders before save.
	event.TitleValidator = eventDescTitle.Validators[0].(func(string) error)
	// eventDescDescription is the schema descriptor for description field.
	eventDescDescription := eventFields[2].Descriptor()
	// event.DescriptionValidator is a validator for the "description" field. It is called by the builders before save.
	event.DescriptionValidator = eventDescDescription.Validators[0].(func(string) error)
	// eventDescEventType is the schema descriptor for event_type field.
	eventDescEventType := eventFields[5].Descriptor()
	// event.EventTypeValidator is a validator for the "event_type" field. It is called by the builders before save.
	event.EventTypeValidator = func() func(string) error {
		validators := eventDescEventType.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(event_type string) error {
			for _, fn := range fns {
				if err := fn(event_type); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// eventDescIsPublic is the schema descriptor for is_public field.
	eventDescIsPublic := eventFields[7].Descriptor()
	// event.DefaultIsPublic holds the default value on creation for the is_public field.
	event.DefaultIsPublic = eventDescIsPublic.Default.(bool)
	// eventDescIsPaid is the schema descriptor for is_paid field.
	eventDescIsPaid := eventFields[8].Descriptor()
	// event.DefaultIsPaid holds the default value on creation for the is_paid field.
	event.DefaultIsPaid = eventDescIsPaid.Default.(bool)
	// eventDescMaxParticipants is the schema descriptor for max_participants field.
	eventDescMaxParticipants := eventFields[9].Descriptor()
	// event.DefaultMaxParticipants holds the default value on creation for the max_participants field.
	event.DefaultMaxParticipants = eventDescMaxParticipants.Default.(int)
	locationMixin := schema.Location{}.Mixin()
	locationMixinFields0 := locationMixin[0].Fields()
	_ = locationMixinFields0
	locationFields := schema.Location{}.Fields()
	_ = locationFields
	// locationDescCreateTime is the schema descriptor for create_time field.
	locationDescCreateTime := locationMixinFields0[0].Descriptor()
	// location.DefaultCreateTime holds the default value on creation for the create_time field.
	location.DefaultCreateTime = locationDescCreateTime.Default.(func() time.Time)
	// locationDescUpdateTime is the schema descriptor for update_time field.
	locationDescUpdateTime := locationMixinFields0[1].Descriptor()
	// location.DefaultUpdateTime holds the default value on creation for the update_time field.
	location.DefaultUpdateTime = locationDescUpdateTime.Default.(func() time.Time)
	// location.UpdateDefaultUpdateTime holds the default value on update for the update_time field.
	location.UpdateDefaultUpdateTime = locationDescUpdateTime.UpdateDefault.(func() time.Time)
	// locationDescUUID is the schema descriptor for uuid field.
	locationDescUUID := locationFields[0].Descriptor()
	// location.DefaultUUID holds the default value on creation for the uuid field.
	location.DefaultUUID = locationDescUUID.Default.(func() uuid.UUID)
	// locationDescName is the schema descriptor for name field.
	locationDescName := locationFields[1].Descriptor()
	// location.NameValidator is a validator for the "name" field. It is called by the builders before save.
	location.NameValidator = func() func(string) error {
		validators := locationDescName.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(name string) error {
			for _, fn := range fns {
				if err := fn(name); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// locationDescCity is the schema descriptor for city field.
	locationDescCity := locationFields[3].Descriptor()
	// location.CityValidator is a validator for the "city" field. It is called by the builders before save.
	location.CityValidator = locationDescCity.Validators[0].(func(string) error)
	// locationDescState is the schema descriptor for state field.
	locationDescState := locationFields[4].Descriptor()
	// location.StateValidator is a validator for the "state" field. It is called by the builders before save.
	location.StateValidator = locationDescState.Validators[0].(func(string) error)
	// locationDescCountry is the schema descriptor for country field.
	locationDescCountry := locationFields[5].Descriptor()
	// location.CountryValidator is a validator for the "country" field. It is called by the builders before save.
	location.CountryValidator = locationDescCountry.Validators[0].(func(string) error)
	// locationDescPostalCode is the schema descriptor for postal_code field.
	locationDescPostalCode := locationFields[6].Descriptor()
	// location.PostalCodeValidator is a validator for the "postal_code" field. It is called by the builders before save.
	location.PostalCodeValidator = locationDescPostalCode.Validators[0].(func(string) error)
	ticketMixin := schema.Ticket{}.Mixin()
	ticketMixinFields0 := ticketMixin[0].Fields()
	_ = ticketMixinFields0
	ticketFields := schema.Ticket{}.Fields()
	_ = ticketFields
	// ticketDescCreateTime is the schema descriptor for create_time field.
	ticketDescCreateTime := ticketMixinFields0[0].Descriptor()
	// ticket.DefaultCreateTime holds the default value on creation for the create_time field.
	ticket.DefaultCreateTime = ticketDescCreateTime.Default.(func() time.Time)
	// ticketDescUpdateTime is the schema descriptor for update_time field.
	ticketDescUpdateTime := ticketMixinFields0[1].Descriptor()
	// ticket.DefaultUpdateTime holds the default value on creation for the update_time field.
	ticket.DefaultUpdateTime = ticketDescUpdateTime.Default.(func() time.Time)
	// ticket.UpdateDefaultUpdateTime holds the default value on update for the update_time field.
	ticket.UpdateDefaultUpdateTime = ticketDescUpdateTime.UpdateDefault.(func() time.Time)
	// ticketDescUUID is the schema descriptor for uuid field.
	ticketDescUUID := ticketFields[0].Descriptor()
	// ticket.DefaultUUID holds the default value on creation for the uuid field.
	ticket.DefaultUUID = ticketDescUUID.Default.(func() uuid.UUID)
	// ticketDescName is the schema descriptor for name field.
	ticketDescName := ticketFields[1].Descriptor()
	// ticket.NameValidator is a validator for the "name" field. It is called by the builders before save.
	ticket.NameValidator = ticketDescName.Validators[0].(func(string) error)
	// ticketDescDescription is the schema descriptor for description field.
	ticketDescDescription := ticketFields[2].Descriptor()
	// ticket.DescriptionValidator is a validator for the "description" field. It is called by the builders before save.
	ticket.DescriptionValidator = ticketDescDescription.Validators[0].(func(string) error)
	// ticketDescPrice is the schema descriptor for price field.
	ticketDescPrice := ticketFields[3].Descriptor()
	// ticket.PriceValidator is a validator for the "price" field. It is called by the builders before save.
	ticket.PriceValidator = ticketDescPrice.Validators[0].(func(float64) error)
	// ticketDescQuantity is the schema descriptor for quantity field.
	ticketDescQuantity := ticketFields[4].Descriptor()
	// ticket.QuantityValidator is a validator for the "quantity" field. It is called by the builders before save.
	ticket.QuantityValidator = ticketDescQuantity.Validators[0].(func(int) error)
	// ticketDescQuantitySold is the schema descriptor for quantity_sold field.
	ticketDescQuantitySold := ticketFields[5].Descriptor()
	// ticket.DefaultQuantitySold holds the default value on creation for the quantity_sold field.
	ticket.DefaultQuantitySold = ticketDescQuantitySold.Default.(int)
	// ticket.QuantitySoldValidator is a validator for the "quantity_sold" field. It is called by the builders before save.
	ticket.QuantitySoldValidator = ticketDescQuantitySold.Validators[0].(func(int) error)
	// ticketDescTicketType is the schema descriptor for ticket_type field.
	ticketDescTicketType := ticketFields[9].Descriptor()
	// ticket.TicketTypeValidator is a validator for the "ticket_type" field. It is called by the builders before save.
	ticket.TicketTypeValidator = func() func(string) error {
		validators := ticketDescTicketType.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(ticket_type string) error {
			for _, fn := range fns {
				if err := fn(ticket_type); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// ticketDescIsActive is the schema descriptor for is_active field.
	ticketDescIsActive := ticketFields[10].Descriptor()
	// ticket.DefaultIsActive holds the default value on creation for the is_active field.
	ticket.DefaultIsActive = ticketDescIsActive.Default.(bool)
	// ticketDescIsRefundable is the schema descriptor for is_refundable field.
	ticketDescIsRefundable := ticketFields[11].Descriptor()
	// ticket.DefaultIsRefundable holds the default value on creation for the is_refundable field.
	ticket.DefaultIsRefundable = ticketDescIsRefundable.Default.(bool)
	userMixin := schema.User{}.Mixin()
	userMixinFields0 := userMixin[0].Fields()
	_ = userMixinFields0
	userFields := schema.User{}.Fields()
	_ = userFields
	// userDescCreateTime is the schema descriptor for create_time field.
	userDescCreateTime := userMixinFields0[0].Descriptor()
	// user.DefaultCreateTime holds the default value on creation for the create_time field.
	user.DefaultCreateTime = userDescCreateTime.Default.(func() time.Time)
	// userDescUpdateTime is the schema descriptor for update_time field.
	userDescUpdateTime := userMixinFields0[1].Descriptor()
	// user.DefaultUpdateTime holds the default value on creation for the update_time field.
	user.DefaultUpdateTime = userDescUpdateTime.Default.(func() time.Time)
	// user.UpdateDefaultUpdateTime holds the default value on update for the update_time field.
	user.UpdateDefaultUpdateTime = userDescUpdateTime.UpdateDefault.(func() time.Time)
	// userDescUUID is the schema descriptor for uuid field.
	userDescUUID := userFields[0].Descriptor()
	// user.DefaultUUID holds the default value on creation for the uuid field.
	user.DefaultUUID = userDescUUID.Default.(func() uuid.UUID)
	// userDescFirstName is the schema descriptor for first_name field.
	userDescFirstName := userFields[1].Descriptor()
	// user.FirstNameValidator is a validator for the "first_name" field. It is called by the builders before save.
	user.FirstNameValidator = userDescFirstName.Validators[0].(func(string) error)
	// userDescLastName is the schema descriptor for last_name field.
	userDescLastName := userFields[2].Descriptor()
	// user.LastNameValidator is a validator for the "last_name" field. It is called by the builders before save.
	user.LastNameValidator = userDescLastName.Validators[0].(func(string) error)
	// userDescEmail is the schema descriptor for email field.
	userDescEmail := userFields[3].Descriptor()
	// user.EmailValidator is a validator for the "email" field. It is called by the builders before save.
	user.EmailValidator = userDescEmail.Validators[0].(func(string) error)
	// userDescPassword is the schema descriptor for password field.
	userDescPassword := userFields[4].Descriptor()
	// user.PasswordValidator is a validator for the "password" field. It is called by the builders before save.
	user.PasswordValidator = userDescPassword.Validators[0].(func(string) error)
	// userDescPhone is the schema descriptor for phone field.
	userDescPhone := userFields[5].Descriptor()
	// user.PhoneValidator is a validator for the "phone" field. It is called by the builders before save.
	user.PhoneValidator = userDescPhone.Validators[0].(func(string) error)
	// userDescIsVendor is the schema descriptor for is_vendor field.
	userDescIsVendor := userFields[6].Descriptor()
	// user.DefaultIsVendor holds the default value on creation for the is_vendor field.
	user.DefaultIsVendor = userDescIsVendor.Default.(bool)
	// userDescEmailVerified is the schema descriptor for email_verified field.
	userDescEmailVerified := userFields[7].Descriptor()
	// user.DefaultEmailVerified holds the default value on creation for the email_verified field.
	user.DefaultEmailVerified = userDescEmailVerified.Default.(bool)
	// userDescPhoneVerified is the schema descriptor for phone_verified field.
	userDescPhoneVerified := userFields[8].Descriptor()
	// user.DefaultPhoneVerified holds the default value on creation for the phone_verified field.
	user.DefaultPhoneVerified = userDescPhoneVerified.Default.(bool)
	// userDescDisabled is the schema descriptor for disabled field.
	userDescDisabled := userFields[11].Descriptor()
	// user.DefaultDisabled holds the default value on creation for the disabled field.
	user.DefaultDisabled = userDescDisabled.Default.(bool)
}
