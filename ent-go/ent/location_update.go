// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/kayceeDev/caspa-events/ent-go/ent/event"
	"github.com/kayceeDev/caspa-events/ent-go/ent/location"
	"github.com/kayceeDev/caspa-events/ent-go/ent/predicate"
)

// LocationUpdate is the builder for updating Location entities.
type LocationUpdate struct {
	config
	hooks    []Hook
	mutation *LocationMutation
}

// Where appends a list predicates to the LocationUpdate builder.
func (lu *LocationUpdate) Where(ps ...predicate.Location) *LocationUpdate {
	lu.mutation.Where(ps...)
	return lu
}

// SetUpdateTime sets the "update_time" field.
func (lu *LocationUpdate) SetUpdateTime(t time.Time) *LocationUpdate {
	lu.mutation.SetUpdateTime(t)
	return lu
}

// SetName sets the "name" field.
func (lu *LocationUpdate) SetName(s string) *LocationUpdate {
	lu.mutation.SetName(s)
	return lu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (lu *LocationUpdate) SetNillableName(s *string) *LocationUpdate {
	if s != nil {
		lu.SetName(*s)
	}
	return lu
}

// SetAddress sets the "address" field.
func (lu *LocationUpdate) SetAddress(s string) *LocationUpdate {
	lu.mutation.SetAddress(s)
	return lu
}

// SetNillableAddress sets the "address" field if the given value is not nil.
func (lu *LocationUpdate) SetNillableAddress(s *string) *LocationUpdate {
	if s != nil {
		lu.SetAddress(*s)
	}
	return lu
}

// ClearAddress clears the value of the "address" field.
func (lu *LocationUpdate) ClearAddress() *LocationUpdate {
	lu.mutation.ClearAddress()
	return lu
}

// SetCity sets the "city" field.
func (lu *LocationUpdate) SetCity(s string) *LocationUpdate {
	lu.mutation.SetCity(s)
	return lu
}

// SetNillableCity sets the "city" field if the given value is not nil.
func (lu *LocationUpdate) SetNillableCity(s *string) *LocationUpdate {
	if s != nil {
		lu.SetCity(*s)
	}
	return lu
}

// ClearCity clears the value of the "city" field.
func (lu *LocationUpdate) ClearCity() *LocationUpdate {
	lu.mutation.ClearCity()
	return lu
}

// SetState sets the "state" field.
func (lu *LocationUpdate) SetState(s string) *LocationUpdate {
	lu.mutation.SetState(s)
	return lu
}

// SetNillableState sets the "state" field if the given value is not nil.
func (lu *LocationUpdate) SetNillableState(s *string) *LocationUpdate {
	if s != nil {
		lu.SetState(*s)
	}
	return lu
}

// ClearState clears the value of the "state" field.
func (lu *LocationUpdate) ClearState() *LocationUpdate {
	lu.mutation.ClearState()
	return lu
}

// SetCountry sets the "country" field.
func (lu *LocationUpdate) SetCountry(s string) *LocationUpdate {
	lu.mutation.SetCountry(s)
	return lu
}

// SetNillableCountry sets the "country" field if the given value is not nil.
func (lu *LocationUpdate) SetNillableCountry(s *string) *LocationUpdate {
	if s != nil {
		lu.SetCountry(*s)
	}
	return lu
}

// ClearCountry clears the value of the "country" field.
func (lu *LocationUpdate) ClearCountry() *LocationUpdate {
	lu.mutation.ClearCountry()
	return lu
}

// SetPostalCode sets the "postal_code" field.
func (lu *LocationUpdate) SetPostalCode(s string) *LocationUpdate {
	lu.mutation.SetPostalCode(s)
	return lu
}

// SetNillablePostalCode sets the "postal_code" field if the given value is not nil.
func (lu *LocationUpdate) SetNillablePostalCode(s *string) *LocationUpdate {
	if s != nil {
		lu.SetPostalCode(*s)
	}
	return lu
}

// ClearPostalCode clears the value of the "postal_code" field.
func (lu *LocationUpdate) ClearPostalCode() *LocationUpdate {
	lu.mutation.ClearPostalCode()
	return lu
}

// SetLatitude sets the "latitude" field.
func (lu *LocationUpdate) SetLatitude(f float64) *LocationUpdate {
	lu.mutation.ResetLatitude()
	lu.mutation.SetLatitude(f)
	return lu
}

// SetNillableLatitude sets the "latitude" field if the given value is not nil.
func (lu *LocationUpdate) SetNillableLatitude(f *float64) *LocationUpdate {
	if f != nil {
		lu.SetLatitude(*f)
	}
	return lu
}

// AddLatitude adds f to the "latitude" field.
func (lu *LocationUpdate) AddLatitude(f float64) *LocationUpdate {
	lu.mutation.AddLatitude(f)
	return lu
}

// ClearLatitude clears the value of the "latitude" field.
func (lu *LocationUpdate) ClearLatitude() *LocationUpdate {
	lu.mutation.ClearLatitude()
	return lu
}

// SetLongitude sets the "longitude" field.
func (lu *LocationUpdate) SetLongitude(f float64) *LocationUpdate {
	lu.mutation.ResetLongitude()
	lu.mutation.SetLongitude(f)
	return lu
}

// SetNillableLongitude sets the "longitude" field if the given value is not nil.
func (lu *LocationUpdate) SetNillableLongitude(f *float64) *LocationUpdate {
	if f != nil {
		lu.SetLongitude(*f)
	}
	return lu
}

// AddLongitude adds f to the "longitude" field.
func (lu *LocationUpdate) AddLongitude(f float64) *LocationUpdate {
	lu.mutation.AddLongitude(f)
	return lu
}

// ClearLongitude clears the value of the "longitude" field.
func (lu *LocationUpdate) ClearLongitude() *LocationUpdate {
	lu.mutation.ClearLongitude()
	return lu
}

// SetCapacity sets the "capacity" field.
func (lu *LocationUpdate) SetCapacity(i int) *LocationUpdate {
	lu.mutation.ResetCapacity()
	lu.mutation.SetCapacity(i)
	return lu
}

// SetNillableCapacity sets the "capacity" field if the given value is not nil.
func (lu *LocationUpdate) SetNillableCapacity(i *int) *LocationUpdate {
	if i != nil {
		lu.SetCapacity(*i)
	}
	return lu
}

// AddCapacity adds i to the "capacity" field.
func (lu *LocationUpdate) AddCapacity(i int) *LocationUpdate {
	lu.mutation.AddCapacity(i)
	return lu
}

// ClearCapacity clears the value of the "capacity" field.
func (lu *LocationUpdate) ClearCapacity() *LocationUpdate {
	lu.mutation.ClearCapacity()
	return lu
}

// AddEventIDs adds the "event" edge to the Event entity by IDs.
func (lu *LocationUpdate) AddEventIDs(ids ...int) *LocationUpdate {
	lu.mutation.AddEventIDs(ids...)
	return lu
}

// AddEvent adds the "event" edges to the Event entity.
func (lu *LocationUpdate) AddEvent(e ...*Event) *LocationUpdate {
	ids := make([]int, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return lu.AddEventIDs(ids...)
}

// Mutation returns the LocationMutation object of the builder.
func (lu *LocationUpdate) Mutation() *LocationMutation {
	return lu.mutation
}

// ClearEvent clears all "event" edges to the Event entity.
func (lu *LocationUpdate) ClearEvent() *LocationUpdate {
	lu.mutation.ClearEvent()
	return lu
}

// RemoveEventIDs removes the "event" edge to Event entities by IDs.
func (lu *LocationUpdate) RemoveEventIDs(ids ...int) *LocationUpdate {
	lu.mutation.RemoveEventIDs(ids...)
	return lu
}

// RemoveEvent removes "event" edges to Event entities.
func (lu *LocationUpdate) RemoveEvent(e ...*Event) *LocationUpdate {
	ids := make([]int, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return lu.RemoveEventIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (lu *LocationUpdate) Save(ctx context.Context) (int, error) {
	lu.defaults()
	return withHooks(ctx, lu.sqlSave, lu.mutation, lu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (lu *LocationUpdate) SaveX(ctx context.Context) int {
	affected, err := lu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (lu *LocationUpdate) Exec(ctx context.Context) error {
	_, err := lu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (lu *LocationUpdate) ExecX(ctx context.Context) {
	if err := lu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (lu *LocationUpdate) defaults() {
	if _, ok := lu.mutation.UpdateTime(); !ok {
		v := location.UpdateDefaultUpdateTime()
		lu.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (lu *LocationUpdate) check() error {
	if v, ok := lu.mutation.Name(); ok {
		if err := location.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Location.name": %w`, err)}
		}
	}
	if v, ok := lu.mutation.City(); ok {
		if err := location.CityValidator(v); err != nil {
			return &ValidationError{Name: "city", err: fmt.Errorf(`ent: validator failed for field "Location.city": %w`, err)}
		}
	}
	if v, ok := lu.mutation.State(); ok {
		if err := location.StateValidator(v); err != nil {
			return &ValidationError{Name: "state", err: fmt.Errorf(`ent: validator failed for field "Location.state": %w`, err)}
		}
	}
	if v, ok := lu.mutation.Country(); ok {
		if err := location.CountryValidator(v); err != nil {
			return &ValidationError{Name: "country", err: fmt.Errorf(`ent: validator failed for field "Location.country": %w`, err)}
		}
	}
	if v, ok := lu.mutation.PostalCode(); ok {
		if err := location.PostalCodeValidator(v); err != nil {
			return &ValidationError{Name: "postal_code", err: fmt.Errorf(`ent: validator failed for field "Location.postal_code": %w`, err)}
		}
	}
	return nil
}

func (lu *LocationUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := lu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(location.Table, location.Columns, sqlgraph.NewFieldSpec(location.FieldID, field.TypeInt))
	if ps := lu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := lu.mutation.UpdateTime(); ok {
		_spec.SetField(location.FieldUpdateTime, field.TypeTime, value)
	}
	if value, ok := lu.mutation.Name(); ok {
		_spec.SetField(location.FieldName, field.TypeString, value)
	}
	if value, ok := lu.mutation.Address(); ok {
		_spec.SetField(location.FieldAddress, field.TypeString, value)
	}
	if lu.mutation.AddressCleared() {
		_spec.ClearField(location.FieldAddress, field.TypeString)
	}
	if value, ok := lu.mutation.City(); ok {
		_spec.SetField(location.FieldCity, field.TypeString, value)
	}
	if lu.mutation.CityCleared() {
		_spec.ClearField(location.FieldCity, field.TypeString)
	}
	if value, ok := lu.mutation.State(); ok {
		_spec.SetField(location.FieldState, field.TypeString, value)
	}
	if lu.mutation.StateCleared() {
		_spec.ClearField(location.FieldState, field.TypeString)
	}
	if value, ok := lu.mutation.Country(); ok {
		_spec.SetField(location.FieldCountry, field.TypeString, value)
	}
	if lu.mutation.CountryCleared() {
		_spec.ClearField(location.FieldCountry, field.TypeString)
	}
	if value, ok := lu.mutation.PostalCode(); ok {
		_spec.SetField(location.FieldPostalCode, field.TypeString, value)
	}
	if lu.mutation.PostalCodeCleared() {
		_spec.ClearField(location.FieldPostalCode, field.TypeString)
	}
	if value, ok := lu.mutation.Latitude(); ok {
		_spec.SetField(location.FieldLatitude, field.TypeFloat64, value)
	}
	if value, ok := lu.mutation.AddedLatitude(); ok {
		_spec.AddField(location.FieldLatitude, field.TypeFloat64, value)
	}
	if lu.mutation.LatitudeCleared() {
		_spec.ClearField(location.FieldLatitude, field.TypeFloat64)
	}
	if value, ok := lu.mutation.Longitude(); ok {
		_spec.SetField(location.FieldLongitude, field.TypeFloat64, value)
	}
	if value, ok := lu.mutation.AddedLongitude(); ok {
		_spec.AddField(location.FieldLongitude, field.TypeFloat64, value)
	}
	if lu.mutation.LongitudeCleared() {
		_spec.ClearField(location.FieldLongitude, field.TypeFloat64)
	}
	if value, ok := lu.mutation.Capacity(); ok {
		_spec.SetField(location.FieldCapacity, field.TypeInt, value)
	}
	if value, ok := lu.mutation.AddedCapacity(); ok {
		_spec.AddField(location.FieldCapacity, field.TypeInt, value)
	}
	if lu.mutation.CapacityCleared() {
		_spec.ClearField(location.FieldCapacity, field.TypeInt)
	}
	if lu.mutation.EventCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   location.EventTable,
			Columns: []string{location.EventColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(event.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := lu.mutation.RemovedEventIDs(); len(nodes) > 0 && !lu.mutation.EventCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   location.EventTable,
			Columns: []string{location.EventColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(event.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := lu.mutation.EventIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   location.EventTable,
			Columns: []string{location.EventColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(event.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, lu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{location.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	lu.mutation.done = true
	return n, nil
}

// LocationUpdateOne is the builder for updating a single Location entity.
type LocationUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *LocationMutation
}

// SetUpdateTime sets the "update_time" field.
func (luo *LocationUpdateOne) SetUpdateTime(t time.Time) *LocationUpdateOne {
	luo.mutation.SetUpdateTime(t)
	return luo
}

// SetName sets the "name" field.
func (luo *LocationUpdateOne) SetName(s string) *LocationUpdateOne {
	luo.mutation.SetName(s)
	return luo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (luo *LocationUpdateOne) SetNillableName(s *string) *LocationUpdateOne {
	if s != nil {
		luo.SetName(*s)
	}
	return luo
}

// SetAddress sets the "address" field.
func (luo *LocationUpdateOne) SetAddress(s string) *LocationUpdateOne {
	luo.mutation.SetAddress(s)
	return luo
}

// SetNillableAddress sets the "address" field if the given value is not nil.
func (luo *LocationUpdateOne) SetNillableAddress(s *string) *LocationUpdateOne {
	if s != nil {
		luo.SetAddress(*s)
	}
	return luo
}

// ClearAddress clears the value of the "address" field.
func (luo *LocationUpdateOne) ClearAddress() *LocationUpdateOne {
	luo.mutation.ClearAddress()
	return luo
}

// SetCity sets the "city" field.
func (luo *LocationUpdateOne) SetCity(s string) *LocationUpdateOne {
	luo.mutation.SetCity(s)
	return luo
}

// SetNillableCity sets the "city" field if the given value is not nil.
func (luo *LocationUpdateOne) SetNillableCity(s *string) *LocationUpdateOne {
	if s != nil {
		luo.SetCity(*s)
	}
	return luo
}

// ClearCity clears the value of the "city" field.
func (luo *LocationUpdateOne) ClearCity() *LocationUpdateOne {
	luo.mutation.ClearCity()
	return luo
}

// SetState sets the "state" field.
func (luo *LocationUpdateOne) SetState(s string) *LocationUpdateOne {
	luo.mutation.SetState(s)
	return luo
}

// SetNillableState sets the "state" field if the given value is not nil.
func (luo *LocationUpdateOne) SetNillableState(s *string) *LocationUpdateOne {
	if s != nil {
		luo.SetState(*s)
	}
	return luo
}

// ClearState clears the value of the "state" field.
func (luo *LocationUpdateOne) ClearState() *LocationUpdateOne {
	luo.mutation.ClearState()
	return luo
}

// SetCountry sets the "country" field.
func (luo *LocationUpdateOne) SetCountry(s string) *LocationUpdateOne {
	luo.mutation.SetCountry(s)
	return luo
}

// SetNillableCountry sets the "country" field if the given value is not nil.
func (luo *LocationUpdateOne) SetNillableCountry(s *string) *LocationUpdateOne {
	if s != nil {
		luo.SetCountry(*s)
	}
	return luo
}

// ClearCountry clears the value of the "country" field.
func (luo *LocationUpdateOne) ClearCountry() *LocationUpdateOne {
	luo.mutation.ClearCountry()
	return luo
}

// SetPostalCode sets the "postal_code" field.
func (luo *LocationUpdateOne) SetPostalCode(s string) *LocationUpdateOne {
	luo.mutation.SetPostalCode(s)
	return luo
}

// SetNillablePostalCode sets the "postal_code" field if the given value is not nil.
func (luo *LocationUpdateOne) SetNillablePostalCode(s *string) *LocationUpdateOne {
	if s != nil {
		luo.SetPostalCode(*s)
	}
	return luo
}

// ClearPostalCode clears the value of the "postal_code" field.
func (luo *LocationUpdateOne) ClearPostalCode() *LocationUpdateOne {
	luo.mutation.ClearPostalCode()
	return luo
}

// SetLatitude sets the "latitude" field.
func (luo *LocationUpdateOne) SetLatitude(f float64) *LocationUpdateOne {
	luo.mutation.ResetLatitude()
	luo.mutation.SetLatitude(f)
	return luo
}

// SetNillableLatitude sets the "latitude" field if the given value is not nil.
func (luo *LocationUpdateOne) SetNillableLatitude(f *float64) *LocationUpdateOne {
	if f != nil {
		luo.SetLatitude(*f)
	}
	return luo
}

// AddLatitude adds f to the "latitude" field.
func (luo *LocationUpdateOne) AddLatitude(f float64) *LocationUpdateOne {
	luo.mutation.AddLatitude(f)
	return luo
}

// ClearLatitude clears the value of the "latitude" field.
func (luo *LocationUpdateOne) ClearLatitude() *LocationUpdateOne {
	luo.mutation.ClearLatitude()
	return luo
}

// SetLongitude sets the "longitude" field.
func (luo *LocationUpdateOne) SetLongitude(f float64) *LocationUpdateOne {
	luo.mutation.ResetLongitude()
	luo.mutation.SetLongitude(f)
	return luo
}

// SetNillableLongitude sets the "longitude" field if the given value is not nil.
func (luo *LocationUpdateOne) SetNillableLongitude(f *float64) *LocationUpdateOne {
	if f != nil {
		luo.SetLongitude(*f)
	}
	return luo
}

// AddLongitude adds f to the "longitude" field.
func (luo *LocationUpdateOne) AddLongitude(f float64) *LocationUpdateOne {
	luo.mutation.AddLongitude(f)
	return luo
}

// ClearLongitude clears the value of the "longitude" field.
func (luo *LocationUpdateOne) ClearLongitude() *LocationUpdateOne {
	luo.mutation.ClearLongitude()
	return luo
}

// SetCapacity sets the "capacity" field.
func (luo *LocationUpdateOne) SetCapacity(i int) *LocationUpdateOne {
	luo.mutation.ResetCapacity()
	luo.mutation.SetCapacity(i)
	return luo
}

// SetNillableCapacity sets the "capacity" field if the given value is not nil.
func (luo *LocationUpdateOne) SetNillableCapacity(i *int) *LocationUpdateOne {
	if i != nil {
		luo.SetCapacity(*i)
	}
	return luo
}

// AddCapacity adds i to the "capacity" field.
func (luo *LocationUpdateOne) AddCapacity(i int) *LocationUpdateOne {
	luo.mutation.AddCapacity(i)
	return luo
}

// ClearCapacity clears the value of the "capacity" field.
func (luo *LocationUpdateOne) ClearCapacity() *LocationUpdateOne {
	luo.mutation.ClearCapacity()
	return luo
}

// AddEventIDs adds the "event" edge to the Event entity by IDs.
func (luo *LocationUpdateOne) AddEventIDs(ids ...int) *LocationUpdateOne {
	luo.mutation.AddEventIDs(ids...)
	return luo
}

// AddEvent adds the "event" edges to the Event entity.
func (luo *LocationUpdateOne) AddEvent(e ...*Event) *LocationUpdateOne {
	ids := make([]int, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return luo.AddEventIDs(ids...)
}

// Mutation returns the LocationMutation object of the builder.
func (luo *LocationUpdateOne) Mutation() *LocationMutation {
	return luo.mutation
}

// ClearEvent clears all "event" edges to the Event entity.
func (luo *LocationUpdateOne) ClearEvent() *LocationUpdateOne {
	luo.mutation.ClearEvent()
	return luo
}

// RemoveEventIDs removes the "event" edge to Event entities by IDs.
func (luo *LocationUpdateOne) RemoveEventIDs(ids ...int) *LocationUpdateOne {
	luo.mutation.RemoveEventIDs(ids...)
	return luo
}

// RemoveEvent removes "event" edges to Event entities.
func (luo *LocationUpdateOne) RemoveEvent(e ...*Event) *LocationUpdateOne {
	ids := make([]int, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return luo.RemoveEventIDs(ids...)
}

// Where appends a list predicates to the LocationUpdate builder.
func (luo *LocationUpdateOne) Where(ps ...predicate.Location) *LocationUpdateOne {
	luo.mutation.Where(ps...)
	return luo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (luo *LocationUpdateOne) Select(field string, fields ...string) *LocationUpdateOne {
	luo.fields = append([]string{field}, fields...)
	return luo
}

// Save executes the query and returns the updated Location entity.
func (luo *LocationUpdateOne) Save(ctx context.Context) (*Location, error) {
	luo.defaults()
	return withHooks(ctx, luo.sqlSave, luo.mutation, luo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (luo *LocationUpdateOne) SaveX(ctx context.Context) *Location {
	node, err := luo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (luo *LocationUpdateOne) Exec(ctx context.Context) error {
	_, err := luo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (luo *LocationUpdateOne) ExecX(ctx context.Context) {
	if err := luo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (luo *LocationUpdateOne) defaults() {
	if _, ok := luo.mutation.UpdateTime(); !ok {
		v := location.UpdateDefaultUpdateTime()
		luo.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (luo *LocationUpdateOne) check() error {
	if v, ok := luo.mutation.Name(); ok {
		if err := location.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Location.name": %w`, err)}
		}
	}
	if v, ok := luo.mutation.City(); ok {
		if err := location.CityValidator(v); err != nil {
			return &ValidationError{Name: "city", err: fmt.Errorf(`ent: validator failed for field "Location.city": %w`, err)}
		}
	}
	if v, ok := luo.mutation.State(); ok {
		if err := location.StateValidator(v); err != nil {
			return &ValidationError{Name: "state", err: fmt.Errorf(`ent: validator failed for field "Location.state": %w`, err)}
		}
	}
	if v, ok := luo.mutation.Country(); ok {
		if err := location.CountryValidator(v); err != nil {
			return &ValidationError{Name: "country", err: fmt.Errorf(`ent: validator failed for field "Location.country": %w`, err)}
		}
	}
	if v, ok := luo.mutation.PostalCode(); ok {
		if err := location.PostalCodeValidator(v); err != nil {
			return &ValidationError{Name: "postal_code", err: fmt.Errorf(`ent: validator failed for field "Location.postal_code": %w`, err)}
		}
	}
	return nil
}

func (luo *LocationUpdateOne) sqlSave(ctx context.Context) (_node *Location, err error) {
	if err := luo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(location.Table, location.Columns, sqlgraph.NewFieldSpec(location.FieldID, field.TypeInt))
	id, ok := luo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Location.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := luo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, location.FieldID)
		for _, f := range fields {
			if !location.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != location.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := luo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := luo.mutation.UpdateTime(); ok {
		_spec.SetField(location.FieldUpdateTime, field.TypeTime, value)
	}
	if value, ok := luo.mutation.Name(); ok {
		_spec.SetField(location.FieldName, field.TypeString, value)
	}
	if value, ok := luo.mutation.Address(); ok {
		_spec.SetField(location.FieldAddress, field.TypeString, value)
	}
	if luo.mutation.AddressCleared() {
		_spec.ClearField(location.FieldAddress, field.TypeString)
	}
	if value, ok := luo.mutation.City(); ok {
		_spec.SetField(location.FieldCity, field.TypeString, value)
	}
	if luo.mutation.CityCleared() {
		_spec.ClearField(location.FieldCity, field.TypeString)
	}
	if value, ok := luo.mutation.State(); ok {
		_spec.SetField(location.FieldState, field.TypeString, value)
	}
	if luo.mutation.StateCleared() {
		_spec.ClearField(location.FieldState, field.TypeString)
	}
	if value, ok := luo.mutation.Country(); ok {
		_spec.SetField(location.FieldCountry, field.TypeString, value)
	}
	if luo.mutation.CountryCleared() {
		_spec.ClearField(location.FieldCountry, field.TypeString)
	}
	if value, ok := luo.mutation.PostalCode(); ok {
		_spec.SetField(location.FieldPostalCode, field.TypeString, value)
	}
	if luo.mutation.PostalCodeCleared() {
		_spec.ClearField(location.FieldPostalCode, field.TypeString)
	}
	if value, ok := luo.mutation.Latitude(); ok {
		_spec.SetField(location.FieldLatitude, field.TypeFloat64, value)
	}
	if value, ok := luo.mutation.AddedLatitude(); ok {
		_spec.AddField(location.FieldLatitude, field.TypeFloat64, value)
	}
	if luo.mutation.LatitudeCleared() {
		_spec.ClearField(location.FieldLatitude, field.TypeFloat64)
	}
	if value, ok := luo.mutation.Longitude(); ok {
		_spec.SetField(location.FieldLongitude, field.TypeFloat64, value)
	}
	if value, ok := luo.mutation.AddedLongitude(); ok {
		_spec.AddField(location.FieldLongitude, field.TypeFloat64, value)
	}
	if luo.mutation.LongitudeCleared() {
		_spec.ClearField(location.FieldLongitude, field.TypeFloat64)
	}
	if value, ok := luo.mutation.Capacity(); ok {
		_spec.SetField(location.FieldCapacity, field.TypeInt, value)
	}
	if value, ok := luo.mutation.AddedCapacity(); ok {
		_spec.AddField(location.FieldCapacity, field.TypeInt, value)
	}
	if luo.mutation.CapacityCleared() {
		_spec.ClearField(location.FieldCapacity, field.TypeInt)
	}
	if luo.mutation.EventCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   location.EventTable,
			Columns: []string{location.EventColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(event.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := luo.mutation.RemovedEventIDs(); len(nodes) > 0 && !luo.mutation.EventCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   location.EventTable,
			Columns: []string{location.EventColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(event.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := luo.mutation.EventIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   location.EventTable,
			Columns: []string{location.EventColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(event.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Location{config: luo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, luo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{location.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	luo.mutation.done = true
	return _node, nil
}
