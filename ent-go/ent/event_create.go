// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/kayceeDev/caspa-events/ent-go/ent/event"
	"github.com/kayceeDev/caspa-events/ent-go/ent/location"
	"github.com/kayceeDev/caspa-events/ent-go/ent/ticket"
	"github.com/kayceeDev/caspa-events/ent-go/ent/user"
)

// EventCreate is the builder for creating a Event entity.
type EventCreate struct {
	config
	mutation *EventMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreateTime sets the "create_time" field.
func (ec *EventCreate) SetCreateTime(t time.Time) *EventCreate {
	ec.mutation.SetCreateTime(t)
	return ec
}

// SetNillableCreateTime sets the "create_time" field if the given value is not nil.
func (ec *EventCreate) SetNillableCreateTime(t *time.Time) *EventCreate {
	if t != nil {
		ec.SetCreateTime(*t)
	}
	return ec
}

// SetUpdateTime sets the "update_time" field.
func (ec *EventCreate) SetUpdateTime(t time.Time) *EventCreate {
	ec.mutation.SetUpdateTime(t)
	return ec
}

// SetNillableUpdateTime sets the "update_time" field if the given value is not nil.
func (ec *EventCreate) SetNillableUpdateTime(t *time.Time) *EventCreate {
	if t != nil {
		ec.SetUpdateTime(*t)
	}
	return ec
}

// SetUUID sets the "uuid" field.
func (ec *EventCreate) SetUUID(u uuid.UUID) *EventCreate {
	ec.mutation.SetUUID(u)
	return ec
}

// SetNillableUUID sets the "uuid" field if the given value is not nil.
func (ec *EventCreate) SetNillableUUID(u *uuid.UUID) *EventCreate {
	if u != nil {
		ec.SetUUID(*u)
	}
	return ec
}

// SetTitle sets the "title" field.
func (ec *EventCreate) SetTitle(s string) *EventCreate {
	ec.mutation.SetTitle(s)
	return ec
}

// SetDescription sets the "description" field.
func (ec *EventCreate) SetDescription(s string) *EventCreate {
	ec.mutation.SetDescription(s)
	return ec
}

// SetStartDate sets the "start_date" field.
func (ec *EventCreate) SetStartDate(t time.Time) *EventCreate {
	ec.mutation.SetStartDate(t)
	return ec
}

// SetEndDate sets the "end_date" field.
func (ec *EventCreate) SetEndDate(t time.Time) *EventCreate {
	ec.mutation.SetEndDate(t)
	return ec
}

// SetEventType sets the "event_type" field.
func (ec *EventCreate) SetEventType(s string) *EventCreate {
	ec.mutation.SetEventType(s)
	return ec
}

// SetStatus sets the "status" field.
func (ec *EventCreate) SetStatus(e event.Status) *EventCreate {
	ec.mutation.SetStatus(e)
	return ec
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (ec *EventCreate) SetNillableStatus(e *event.Status) *EventCreate {
	if e != nil {
		ec.SetStatus(*e)
	}
	return ec
}

// SetIsPublic sets the "is_public" field.
func (ec *EventCreate) SetIsPublic(b bool) *EventCreate {
	ec.mutation.SetIsPublic(b)
	return ec
}

// SetNillableIsPublic sets the "is_public" field if the given value is not nil.
func (ec *EventCreate) SetNillableIsPublic(b *bool) *EventCreate {
	if b != nil {
		ec.SetIsPublic(*b)
	}
	return ec
}

// SetIsPaid sets the "is_paid" field.
func (ec *EventCreate) SetIsPaid(b bool) *EventCreate {
	ec.mutation.SetIsPaid(b)
	return ec
}

// SetNillableIsPaid sets the "is_paid" field if the given value is not nil.
func (ec *EventCreate) SetNillableIsPaid(b *bool) *EventCreate {
	if b != nil {
		ec.SetIsPaid(*b)
	}
	return ec
}

// SetMaxParticipants sets the "max_participants" field.
func (ec *EventCreate) SetMaxParticipants(i int) *EventCreate {
	ec.mutation.SetMaxParticipants(i)
	return ec
}

// SetNillableMaxParticipants sets the "max_participants" field if the given value is not nil.
func (ec *EventCreate) SetNillableMaxParticipants(i *int) *EventCreate {
	if i != nil {
		ec.SetMaxParticipants(*i)
	}
	return ec
}

// SetRegistrationDeadline sets the "registration_deadline" field.
func (ec *EventCreate) SetRegistrationDeadline(t time.Time) *EventCreate {
	ec.mutation.SetRegistrationDeadline(t)
	return ec
}

// SetNillableRegistrationDeadline sets the "registration_deadline" field if the given value is not nil.
func (ec *EventCreate) SetNillableRegistrationDeadline(t *time.Time) *EventCreate {
	if t != nil {
		ec.SetRegistrationDeadline(*t)
	}
	return ec
}

// SetCoverPhotoID sets the "cover_photo_id" field.
func (ec *EventCreate) SetCoverPhotoID(s string) *EventCreate {
	ec.mutation.SetCoverPhotoID(s)
	return ec
}

// SetNillableCoverPhotoID sets the "cover_photo_id" field if the given value is not nil.
func (ec *EventCreate) SetNillableCoverPhotoID(s *string) *EventCreate {
	if s != nil {
		ec.SetCoverPhotoID(*s)
	}
	return ec
}

// SetOrganizerID sets the "organizer_id" field.
func (ec *EventCreate) SetOrganizerID(i int) *EventCreate {
	ec.mutation.SetOrganizerID(i)
	return ec
}

// SetLocationID sets the "location_id" field.
func (ec *EventCreate) SetLocationID(i int) *EventCreate {
	ec.mutation.SetLocationID(i)
	return ec
}

// SetNillableLocationID sets the "location_id" field if the given value is not nil.
func (ec *EventCreate) SetNillableLocationID(i *int) *EventCreate {
	if i != nil {
		ec.SetLocationID(*i)
	}
	return ec
}

// SetUserID sets the "user" edge to the User entity by ID.
func (ec *EventCreate) SetUserID(id int) *EventCreate {
	ec.mutation.SetUserID(id)
	return ec
}

// SetUser sets the "user" edge to the User entity.
func (ec *EventCreate) SetUser(u *User) *EventCreate {
	return ec.SetUserID(u.ID)
}

// SetLocation sets the "location" edge to the Location entity.
func (ec *EventCreate) SetLocation(l *Location) *EventCreate {
	return ec.SetLocationID(l.ID)
}

// AddGuestIDs adds the "guest" edge to the User entity by IDs.
func (ec *EventCreate) AddGuestIDs(ids ...int) *EventCreate {
	ec.mutation.AddGuestIDs(ids...)
	return ec
}

// AddGuest adds the "guest" edges to the User entity.
func (ec *EventCreate) AddGuest(u ...*User) *EventCreate {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return ec.AddGuestIDs(ids...)
}

// AddTicketIDs adds the "ticket" edge to the Ticket entity by IDs.
func (ec *EventCreate) AddTicketIDs(ids ...int) *EventCreate {
	ec.mutation.AddTicketIDs(ids...)
	return ec
}

// AddTicket adds the "ticket" edges to the Ticket entity.
func (ec *EventCreate) AddTicket(t ...*Ticket) *EventCreate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return ec.AddTicketIDs(ids...)
}

// Mutation returns the EventMutation object of the builder.
func (ec *EventCreate) Mutation() *EventMutation {
	return ec.mutation
}

// Save creates the Event in the database.
func (ec *EventCreate) Save(ctx context.Context) (*Event, error) {
	ec.defaults()
	return withHooks(ctx, ec.sqlSave, ec.mutation, ec.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (ec *EventCreate) SaveX(ctx context.Context) *Event {
	v, err := ec.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ec *EventCreate) Exec(ctx context.Context) error {
	_, err := ec.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ec *EventCreate) ExecX(ctx context.Context) {
	if err := ec.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ec *EventCreate) defaults() {
	if _, ok := ec.mutation.CreateTime(); !ok {
		v := event.DefaultCreateTime()
		ec.mutation.SetCreateTime(v)
	}
	if _, ok := ec.mutation.UpdateTime(); !ok {
		v := event.DefaultUpdateTime()
		ec.mutation.SetUpdateTime(v)
	}
	if _, ok := ec.mutation.UUID(); !ok {
		v := event.DefaultUUID()
		ec.mutation.SetUUID(v)
	}
	if _, ok := ec.mutation.Status(); !ok {
		v := event.DefaultStatus
		ec.mutation.SetStatus(v)
	}
	if _, ok := ec.mutation.IsPublic(); !ok {
		v := event.DefaultIsPublic
		ec.mutation.SetIsPublic(v)
	}
	if _, ok := ec.mutation.IsPaid(); !ok {
		v := event.DefaultIsPaid
		ec.mutation.SetIsPaid(v)
	}
	if _, ok := ec.mutation.MaxParticipants(); !ok {
		v := event.DefaultMaxParticipants
		ec.mutation.SetMaxParticipants(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ec *EventCreate) check() error {
	if _, ok := ec.mutation.CreateTime(); !ok {
		return &ValidationError{Name: "create_time", err: errors.New(`ent: missing required field "Event.create_time"`)}
	}
	if _, ok := ec.mutation.UpdateTime(); !ok {
		return &ValidationError{Name: "update_time", err: errors.New(`ent: missing required field "Event.update_time"`)}
	}
	if _, ok := ec.mutation.UUID(); !ok {
		return &ValidationError{Name: "uuid", err: errors.New(`ent: missing required field "Event.uuid"`)}
	}
	if _, ok := ec.mutation.Title(); !ok {
		return &ValidationError{Name: "title", err: errors.New(`ent: missing required field "Event.title"`)}
	}
	if v, ok := ec.mutation.Title(); ok {
		if err := event.TitleValidator(v); err != nil {
			return &ValidationError{Name: "title", err: fmt.Errorf(`ent: validator failed for field "Event.title": %w`, err)}
		}
	}
	if _, ok := ec.mutation.Description(); !ok {
		return &ValidationError{Name: "description", err: errors.New(`ent: missing required field "Event.description"`)}
	}
	if v, ok := ec.mutation.Description(); ok {
		if err := event.DescriptionValidator(v); err != nil {
			return &ValidationError{Name: "description", err: fmt.Errorf(`ent: validator failed for field "Event.description": %w`, err)}
		}
	}
	if _, ok := ec.mutation.StartDate(); !ok {
		return &ValidationError{Name: "start_date", err: errors.New(`ent: missing required field "Event.start_date"`)}
	}
	if _, ok := ec.mutation.EndDate(); !ok {
		return &ValidationError{Name: "end_date", err: errors.New(`ent: missing required field "Event.end_date"`)}
	}
	if _, ok := ec.mutation.EventType(); !ok {
		return &ValidationError{Name: "event_type", err: errors.New(`ent: missing required field "Event.event_type"`)}
	}
	if v, ok := ec.mutation.EventType(); ok {
		if err := event.EventTypeValidator(v); err != nil {
			return &ValidationError{Name: "event_type", err: fmt.Errorf(`ent: validator failed for field "Event.event_type": %w`, err)}
		}
	}
	if _, ok := ec.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`ent: missing required field "Event.status"`)}
	}
	if v, ok := ec.mutation.Status(); ok {
		if err := event.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "Event.status": %w`, err)}
		}
	}
	if _, ok := ec.mutation.IsPublic(); !ok {
		return &ValidationError{Name: "is_public", err: errors.New(`ent: missing required field "Event.is_public"`)}
	}
	if _, ok := ec.mutation.IsPaid(); !ok {
		return &ValidationError{Name: "is_paid", err: errors.New(`ent: missing required field "Event.is_paid"`)}
	}
	if _, ok := ec.mutation.MaxParticipants(); !ok {
		return &ValidationError{Name: "max_participants", err: errors.New(`ent: missing required field "Event.max_participants"`)}
	}
	if _, ok := ec.mutation.OrganizerID(); !ok {
		return &ValidationError{Name: "organizer_id", err: errors.New(`ent: missing required field "Event.organizer_id"`)}
	}
	if len(ec.mutation.UserIDs()) == 0 {
		return &ValidationError{Name: "user", err: errors.New(`ent: missing required edge "Event.user"`)}
	}
	return nil
}

func (ec *EventCreate) sqlSave(ctx context.Context) (*Event, error) {
	if err := ec.check(); err != nil {
		return nil, err
	}
	_node, _spec := ec.createSpec()
	if err := sqlgraph.CreateNode(ctx, ec.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	ec.mutation.id = &_node.ID
	ec.mutation.done = true
	return _node, nil
}

func (ec *EventCreate) createSpec() (*Event, *sqlgraph.CreateSpec) {
	var (
		_node = &Event{config: ec.config}
		_spec = sqlgraph.NewCreateSpec(event.Table, sqlgraph.NewFieldSpec(event.FieldID, field.TypeInt))
	)
	_spec.OnConflict = ec.conflict
	if value, ok := ec.mutation.CreateTime(); ok {
		_spec.SetField(event.FieldCreateTime, field.TypeTime, value)
		_node.CreateTime = value
	}
	if value, ok := ec.mutation.UpdateTime(); ok {
		_spec.SetField(event.FieldUpdateTime, field.TypeTime, value)
		_node.UpdateTime = value
	}
	if value, ok := ec.mutation.UUID(); ok {
		_spec.SetField(event.FieldUUID, field.TypeUUID, value)
		_node.UUID = value
	}
	if value, ok := ec.mutation.Title(); ok {
		_spec.SetField(event.FieldTitle, field.TypeString, value)
		_node.Title = value
	}
	if value, ok := ec.mutation.Description(); ok {
		_spec.SetField(event.FieldDescription, field.TypeString, value)
		_node.Description = value
	}
	if value, ok := ec.mutation.StartDate(); ok {
		_spec.SetField(event.FieldStartDate, field.TypeTime, value)
		_node.StartDate = value
	}
	if value, ok := ec.mutation.EndDate(); ok {
		_spec.SetField(event.FieldEndDate, field.TypeTime, value)
		_node.EndDate = value
	}
	if value, ok := ec.mutation.EventType(); ok {
		_spec.SetField(event.FieldEventType, field.TypeString, value)
		_node.EventType = value
	}
	if value, ok := ec.mutation.Status(); ok {
		_spec.SetField(event.FieldStatus, field.TypeEnum, value)
		_node.Status = value
	}
	if value, ok := ec.mutation.IsPublic(); ok {
		_spec.SetField(event.FieldIsPublic, field.TypeBool, value)
		_node.IsPublic = value
	}
	if value, ok := ec.mutation.IsPaid(); ok {
		_spec.SetField(event.FieldIsPaid, field.TypeBool, value)
		_node.IsPaid = value
	}
	if value, ok := ec.mutation.MaxParticipants(); ok {
		_spec.SetField(event.FieldMaxParticipants, field.TypeInt, value)
		_node.MaxParticipants = value
	}
	if value, ok := ec.mutation.RegistrationDeadline(); ok {
		_spec.SetField(event.FieldRegistrationDeadline, field.TypeTime, value)
		_node.RegistrationDeadline = &value
	}
	if value, ok := ec.mutation.CoverPhotoID(); ok {
		_spec.SetField(event.FieldCoverPhotoID, field.TypeString, value)
		_node.CoverPhotoID = &value
	}
	if nodes := ec.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   event.UserTable,
			Columns: []string{event.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.OrganizerID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ec.mutation.LocationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   event.LocationTable,
			Columns: []string{event.LocationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(location.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.LocationID = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ec.mutation.GuestIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   event.GuestTable,
			Columns: []string{event.GuestColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ec.mutation.TicketIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   event.TicketTable,
			Columns: []string{event.TicketColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(ticket.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Event.Create().
//		SetCreateTime(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.EventUpsert) {
//			SetCreateTime(v+v).
//		}).
//		Exec(ctx)
func (ec *EventCreate) OnConflict(opts ...sql.ConflictOption) *EventUpsertOne {
	ec.conflict = opts
	return &EventUpsertOne{
		create: ec,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Event.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (ec *EventCreate) OnConflictColumns(columns ...string) *EventUpsertOne {
	ec.conflict = append(ec.conflict, sql.ConflictColumns(columns...))
	return &EventUpsertOne{
		create: ec,
	}
}

type (
	// EventUpsertOne is the builder for "upsert"-ing
	//  one Event node.
	EventUpsertOne struct {
		create *EventCreate
	}

	// EventUpsert is the "OnConflict" setter.
	EventUpsert struct {
		*sql.UpdateSet
	}
)

// SetUpdateTime sets the "update_time" field.
func (u *EventUpsert) SetUpdateTime(v time.Time) *EventUpsert {
	u.Set(event.FieldUpdateTime, v)
	return u
}

// UpdateUpdateTime sets the "update_time" field to the value that was provided on create.
func (u *EventUpsert) UpdateUpdateTime() *EventUpsert {
	u.SetExcluded(event.FieldUpdateTime)
	return u
}

// SetTitle sets the "title" field.
func (u *EventUpsert) SetTitle(v string) *EventUpsert {
	u.Set(event.FieldTitle, v)
	return u
}

// UpdateTitle sets the "title" field to the value that was provided on create.
func (u *EventUpsert) UpdateTitle() *EventUpsert {
	u.SetExcluded(event.FieldTitle)
	return u
}

// SetDescription sets the "description" field.
func (u *EventUpsert) SetDescription(v string) *EventUpsert {
	u.Set(event.FieldDescription, v)
	return u
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *EventUpsert) UpdateDescription() *EventUpsert {
	u.SetExcluded(event.FieldDescription)
	return u
}

// SetStartDate sets the "start_date" field.
func (u *EventUpsert) SetStartDate(v time.Time) *EventUpsert {
	u.Set(event.FieldStartDate, v)
	return u
}

// UpdateStartDate sets the "start_date" field to the value that was provided on create.
func (u *EventUpsert) UpdateStartDate() *EventUpsert {
	u.SetExcluded(event.FieldStartDate)
	return u
}

// SetEndDate sets the "end_date" field.
func (u *EventUpsert) SetEndDate(v time.Time) *EventUpsert {
	u.Set(event.FieldEndDate, v)
	return u
}

// UpdateEndDate sets the "end_date" field to the value that was provided on create.
func (u *EventUpsert) UpdateEndDate() *EventUpsert {
	u.SetExcluded(event.FieldEndDate)
	return u
}

// SetEventType sets the "event_type" field.
func (u *EventUpsert) SetEventType(v string) *EventUpsert {
	u.Set(event.FieldEventType, v)
	return u
}

// UpdateEventType sets the "event_type" field to the value that was provided on create.
func (u *EventUpsert) UpdateEventType() *EventUpsert {
	u.SetExcluded(event.FieldEventType)
	return u
}

// SetStatus sets the "status" field.
func (u *EventUpsert) SetStatus(v event.Status) *EventUpsert {
	u.Set(event.FieldStatus, v)
	return u
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *EventUpsert) UpdateStatus() *EventUpsert {
	u.SetExcluded(event.FieldStatus)
	return u
}

// SetIsPublic sets the "is_public" field.
func (u *EventUpsert) SetIsPublic(v bool) *EventUpsert {
	u.Set(event.FieldIsPublic, v)
	return u
}

// UpdateIsPublic sets the "is_public" field to the value that was provided on create.
func (u *EventUpsert) UpdateIsPublic() *EventUpsert {
	u.SetExcluded(event.FieldIsPublic)
	return u
}

// SetIsPaid sets the "is_paid" field.
func (u *EventUpsert) SetIsPaid(v bool) *EventUpsert {
	u.Set(event.FieldIsPaid, v)
	return u
}

// UpdateIsPaid sets the "is_paid" field to the value that was provided on create.
func (u *EventUpsert) UpdateIsPaid() *EventUpsert {
	u.SetExcluded(event.FieldIsPaid)
	return u
}

// SetMaxParticipants sets the "max_participants" field.
func (u *EventUpsert) SetMaxParticipants(v int) *EventUpsert {
	u.Set(event.FieldMaxParticipants, v)
	return u
}

// UpdateMaxParticipants sets the "max_participants" field to the value that was provided on create.
func (u *EventUpsert) UpdateMaxParticipants() *EventUpsert {
	u.SetExcluded(event.FieldMaxParticipants)
	return u
}

// AddMaxParticipants adds v to the "max_participants" field.
func (u *EventUpsert) AddMaxParticipants(v int) *EventUpsert {
	u.Add(event.FieldMaxParticipants, v)
	return u
}

// SetRegistrationDeadline sets the "registration_deadline" field.
func (u *EventUpsert) SetRegistrationDeadline(v time.Time) *EventUpsert {
	u.Set(event.FieldRegistrationDeadline, v)
	return u
}

// UpdateRegistrationDeadline sets the "registration_deadline" field to the value that was provided on create.
func (u *EventUpsert) UpdateRegistrationDeadline() *EventUpsert {
	u.SetExcluded(event.FieldRegistrationDeadline)
	return u
}

// ClearRegistrationDeadline clears the value of the "registration_deadline" field.
func (u *EventUpsert) ClearRegistrationDeadline() *EventUpsert {
	u.SetNull(event.FieldRegistrationDeadline)
	return u
}

// SetCoverPhotoID sets the "cover_photo_id" field.
func (u *EventUpsert) SetCoverPhotoID(v string) *EventUpsert {
	u.Set(event.FieldCoverPhotoID, v)
	return u
}

// UpdateCoverPhotoID sets the "cover_photo_id" field to the value that was provided on create.
func (u *EventUpsert) UpdateCoverPhotoID() *EventUpsert {
	u.SetExcluded(event.FieldCoverPhotoID)
	return u
}

// ClearCoverPhotoID clears the value of the "cover_photo_id" field.
func (u *EventUpsert) ClearCoverPhotoID() *EventUpsert {
	u.SetNull(event.FieldCoverPhotoID)
	return u
}

// SetOrganizerID sets the "organizer_id" field.
func (u *EventUpsert) SetOrganizerID(v int) *EventUpsert {
	u.Set(event.FieldOrganizerID, v)
	return u
}

// UpdateOrganizerID sets the "organizer_id" field to the value that was provided on create.
func (u *EventUpsert) UpdateOrganizerID() *EventUpsert {
	u.SetExcluded(event.FieldOrganizerID)
	return u
}

// SetLocationID sets the "location_id" field.
func (u *EventUpsert) SetLocationID(v int) *EventUpsert {
	u.Set(event.FieldLocationID, v)
	return u
}

// UpdateLocationID sets the "location_id" field to the value that was provided on create.
func (u *EventUpsert) UpdateLocationID() *EventUpsert {
	u.SetExcluded(event.FieldLocationID)
	return u
}

// ClearLocationID clears the value of the "location_id" field.
func (u *EventUpsert) ClearLocationID() *EventUpsert {
	u.SetNull(event.FieldLocationID)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.Event.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *EventUpsertOne) UpdateNewValues() *EventUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.CreateTime(); exists {
			s.SetIgnore(event.FieldCreateTime)
		}
		if _, exists := u.create.mutation.UUID(); exists {
			s.SetIgnore(event.FieldUUID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Event.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *EventUpsertOne) Ignore() *EventUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *EventUpsertOne) DoNothing() *EventUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the EventCreate.OnConflict
// documentation for more info.
func (u *EventUpsertOne) Update(set func(*EventUpsert)) *EventUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&EventUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdateTime sets the "update_time" field.
func (u *EventUpsertOne) SetUpdateTime(v time.Time) *EventUpsertOne {
	return u.Update(func(s *EventUpsert) {
		s.SetUpdateTime(v)
	})
}

// UpdateUpdateTime sets the "update_time" field to the value that was provided on create.
func (u *EventUpsertOne) UpdateUpdateTime() *EventUpsertOne {
	return u.Update(func(s *EventUpsert) {
		s.UpdateUpdateTime()
	})
}

// SetTitle sets the "title" field.
func (u *EventUpsertOne) SetTitle(v string) *EventUpsertOne {
	return u.Update(func(s *EventUpsert) {
		s.SetTitle(v)
	})
}

// UpdateTitle sets the "title" field to the value that was provided on create.
func (u *EventUpsertOne) UpdateTitle() *EventUpsertOne {
	return u.Update(func(s *EventUpsert) {
		s.UpdateTitle()
	})
}

// SetDescription sets the "description" field.
func (u *EventUpsertOne) SetDescription(v string) *EventUpsertOne {
	return u.Update(func(s *EventUpsert) {
		s.SetDescription(v)
	})
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *EventUpsertOne) UpdateDescription() *EventUpsertOne {
	return u.Update(func(s *EventUpsert) {
		s.UpdateDescription()
	})
}

// SetStartDate sets the "start_date" field.
func (u *EventUpsertOne) SetStartDate(v time.Time) *EventUpsertOne {
	return u.Update(func(s *EventUpsert) {
		s.SetStartDate(v)
	})
}

// UpdateStartDate sets the "start_date" field to the value that was provided on create.
func (u *EventUpsertOne) UpdateStartDate() *EventUpsertOne {
	return u.Update(func(s *EventUpsert) {
		s.UpdateStartDate()
	})
}

// SetEndDate sets the "end_date" field.
func (u *EventUpsertOne) SetEndDate(v time.Time) *EventUpsertOne {
	return u.Update(func(s *EventUpsert) {
		s.SetEndDate(v)
	})
}

// UpdateEndDate sets the "end_date" field to the value that was provided on create.
func (u *EventUpsertOne) UpdateEndDate() *EventUpsertOne {
	return u.Update(func(s *EventUpsert) {
		s.UpdateEndDate()
	})
}

// SetEventType sets the "event_type" field.
func (u *EventUpsertOne) SetEventType(v string) *EventUpsertOne {
	return u.Update(func(s *EventUpsert) {
		s.SetEventType(v)
	})
}

// UpdateEventType sets the "event_type" field to the value that was provided on create.
func (u *EventUpsertOne) UpdateEventType() *EventUpsertOne {
	return u.Update(func(s *EventUpsert) {
		s.UpdateEventType()
	})
}

// SetStatus sets the "status" field.
func (u *EventUpsertOne) SetStatus(v event.Status) *EventUpsertOne {
	return u.Update(func(s *EventUpsert) {
		s.SetStatus(v)
	})
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *EventUpsertOne) UpdateStatus() *EventUpsertOne {
	return u.Update(func(s *EventUpsert) {
		s.UpdateStatus()
	})
}

// SetIsPublic sets the "is_public" field.
func (u *EventUpsertOne) SetIsPublic(v bool) *EventUpsertOne {
	return u.Update(func(s *EventUpsert) {
		s.SetIsPublic(v)
	})
}

// UpdateIsPublic sets the "is_public" field to the value that was provided on create.
func (u *EventUpsertOne) UpdateIsPublic() *EventUpsertOne {
	return u.Update(func(s *EventUpsert) {
		s.UpdateIsPublic()
	})
}

// SetIsPaid sets the "is_paid" field.
func (u *EventUpsertOne) SetIsPaid(v bool) *EventUpsertOne {
	return u.Update(func(s *EventUpsert) {
		s.SetIsPaid(v)
	})
}

// UpdateIsPaid sets the "is_paid" field to the value that was provided on create.
func (u *EventUpsertOne) UpdateIsPaid() *EventUpsertOne {
	return u.Update(func(s *EventUpsert) {
		s.UpdateIsPaid()
	})
}

// SetMaxParticipants sets the "max_participants" field.
func (u *EventUpsertOne) SetMaxParticipants(v int) *EventUpsertOne {
	return u.Update(func(s *EventUpsert) {
		s.SetMaxParticipants(v)
	})
}

// AddMaxParticipants adds v to the "max_participants" field.
func (u *EventUpsertOne) AddMaxParticipants(v int) *EventUpsertOne {
	return u.Update(func(s *EventUpsert) {
		s.AddMaxParticipants(v)
	})
}

// UpdateMaxParticipants sets the "max_participants" field to the value that was provided on create.
func (u *EventUpsertOne) UpdateMaxParticipants() *EventUpsertOne {
	return u.Update(func(s *EventUpsert) {
		s.UpdateMaxParticipants()
	})
}

// SetRegistrationDeadline sets the "registration_deadline" field.
func (u *EventUpsertOne) SetRegistrationDeadline(v time.Time) *EventUpsertOne {
	return u.Update(func(s *EventUpsert) {
		s.SetRegistrationDeadline(v)
	})
}

// UpdateRegistrationDeadline sets the "registration_deadline" field to the value that was provided on create.
func (u *EventUpsertOne) UpdateRegistrationDeadline() *EventUpsertOne {
	return u.Update(func(s *EventUpsert) {
		s.UpdateRegistrationDeadline()
	})
}

// ClearRegistrationDeadline clears the value of the "registration_deadline" field.
func (u *EventUpsertOne) ClearRegistrationDeadline() *EventUpsertOne {
	return u.Update(func(s *EventUpsert) {
		s.ClearRegistrationDeadline()
	})
}

// SetCoverPhotoID sets the "cover_photo_id" field.
func (u *EventUpsertOne) SetCoverPhotoID(v string) *EventUpsertOne {
	return u.Update(func(s *EventUpsert) {
		s.SetCoverPhotoID(v)
	})
}

// UpdateCoverPhotoID sets the "cover_photo_id" field to the value that was provided on create.
func (u *EventUpsertOne) UpdateCoverPhotoID() *EventUpsertOne {
	return u.Update(func(s *EventUpsert) {
		s.UpdateCoverPhotoID()
	})
}

// ClearCoverPhotoID clears the value of the "cover_photo_id" field.
func (u *EventUpsertOne) ClearCoverPhotoID() *EventUpsertOne {
	return u.Update(func(s *EventUpsert) {
		s.ClearCoverPhotoID()
	})
}

// SetOrganizerID sets the "organizer_id" field.
func (u *EventUpsertOne) SetOrganizerID(v int) *EventUpsertOne {
	return u.Update(func(s *EventUpsert) {
		s.SetOrganizerID(v)
	})
}

// UpdateOrganizerID sets the "organizer_id" field to the value that was provided on create.
func (u *EventUpsertOne) UpdateOrganizerID() *EventUpsertOne {
	return u.Update(func(s *EventUpsert) {
		s.UpdateOrganizerID()
	})
}

// SetLocationID sets the "location_id" field.
func (u *EventUpsertOne) SetLocationID(v int) *EventUpsertOne {
	return u.Update(func(s *EventUpsert) {
		s.SetLocationID(v)
	})
}

// UpdateLocationID sets the "location_id" field to the value that was provided on create.
func (u *EventUpsertOne) UpdateLocationID() *EventUpsertOne {
	return u.Update(func(s *EventUpsert) {
		s.UpdateLocationID()
	})
}

// ClearLocationID clears the value of the "location_id" field.
func (u *EventUpsertOne) ClearLocationID() *EventUpsertOne {
	return u.Update(func(s *EventUpsert) {
		s.ClearLocationID()
	})
}

// Exec executes the query.
func (u *EventUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for EventCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *EventUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *EventUpsertOne) ID(ctx context.Context) (id int, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *EventUpsertOne) IDX(ctx context.Context) int {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// EventCreateBulk is the builder for creating many Event entities in bulk.
type EventCreateBulk struct {
	config
	err      error
	builders []*EventCreate
	conflict []sql.ConflictOption
}

// Save creates the Event entities in the database.
func (ecb *EventCreateBulk) Save(ctx context.Context) ([]*Event, error) {
	if ecb.err != nil {
		return nil, ecb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(ecb.builders))
	nodes := make([]*Event, len(ecb.builders))
	mutators := make([]Mutator, len(ecb.builders))
	for i := range ecb.builders {
		func(i int, root context.Context) {
			builder := ecb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*EventMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ecb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = ecb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ecb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ecb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ecb *EventCreateBulk) SaveX(ctx context.Context) []*Event {
	v, err := ecb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ecb *EventCreateBulk) Exec(ctx context.Context) error {
	_, err := ecb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ecb *EventCreateBulk) ExecX(ctx context.Context) {
	if err := ecb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Event.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.EventUpsert) {
//			SetCreateTime(v+v).
//		}).
//		Exec(ctx)
func (ecb *EventCreateBulk) OnConflict(opts ...sql.ConflictOption) *EventUpsertBulk {
	ecb.conflict = opts
	return &EventUpsertBulk{
		create: ecb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Event.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (ecb *EventCreateBulk) OnConflictColumns(columns ...string) *EventUpsertBulk {
	ecb.conflict = append(ecb.conflict, sql.ConflictColumns(columns...))
	return &EventUpsertBulk{
		create: ecb,
	}
}

// EventUpsertBulk is the builder for "upsert"-ing
// a bulk of Event nodes.
type EventUpsertBulk struct {
	create *EventCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Event.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *EventUpsertBulk) UpdateNewValues() *EventUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.CreateTime(); exists {
				s.SetIgnore(event.FieldCreateTime)
			}
			if _, exists := b.mutation.UUID(); exists {
				s.SetIgnore(event.FieldUUID)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Event.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *EventUpsertBulk) Ignore() *EventUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *EventUpsertBulk) DoNothing() *EventUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the EventCreateBulk.OnConflict
// documentation for more info.
func (u *EventUpsertBulk) Update(set func(*EventUpsert)) *EventUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&EventUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdateTime sets the "update_time" field.
func (u *EventUpsertBulk) SetUpdateTime(v time.Time) *EventUpsertBulk {
	return u.Update(func(s *EventUpsert) {
		s.SetUpdateTime(v)
	})
}

// UpdateUpdateTime sets the "update_time" field to the value that was provided on create.
func (u *EventUpsertBulk) UpdateUpdateTime() *EventUpsertBulk {
	return u.Update(func(s *EventUpsert) {
		s.UpdateUpdateTime()
	})
}

// SetTitle sets the "title" field.
func (u *EventUpsertBulk) SetTitle(v string) *EventUpsertBulk {
	return u.Update(func(s *EventUpsert) {
		s.SetTitle(v)
	})
}

// UpdateTitle sets the "title" field to the value that was provided on create.
func (u *EventUpsertBulk) UpdateTitle() *EventUpsertBulk {
	return u.Update(func(s *EventUpsert) {
		s.UpdateTitle()
	})
}

// SetDescription sets the "description" field.
func (u *EventUpsertBulk) SetDescription(v string) *EventUpsertBulk {
	return u.Update(func(s *EventUpsert) {
		s.SetDescription(v)
	})
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *EventUpsertBulk) UpdateDescription() *EventUpsertBulk {
	return u.Update(func(s *EventUpsert) {
		s.UpdateDescription()
	})
}

// SetStartDate sets the "start_date" field.
func (u *EventUpsertBulk) SetStartDate(v time.Time) *EventUpsertBulk {
	return u.Update(func(s *EventUpsert) {
		s.SetStartDate(v)
	})
}

// UpdateStartDate sets the "start_date" field to the value that was provided on create.
func (u *EventUpsertBulk) UpdateStartDate() *EventUpsertBulk {
	return u.Update(func(s *EventUpsert) {
		s.UpdateStartDate()
	})
}

// SetEndDate sets the "end_date" field.
func (u *EventUpsertBulk) SetEndDate(v time.Time) *EventUpsertBulk {
	return u.Update(func(s *EventUpsert) {
		s.SetEndDate(v)
	})
}

// UpdateEndDate sets the "end_date" field to the value that was provided on create.
func (u *EventUpsertBulk) UpdateEndDate() *EventUpsertBulk {
	return u.Update(func(s *EventUpsert) {
		s.UpdateEndDate()
	})
}

// SetEventType sets the "event_type" field.
func (u *EventUpsertBulk) SetEventType(v string) *EventUpsertBulk {
	return u.Update(func(s *EventUpsert) {
		s.SetEventType(v)
	})
}

// UpdateEventType sets the "event_type" field to the value that was provided on create.
func (u *EventUpsertBulk) UpdateEventType() *EventUpsertBulk {
	return u.Update(func(s *EventUpsert) {
		s.UpdateEventType()
	})
}

// SetStatus sets the "status" field.
func (u *EventUpsertBulk) SetStatus(v event.Status) *EventUpsertBulk {
	return u.Update(func(s *EventUpsert) {
		s.SetStatus(v)
	})
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *EventUpsertBulk) UpdateStatus() *EventUpsertBulk {
	return u.Update(func(s *EventUpsert) {
		s.UpdateStatus()
	})
}

// SetIsPublic sets the "is_public" field.
func (u *EventUpsertBulk) SetIsPublic(v bool) *EventUpsertBulk {
	return u.Update(func(s *EventUpsert) {
		s.SetIsPublic(v)
	})
}

// UpdateIsPublic sets the "is_public" field to the value that was provided on create.
func (u *EventUpsertBulk) UpdateIsPublic() *EventUpsertBulk {
	return u.Update(func(s *EventUpsert) {
		s.UpdateIsPublic()
	})
}

// SetIsPaid sets the "is_paid" field.
func (u *EventUpsertBulk) SetIsPaid(v bool) *EventUpsertBulk {
	return u.Update(func(s *EventUpsert) {
		s.SetIsPaid(v)
	})
}

// UpdateIsPaid sets the "is_paid" field to the value that was provided on create.
func (u *EventUpsertBulk) UpdateIsPaid() *EventUpsertBulk {
	return u.Update(func(s *EventUpsert) {
		s.UpdateIsPaid()
	})
}

// SetMaxParticipants sets the "max_participants" field.
func (u *EventUpsertBulk) SetMaxParticipants(v int) *EventUpsertBulk {
	return u.Update(func(s *EventUpsert) {
		s.SetMaxParticipants(v)
	})
}

// AddMaxParticipants adds v to the "max_participants" field.
func (u *EventUpsertBulk) AddMaxParticipants(v int) *EventUpsertBulk {
	return u.Update(func(s *EventUpsert) {
		s.AddMaxParticipants(v)
	})
}

// UpdateMaxParticipants sets the "max_participants" field to the value that was provided on create.
func (u *EventUpsertBulk) UpdateMaxParticipants() *EventUpsertBulk {
	return u.Update(func(s *EventUpsert) {
		s.UpdateMaxParticipants()
	})
}

// SetRegistrationDeadline sets the "registration_deadline" field.
func (u *EventUpsertBulk) SetRegistrationDeadline(v time.Time) *EventUpsertBulk {
	return u.Update(func(s *EventUpsert) {
		s.SetRegistrationDeadline(v)
	})
}

// UpdateRegistrationDeadline sets the "registration_deadline" field to the value that was provided on create.
func (u *EventUpsertBulk) UpdateRegistrationDeadline() *EventUpsertBulk {
	return u.Update(func(s *EventUpsert) {
		s.UpdateRegistrationDeadline()
	})
}

// ClearRegistrationDeadline clears the value of the "registration_deadline" field.
func (u *EventUpsertBulk) ClearRegistrationDeadline() *EventUpsertBulk {
	return u.Update(func(s *EventUpsert) {
		s.ClearRegistrationDeadline()
	})
}

// SetCoverPhotoID sets the "cover_photo_id" field.
func (u *EventUpsertBulk) SetCoverPhotoID(v string) *EventUpsertBulk {
	return u.Update(func(s *EventUpsert) {
		s.SetCoverPhotoID(v)
	})
}

// UpdateCoverPhotoID sets the "cover_photo_id" field to the value that was provided on create.
func (u *EventUpsertBulk) UpdateCoverPhotoID() *EventUpsertBulk {
	return u.Update(func(s *EventUpsert) {
		s.UpdateCoverPhotoID()
	})
}

// ClearCoverPhotoID clears the value of the "cover_photo_id" field.
func (u *EventUpsertBulk) ClearCoverPhotoID() *EventUpsertBulk {
	return u.Update(func(s *EventUpsert) {
		s.ClearCoverPhotoID()
	})
}

// SetOrganizerID sets the "organizer_id" field.
func (u *EventUpsertBulk) SetOrganizerID(v int) *EventUpsertBulk {
	return u.Update(func(s *EventUpsert) {
		s.SetOrganizerID(v)
	})
}

// UpdateOrganizerID sets the "organizer_id" field to the value that was provided on create.
func (u *EventUpsertBulk) UpdateOrganizerID() *EventUpsertBulk {
	return u.Update(func(s *EventUpsert) {
		s.UpdateOrganizerID()
	})
}

// SetLocationID sets the "location_id" field.
func (u *EventUpsertBulk) SetLocationID(v int) *EventUpsertBulk {
	return u.Update(func(s *EventUpsert) {
		s.SetLocationID(v)
	})
}

// UpdateLocationID sets the "location_id" field to the value that was provided on create.
func (u *EventUpsertBulk) UpdateLocationID() *EventUpsertBulk {
	return u.Update(func(s *EventUpsert) {
		s.UpdateLocationID()
	})
}

// ClearLocationID clears the value of the "location_id" field.
func (u *EventUpsertBulk) ClearLocationID() *EventUpsertBulk {
	return u.Update(func(s *EventUpsert) {
		s.ClearLocationID()
	})
}

// Exec executes the query.
func (u *EventUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the EventCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for EventCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *EventUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
