// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
	"github.com/kayceeDev/caspa-events/ent-go/ent/event"
	"github.com/kayceeDev/caspa-events/ent-go/ent/location"
	"github.com/kayceeDev/caspa-events/ent-go/ent/user"
)

// Event is the model entity for the Event schema.
type Event struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// CreateTime holds the value of the "create_time" field.
	CreateTime time.Time `json:"create_time,omitempty"`
	// UpdateTime holds the value of the "update_time" field.
	UpdateTime time.Time `json:"update_time,omitempty"`
	// UUID holds the value of the "uuid" field.
	UUID uuid.UUID `json:"uuid"`
	// Title holds the value of the "title" field.
	Title string `json:"title"`
	// Description holds the value of the "description" field.
	Description string `json:"description"`
	// StartDate holds the value of the "start_date" field.
	StartDate time.Time `json:"start_date"`
	// EndDate holds the value of the "end_date" field.
	EndDate time.Time `json:"end_date"`
	// EventType holds the value of the "event_type" field.
	EventType string `json:"event_type"`
	// Status holds the value of the "status" field.
	Status event.Status `json:"status"`
	// IsPublic holds the value of the "is_public" field.
	IsPublic bool `json:"is_public"`
	// IsPaid holds the value of the "is_paid" field.
	IsPaid bool `json:"is_paid"`
	// MaxParticipants holds the value of the "max_participants" field.
	MaxParticipants int `json:"max_participants"`
	// RegistrationDeadline holds the value of the "registration_deadline" field.
	RegistrationDeadline *time.Time `json:"registration_deadline"`
	// CoverPhotoID holds the value of the "cover_photo_id" field.
	CoverPhotoID *string `json:"cover_photo_id"`
	// OrganizerID holds the value of the "organizer_id" field.
	OrganizerID int `json:"organizer_id"`
	// LocationID holds the value of the "location_id" field.
	LocationID *int `json:"location_id"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the EventQuery when eager-loading is set.
	Edges        EventEdges `json:"edges"`
	selectValues sql.SelectValues
}

// EventEdges holds the relations/edges for other nodes in the graph.
type EventEdges struct {
	// User holds the value of the user edge.
	User *User `json:"user,omitempty"`
	// Location holds the value of the location edge.
	Location *Location `json:"location,omitempty"`
	// Guest holds the value of the guest edge.
	Guest []*User `json:"guest,omitempty"`
	// Ticket holds the value of the ticket edge.
	Ticket []*Ticket `json:"tickets"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [4]bool
}

// UserOrErr returns the User value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e EventEdges) UserOrErr() (*User, error) {
	if e.User != nil {
		return e.User, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: user.Label}
	}
	return nil, &NotLoadedError{edge: "user"}
}

// LocationOrErr returns the Location value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e EventEdges) LocationOrErr() (*Location, error) {
	if e.Location != nil {
		return e.Location, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: location.Label}
	}
	return nil, &NotLoadedError{edge: "location"}
}

// GuestOrErr returns the Guest value or an error if the edge
// was not loaded in eager-loading.
func (e EventEdges) GuestOrErr() ([]*User, error) {
	if e.loadedTypes[2] {
		return e.Guest, nil
	}
	return nil, &NotLoadedError{edge: "guest"}
}

// TicketOrErr returns the Ticket value or an error if the edge
// was not loaded in eager-loading.
func (e EventEdges) TicketOrErr() ([]*Ticket, error) {
	if e.loadedTypes[3] {
		return e.Ticket, nil
	}
	return nil, &NotLoadedError{edge: "ticket"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Event) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case event.FieldIsPublic, event.FieldIsPaid:
			values[i] = new(sql.NullBool)
		case event.FieldID, event.FieldMaxParticipants, event.FieldOrganizerID, event.FieldLocationID:
			values[i] = new(sql.NullInt64)
		case event.FieldTitle, event.FieldDescription, event.FieldEventType, event.FieldStatus, event.FieldCoverPhotoID:
			values[i] = new(sql.NullString)
		case event.FieldCreateTime, event.FieldUpdateTime, event.FieldStartDate, event.FieldEndDate, event.FieldRegistrationDeadline:
			values[i] = new(sql.NullTime)
		case event.FieldUUID:
			values[i] = new(uuid.UUID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Event fields.
func (e *Event) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case event.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			e.ID = int(value.Int64)
		case event.FieldCreateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field create_time", values[i])
			} else if value.Valid {
				e.CreateTime = value.Time
			}
		case event.FieldUpdateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field update_time", values[i])
			} else if value.Valid {
				e.UpdateTime = value.Time
			}
		case event.FieldUUID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field uuid", values[i])
			} else if value != nil {
				e.UUID = *value
			}
		case event.FieldTitle:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field title", values[i])
			} else if value.Valid {
				e.Title = value.String
			}
		case event.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				e.Description = value.String
			}
		case event.FieldStartDate:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field start_date", values[i])
			} else if value.Valid {
				e.StartDate = value.Time
			}
		case event.FieldEndDate:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field end_date", values[i])
			} else if value.Valid {
				e.EndDate = value.Time
			}
		case event.FieldEventType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field event_type", values[i])
			} else if value.Valid {
				e.EventType = value.String
			}
		case event.FieldStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				e.Status = event.Status(value.String)
			}
		case event.FieldIsPublic:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field is_public", values[i])
			} else if value.Valid {
				e.IsPublic = value.Bool
			}
		case event.FieldIsPaid:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field is_paid", values[i])
			} else if value.Valid {
				e.IsPaid = value.Bool
			}
		case event.FieldMaxParticipants:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field max_participants", values[i])
			} else if value.Valid {
				e.MaxParticipants = int(value.Int64)
			}
		case event.FieldRegistrationDeadline:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field registration_deadline", values[i])
			} else if value.Valid {
				e.RegistrationDeadline = new(time.Time)
				*e.RegistrationDeadline = value.Time
			}
		case event.FieldCoverPhotoID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field cover_photo_id", values[i])
			} else if value.Valid {
				e.CoverPhotoID = new(string)
				*e.CoverPhotoID = value.String
			}
		case event.FieldOrganizerID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field organizer_id", values[i])
			} else if value.Valid {
				e.OrganizerID = int(value.Int64)
			}
		case event.FieldLocationID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field location_id", values[i])
			} else if value.Valid {
				e.LocationID = new(int)
				*e.LocationID = int(value.Int64)
			}
		default:
			e.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Event.
// This includes values selected through modifiers, order, etc.
func (e *Event) Value(name string) (ent.Value, error) {
	return e.selectValues.Get(name)
}

// QueryUser queries the "user" edge of the Event entity.
func (e *Event) QueryUser() *UserQuery {
	return NewEventClient(e.config).QueryUser(e)
}

// QueryLocation queries the "location" edge of the Event entity.
func (e *Event) QueryLocation() *LocationQuery {
	return NewEventClient(e.config).QueryLocation(e)
}

// QueryGuest queries the "guest" edge of the Event entity.
func (e *Event) QueryGuest() *UserQuery {
	return NewEventClient(e.config).QueryGuest(e)
}

// QueryTicket queries the "ticket" edge of the Event entity.
func (e *Event) QueryTicket() *TicketQuery {
	return NewEventClient(e.config).QueryTicket(e)
}

// Update returns a builder for updating this Event.
// Note that you need to call Event.Unwrap() before calling this method if this Event
// was returned from a transaction, and the transaction was committed or rolled back.
func (e *Event) Update() *EventUpdateOne {
	return NewEventClient(e.config).UpdateOne(e)
}

// Unwrap unwraps the Event entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (e *Event) Unwrap() *Event {
	_tx, ok := e.config.driver.(*txDriver)
	if !ok {
		panic("ent: Event is not a transactional entity")
	}
	e.config.driver = _tx.drv
	return e
}

// String implements the fmt.Stringer.
func (e *Event) String() string {
	var builder strings.Builder
	builder.WriteString("Event(")
	builder.WriteString(fmt.Sprintf("id=%v, ", e.ID))
	builder.WriteString("create_time=")
	builder.WriteString(e.CreateTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("update_time=")
	builder.WriteString(e.UpdateTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("uuid=")
	builder.WriteString(fmt.Sprintf("%v", e.UUID))
	builder.WriteString(", ")
	builder.WriteString("title=")
	builder.WriteString(e.Title)
	builder.WriteString(", ")
	builder.WriteString("description=")
	builder.WriteString(e.Description)
	builder.WriteString(", ")
	builder.WriteString("start_date=")
	builder.WriteString(e.StartDate.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("end_date=")
	builder.WriteString(e.EndDate.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("event_type=")
	builder.WriteString(e.EventType)
	builder.WriteString(", ")
	builder.WriteString("status=")
	builder.WriteString(fmt.Sprintf("%v", e.Status))
	builder.WriteString(", ")
	builder.WriteString("is_public=")
	builder.WriteString(fmt.Sprintf("%v", e.IsPublic))
	builder.WriteString(", ")
	builder.WriteString("is_paid=")
	builder.WriteString(fmt.Sprintf("%v", e.IsPaid))
	builder.WriteString(", ")
	builder.WriteString("max_participants=")
	builder.WriteString(fmt.Sprintf("%v", e.MaxParticipants))
	builder.WriteString(", ")
	if v := e.RegistrationDeadline; v != nil {
		builder.WriteString("registration_deadline=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	if v := e.CoverPhotoID; v != nil {
		builder.WriteString("cover_photo_id=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	builder.WriteString("organizer_id=")
	builder.WriteString(fmt.Sprintf("%v", e.OrganizerID))
	builder.WriteString(", ")
	if v := e.LocationID; v != nil {
		builder.WriteString("location_id=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteByte(')')
	return builder.String()
}

// Events is a parsable slice of Event.
type Events []*Event
