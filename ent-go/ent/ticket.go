// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
	"github.com/kayceeDev/caspa-events/ent-go/ent/ticket"
)

// Ticket is the model entity for the Ticket schema.
type Ticket struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// CreateTime holds the value of the "create_time" field.
	CreateTime time.Time `json:"create_time,omitempty"`
	// UpdateTime holds the value of the "update_time" field.
	UpdateTime time.Time `json:"update_time,omitempty"`
	// UUID holds the value of the "uuid" field.
	UUID uuid.UUID `json:"uuid"`
	// Name holds the value of the "name" field.
	Name string `json:"name"`
	// Description holds the value of the "description" field.
	Description string `json:"description"`
	// Price holds the value of the "price" field.
	Price float64 `json:"price"`
	// Quantity holds the value of the "quantity" field.
	Quantity int `json:"quantity"`
	// QuantitySold holds the value of the "quantity_sold" field.
	QuantitySold int `json:"quantity_sold"`
	// SaleStartDate holds the value of the "sale_start_date" field.
	SaleStartDate time.Time `json:"sale_start_date"`
	// SaleEndDate holds the value of the "sale_end_date" field.
	SaleEndDate *time.Time `json:"sale_end_date"`
	// EventID holds the value of the "event_id" field.
	EventID string `json:"event_id"`
	// TicketType holds the value of the "ticket_type" field.
	TicketType string `json:"ticket_type"`
	// IsActive holds the value of the "is_active" field.
	IsActive bool `json:"is_active"`
	// IsRefundable holds the value of the "is_refundable" field.
	IsRefundable bool `json:"is_refundable"`
	event_ticket *int
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Ticket) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case ticket.FieldIsActive, ticket.FieldIsRefundable:
			values[i] = new(sql.NullBool)
		case ticket.FieldPrice:
			values[i] = new(sql.NullFloat64)
		case ticket.FieldID, ticket.FieldQuantity, ticket.FieldQuantitySold:
			values[i] = new(sql.NullInt64)
		case ticket.FieldName, ticket.FieldDescription, ticket.FieldEventID, ticket.FieldTicketType:
			values[i] = new(sql.NullString)
		case ticket.FieldCreateTime, ticket.FieldUpdateTime, ticket.FieldSaleStartDate, ticket.FieldSaleEndDate:
			values[i] = new(sql.NullTime)
		case ticket.FieldUUID:
			values[i] = new(uuid.UUID)
		case ticket.ForeignKeys[0]: // event_ticket
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Ticket fields.
func (t *Ticket) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case ticket.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			t.ID = int(value.Int64)
		case ticket.FieldCreateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field create_time", values[i])
			} else if value.Valid {
				t.CreateTime = value.Time
			}
		case ticket.FieldUpdateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field update_time", values[i])
			} else if value.Valid {
				t.UpdateTime = value.Time
			}
		case ticket.FieldUUID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field uuid", values[i])
			} else if value != nil {
				t.UUID = *value
			}
		case ticket.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				t.Name = value.String
			}
		case ticket.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				t.Description = value.String
			}
		case ticket.FieldPrice:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field price", values[i])
			} else if value.Valid {
				t.Price = value.Float64
			}
		case ticket.FieldQuantity:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field quantity", values[i])
			} else if value.Valid {
				t.Quantity = int(value.Int64)
			}
		case ticket.FieldQuantitySold:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field quantity_sold", values[i])
			} else if value.Valid {
				t.QuantitySold = int(value.Int64)
			}
		case ticket.FieldSaleStartDate:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field sale_start_date", values[i])
			} else if value.Valid {
				t.SaleStartDate = value.Time
			}
		case ticket.FieldSaleEndDate:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field sale_end_date", values[i])
			} else if value.Valid {
				t.SaleEndDate = new(time.Time)
				*t.SaleEndDate = value.Time
			}
		case ticket.FieldEventID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field event_id", values[i])
			} else if value.Valid {
				t.EventID = value.String
			}
		case ticket.FieldTicketType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field ticket_type", values[i])
			} else if value.Valid {
				t.TicketType = value.String
			}
		case ticket.FieldIsActive:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field is_active", values[i])
			} else if value.Valid {
				t.IsActive = value.Bool
			}
		case ticket.FieldIsRefundable:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field is_refundable", values[i])
			} else if value.Valid {
				t.IsRefundable = value.Bool
			}
		case ticket.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field event_ticket", value)
			} else if value.Valid {
				t.event_ticket = new(int)
				*t.event_ticket = int(value.Int64)
			}
		default:
			t.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Ticket.
// This includes values selected through modifiers, order, etc.
func (t *Ticket) Value(name string) (ent.Value, error) {
	return t.selectValues.Get(name)
}

// Update returns a builder for updating this Ticket.
// Note that you need to call Ticket.Unwrap() before calling this method if this Ticket
// was returned from a transaction, and the transaction was committed or rolled back.
func (t *Ticket) Update() *TicketUpdateOne {
	return NewTicketClient(t.config).UpdateOne(t)
}

// Unwrap unwraps the Ticket entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (t *Ticket) Unwrap() *Ticket {
	_tx, ok := t.config.driver.(*txDriver)
	if !ok {
		panic("ent: Ticket is not a transactional entity")
	}
	t.config.driver = _tx.drv
	return t
}

// String implements the fmt.Stringer.
func (t *Ticket) String() string {
	var builder strings.Builder
	builder.WriteString("Ticket(")
	builder.WriteString(fmt.Sprintf("id=%v, ", t.ID))
	builder.WriteString("create_time=")
	builder.WriteString(t.CreateTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("update_time=")
	builder.WriteString(t.UpdateTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("uuid=")
	builder.WriteString(fmt.Sprintf("%v", t.UUID))
	builder.WriteString(", ")
	builder.WriteString("name=")
	builder.WriteString(t.Name)
	builder.WriteString(", ")
	builder.WriteString("description=")
	builder.WriteString(t.Description)
	builder.WriteString(", ")
	builder.WriteString("price=")
	builder.WriteString(fmt.Sprintf("%v", t.Price))
	builder.WriteString(", ")
	builder.WriteString("quantity=")
	builder.WriteString(fmt.Sprintf("%v", t.Quantity))
	builder.WriteString(", ")
	builder.WriteString("quantity_sold=")
	builder.WriteString(fmt.Sprintf("%v", t.QuantitySold))
	builder.WriteString(", ")
	builder.WriteString("sale_start_date=")
	builder.WriteString(t.SaleStartDate.Format(time.ANSIC))
	builder.WriteString(", ")
	if v := t.SaleEndDate; v != nil {
		builder.WriteString("sale_end_date=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	builder.WriteString("event_id=")
	builder.WriteString(t.EventID)
	builder.WriteString(", ")
	builder.WriteString("ticket_type=")
	builder.WriteString(t.TicketType)
	builder.WriteString(", ")
	builder.WriteString("is_active=")
	builder.WriteString(fmt.Sprintf("%v", t.IsActive))
	builder.WriteString(", ")
	builder.WriteString("is_refundable=")
	builder.WriteString(fmt.Sprintf("%v", t.IsRefundable))
	builder.WriteByte(')')
	return builder.String()
}

// Tickets is a parsable slice of Ticket.
type Tickets []*Ticket
