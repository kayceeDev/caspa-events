// Code generated by ent, DO NOT EDIT.

package ticket

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
	"github.com/kayceeDev/caspa-events/ent-go/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Ticket {
	return predicate.Ticket(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Ticket {
	return predicate.Ticket(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Ticket {
	return predicate.Ticket(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Ticket {
	return predicate.Ticket(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Ticket {
	return predicate.Ticket(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Ticket {
	return predicate.Ticket(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Ticket {
	return predicate.Ticket(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Ticket {
	return predicate.Ticket(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Ticket {
	return predicate.Ticket(sql.FieldLTE(FieldID, id))
}

// CreateTime applies equality check predicate on the "create_time" field. It's identical to CreateTimeEQ.
func CreateTime(v time.Time) predicate.Ticket {
	return predicate.Ticket(sql.FieldEQ(FieldCreateTime, v))
}

// UpdateTime applies equality check predicate on the "update_time" field. It's identical to UpdateTimeEQ.
func UpdateTime(v time.Time) predicate.Ticket {
	return predicate.Ticket(sql.FieldEQ(FieldUpdateTime, v))
}

// UUID applies equality check predicate on the "uuid" field. It's identical to UUIDEQ.
func UUID(v uuid.UUID) predicate.Ticket {
	return predicate.Ticket(sql.FieldEQ(FieldUUID, v))
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.Ticket {
	return predicate.Ticket(sql.FieldEQ(FieldName, v))
}

// Description applies equality check predicate on the "description" field. It's identical to DescriptionEQ.
func Description(v string) predicate.Ticket {
	return predicate.Ticket(sql.FieldEQ(FieldDescription, v))
}

// Price applies equality check predicate on the "price" field. It's identical to PriceEQ.
func Price(v float64) predicate.Ticket {
	return predicate.Ticket(sql.FieldEQ(FieldPrice, v))
}

// Quantity applies equality check predicate on the "quantity" field. It's identical to QuantityEQ.
func Quantity(v int) predicate.Ticket {
	return predicate.Ticket(sql.FieldEQ(FieldQuantity, v))
}

// QuantitySold applies equality check predicate on the "quantity_sold" field. It's identical to QuantitySoldEQ.
func QuantitySold(v int) predicate.Ticket {
	return predicate.Ticket(sql.FieldEQ(FieldQuantitySold, v))
}

// SaleStartDate applies equality check predicate on the "sale_start_date" field. It's identical to SaleStartDateEQ.
func SaleStartDate(v time.Time) predicate.Ticket {
	return predicate.Ticket(sql.FieldEQ(FieldSaleStartDate, v))
}

// SaleEndDate applies equality check predicate on the "sale_end_date" field. It's identical to SaleEndDateEQ.
func SaleEndDate(v time.Time) predicate.Ticket {
	return predicate.Ticket(sql.FieldEQ(FieldSaleEndDate, v))
}

// EventID applies equality check predicate on the "event_id" field. It's identical to EventIDEQ.
func EventID(v string) predicate.Ticket {
	return predicate.Ticket(sql.FieldEQ(FieldEventID, v))
}

// TicketType applies equality check predicate on the "ticket_type" field. It's identical to TicketTypeEQ.
func TicketType(v string) predicate.Ticket {
	return predicate.Ticket(sql.FieldEQ(FieldTicketType, v))
}

// IsActive applies equality check predicate on the "is_active" field. It's identical to IsActiveEQ.
func IsActive(v bool) predicate.Ticket {
	return predicate.Ticket(sql.FieldEQ(FieldIsActive, v))
}

// IsRefundable applies equality check predicate on the "is_refundable" field. It's identical to IsRefundableEQ.
func IsRefundable(v bool) predicate.Ticket {
	return predicate.Ticket(sql.FieldEQ(FieldIsRefundable, v))
}

// CreateTimeEQ applies the EQ predicate on the "create_time" field.
func CreateTimeEQ(v time.Time) predicate.Ticket {
	return predicate.Ticket(sql.FieldEQ(FieldCreateTime, v))
}

// CreateTimeNEQ applies the NEQ predicate on the "create_time" field.
func CreateTimeNEQ(v time.Time) predicate.Ticket {
	return predicate.Ticket(sql.FieldNEQ(FieldCreateTime, v))
}

// CreateTimeIn applies the In predicate on the "create_time" field.
func CreateTimeIn(vs ...time.Time) predicate.Ticket {
	return predicate.Ticket(sql.FieldIn(FieldCreateTime, vs...))
}

// CreateTimeNotIn applies the NotIn predicate on the "create_time" field.
func CreateTimeNotIn(vs ...time.Time) predicate.Ticket {
	return predicate.Ticket(sql.FieldNotIn(FieldCreateTime, vs...))
}

// CreateTimeGT applies the GT predicate on the "create_time" field.
func CreateTimeGT(v time.Time) predicate.Ticket {
	return predicate.Ticket(sql.FieldGT(FieldCreateTime, v))
}

// CreateTimeGTE applies the GTE predicate on the "create_time" field.
func CreateTimeGTE(v time.Time) predicate.Ticket {
	return predicate.Ticket(sql.FieldGTE(FieldCreateTime, v))
}

// CreateTimeLT applies the LT predicate on the "create_time" field.
func CreateTimeLT(v time.Time) predicate.Ticket {
	return predicate.Ticket(sql.FieldLT(FieldCreateTime, v))
}

// CreateTimeLTE applies the LTE predicate on the "create_time" field.
func CreateTimeLTE(v time.Time) predicate.Ticket {
	return predicate.Ticket(sql.FieldLTE(FieldCreateTime, v))
}

// UpdateTimeEQ applies the EQ predicate on the "update_time" field.
func UpdateTimeEQ(v time.Time) predicate.Ticket {
	return predicate.Ticket(sql.FieldEQ(FieldUpdateTime, v))
}

// UpdateTimeNEQ applies the NEQ predicate on the "update_time" field.
func UpdateTimeNEQ(v time.Time) predicate.Ticket {
	return predicate.Ticket(sql.FieldNEQ(FieldUpdateTime, v))
}

// UpdateTimeIn applies the In predicate on the "update_time" field.
func UpdateTimeIn(vs ...time.Time) predicate.Ticket {
	return predicate.Ticket(sql.FieldIn(FieldUpdateTime, vs...))
}

// UpdateTimeNotIn applies the NotIn predicate on the "update_time" field.
func UpdateTimeNotIn(vs ...time.Time) predicate.Ticket {
	return predicate.Ticket(sql.FieldNotIn(FieldUpdateTime, vs...))
}

// UpdateTimeGT applies the GT predicate on the "update_time" field.
func UpdateTimeGT(v time.Time) predicate.Ticket {
	return predicate.Ticket(sql.FieldGT(FieldUpdateTime, v))
}

// UpdateTimeGTE applies the GTE predicate on the "update_time" field.
func UpdateTimeGTE(v time.Time) predicate.Ticket {
	return predicate.Ticket(sql.FieldGTE(FieldUpdateTime, v))
}

// UpdateTimeLT applies the LT predicate on the "update_time" field.
func UpdateTimeLT(v time.Time) predicate.Ticket {
	return predicate.Ticket(sql.FieldLT(FieldUpdateTime, v))
}

// UpdateTimeLTE applies the LTE predicate on the "update_time" field.
func UpdateTimeLTE(v time.Time) predicate.Ticket {
	return predicate.Ticket(sql.FieldLTE(FieldUpdateTime, v))
}

// UUIDEQ applies the EQ predicate on the "uuid" field.
func UUIDEQ(v uuid.UUID) predicate.Ticket {
	return predicate.Ticket(sql.FieldEQ(FieldUUID, v))
}

// UUIDNEQ applies the NEQ predicate on the "uuid" field.
func UUIDNEQ(v uuid.UUID) predicate.Ticket {
	return predicate.Ticket(sql.FieldNEQ(FieldUUID, v))
}

// UUIDIn applies the In predicate on the "uuid" field.
func UUIDIn(vs ...uuid.UUID) predicate.Ticket {
	return predicate.Ticket(sql.FieldIn(FieldUUID, vs...))
}

// UUIDNotIn applies the NotIn predicate on the "uuid" field.
func UUIDNotIn(vs ...uuid.UUID) predicate.Ticket {
	return predicate.Ticket(sql.FieldNotIn(FieldUUID, vs...))
}

// UUIDGT applies the GT predicate on the "uuid" field.
func UUIDGT(v uuid.UUID) predicate.Ticket {
	return predicate.Ticket(sql.FieldGT(FieldUUID, v))
}

// UUIDGTE applies the GTE predicate on the "uuid" field.
func UUIDGTE(v uuid.UUID) predicate.Ticket {
	return predicate.Ticket(sql.FieldGTE(FieldUUID, v))
}

// UUIDLT applies the LT predicate on the "uuid" field.
func UUIDLT(v uuid.UUID) predicate.Ticket {
	return predicate.Ticket(sql.FieldLT(FieldUUID, v))
}

// UUIDLTE applies the LTE predicate on the "uuid" field.
func UUIDLTE(v uuid.UUID) predicate.Ticket {
	return predicate.Ticket(sql.FieldLTE(FieldUUID, v))
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.Ticket {
	return predicate.Ticket(sql.FieldEQ(FieldName, v))
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.Ticket {
	return predicate.Ticket(sql.FieldNEQ(FieldName, v))
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.Ticket {
	return predicate.Ticket(sql.FieldIn(FieldName, vs...))
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.Ticket {
	return predicate.Ticket(sql.FieldNotIn(FieldName, vs...))
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.Ticket {
	return predicate.Ticket(sql.FieldGT(FieldName, v))
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.Ticket {
	return predicate.Ticket(sql.FieldGTE(FieldName, v))
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.Ticket {
	return predicate.Ticket(sql.FieldLT(FieldName, v))
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.Ticket {
	return predicate.Ticket(sql.FieldLTE(FieldName, v))
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.Ticket {
	return predicate.Ticket(sql.FieldContains(FieldName, v))
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.Ticket {
	return predicate.Ticket(sql.FieldHasPrefix(FieldName, v))
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.Ticket {
	return predicate.Ticket(sql.FieldHasSuffix(FieldName, v))
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.Ticket {
	return predicate.Ticket(sql.FieldEqualFold(FieldName, v))
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.Ticket {
	return predicate.Ticket(sql.FieldContainsFold(FieldName, v))
}

// DescriptionEQ applies the EQ predicate on the "description" field.
func DescriptionEQ(v string) predicate.Ticket {
	return predicate.Ticket(sql.FieldEQ(FieldDescription, v))
}

// DescriptionNEQ applies the NEQ predicate on the "description" field.
func DescriptionNEQ(v string) predicate.Ticket {
	return predicate.Ticket(sql.FieldNEQ(FieldDescription, v))
}

// DescriptionIn applies the In predicate on the "description" field.
func DescriptionIn(vs ...string) predicate.Ticket {
	return predicate.Ticket(sql.FieldIn(FieldDescription, vs...))
}

// DescriptionNotIn applies the NotIn predicate on the "description" field.
func DescriptionNotIn(vs ...string) predicate.Ticket {
	return predicate.Ticket(sql.FieldNotIn(FieldDescription, vs...))
}

// DescriptionGT applies the GT predicate on the "description" field.
func DescriptionGT(v string) predicate.Ticket {
	return predicate.Ticket(sql.FieldGT(FieldDescription, v))
}

// DescriptionGTE applies the GTE predicate on the "description" field.
func DescriptionGTE(v string) predicate.Ticket {
	return predicate.Ticket(sql.FieldGTE(FieldDescription, v))
}

// DescriptionLT applies the LT predicate on the "description" field.
func DescriptionLT(v string) predicate.Ticket {
	return predicate.Ticket(sql.FieldLT(FieldDescription, v))
}

// DescriptionLTE applies the LTE predicate on the "description" field.
func DescriptionLTE(v string) predicate.Ticket {
	return predicate.Ticket(sql.FieldLTE(FieldDescription, v))
}

// DescriptionContains applies the Contains predicate on the "description" field.
func DescriptionContains(v string) predicate.Ticket {
	return predicate.Ticket(sql.FieldContains(FieldDescription, v))
}

// DescriptionHasPrefix applies the HasPrefix predicate on the "description" field.
func DescriptionHasPrefix(v string) predicate.Ticket {
	return predicate.Ticket(sql.FieldHasPrefix(FieldDescription, v))
}

// DescriptionHasSuffix applies the HasSuffix predicate on the "description" field.
func DescriptionHasSuffix(v string) predicate.Ticket {
	return predicate.Ticket(sql.FieldHasSuffix(FieldDescription, v))
}

// DescriptionEqualFold applies the EqualFold predicate on the "description" field.
func DescriptionEqualFold(v string) predicate.Ticket {
	return predicate.Ticket(sql.FieldEqualFold(FieldDescription, v))
}

// DescriptionContainsFold applies the ContainsFold predicate on the "description" field.
func DescriptionContainsFold(v string) predicate.Ticket {
	return predicate.Ticket(sql.FieldContainsFold(FieldDescription, v))
}

// PriceEQ applies the EQ predicate on the "price" field.
func PriceEQ(v float64) predicate.Ticket {
	return predicate.Ticket(sql.FieldEQ(FieldPrice, v))
}

// PriceNEQ applies the NEQ predicate on the "price" field.
func PriceNEQ(v float64) predicate.Ticket {
	return predicate.Ticket(sql.FieldNEQ(FieldPrice, v))
}

// PriceIn applies the In predicate on the "price" field.
func PriceIn(vs ...float64) predicate.Ticket {
	return predicate.Ticket(sql.FieldIn(FieldPrice, vs...))
}

// PriceNotIn applies the NotIn predicate on the "price" field.
func PriceNotIn(vs ...float64) predicate.Ticket {
	return predicate.Ticket(sql.FieldNotIn(FieldPrice, vs...))
}

// PriceGT applies the GT predicate on the "price" field.
func PriceGT(v float64) predicate.Ticket {
	return predicate.Ticket(sql.FieldGT(FieldPrice, v))
}

// PriceGTE applies the GTE predicate on the "price" field.
func PriceGTE(v float64) predicate.Ticket {
	return predicate.Ticket(sql.FieldGTE(FieldPrice, v))
}

// PriceLT applies the LT predicate on the "price" field.
func PriceLT(v float64) predicate.Ticket {
	return predicate.Ticket(sql.FieldLT(FieldPrice, v))
}

// PriceLTE applies the LTE predicate on the "price" field.
func PriceLTE(v float64) predicate.Ticket {
	return predicate.Ticket(sql.FieldLTE(FieldPrice, v))
}

// QuantityEQ applies the EQ predicate on the "quantity" field.
func QuantityEQ(v int) predicate.Ticket {
	return predicate.Ticket(sql.FieldEQ(FieldQuantity, v))
}

// QuantityNEQ applies the NEQ predicate on the "quantity" field.
func QuantityNEQ(v int) predicate.Ticket {
	return predicate.Ticket(sql.FieldNEQ(FieldQuantity, v))
}

// QuantityIn applies the In predicate on the "quantity" field.
func QuantityIn(vs ...int) predicate.Ticket {
	return predicate.Ticket(sql.FieldIn(FieldQuantity, vs...))
}

// QuantityNotIn applies the NotIn predicate on the "quantity" field.
func QuantityNotIn(vs ...int) predicate.Ticket {
	return predicate.Ticket(sql.FieldNotIn(FieldQuantity, vs...))
}

// QuantityGT applies the GT predicate on the "quantity" field.
func QuantityGT(v int) predicate.Ticket {
	return predicate.Ticket(sql.FieldGT(FieldQuantity, v))
}

// QuantityGTE applies the GTE predicate on the "quantity" field.
func QuantityGTE(v int) predicate.Ticket {
	return predicate.Ticket(sql.FieldGTE(FieldQuantity, v))
}

// QuantityLT applies the LT predicate on the "quantity" field.
func QuantityLT(v int) predicate.Ticket {
	return predicate.Ticket(sql.FieldLT(FieldQuantity, v))
}

// QuantityLTE applies the LTE predicate on the "quantity" field.
func QuantityLTE(v int) predicate.Ticket {
	return predicate.Ticket(sql.FieldLTE(FieldQuantity, v))
}

// QuantitySoldEQ applies the EQ predicate on the "quantity_sold" field.
func QuantitySoldEQ(v int) predicate.Ticket {
	return predicate.Ticket(sql.FieldEQ(FieldQuantitySold, v))
}

// QuantitySoldNEQ applies the NEQ predicate on the "quantity_sold" field.
func QuantitySoldNEQ(v int) predicate.Ticket {
	return predicate.Ticket(sql.FieldNEQ(FieldQuantitySold, v))
}

// QuantitySoldIn applies the In predicate on the "quantity_sold" field.
func QuantitySoldIn(vs ...int) predicate.Ticket {
	return predicate.Ticket(sql.FieldIn(FieldQuantitySold, vs...))
}

// QuantitySoldNotIn applies the NotIn predicate on the "quantity_sold" field.
func QuantitySoldNotIn(vs ...int) predicate.Ticket {
	return predicate.Ticket(sql.FieldNotIn(FieldQuantitySold, vs...))
}

// QuantitySoldGT applies the GT predicate on the "quantity_sold" field.
func QuantitySoldGT(v int) predicate.Ticket {
	return predicate.Ticket(sql.FieldGT(FieldQuantitySold, v))
}

// QuantitySoldGTE applies the GTE predicate on the "quantity_sold" field.
func QuantitySoldGTE(v int) predicate.Ticket {
	return predicate.Ticket(sql.FieldGTE(FieldQuantitySold, v))
}

// QuantitySoldLT applies the LT predicate on the "quantity_sold" field.
func QuantitySoldLT(v int) predicate.Ticket {
	return predicate.Ticket(sql.FieldLT(FieldQuantitySold, v))
}

// QuantitySoldLTE applies the LTE predicate on the "quantity_sold" field.
func QuantitySoldLTE(v int) predicate.Ticket {
	return predicate.Ticket(sql.FieldLTE(FieldQuantitySold, v))
}

// SaleStartDateEQ applies the EQ predicate on the "sale_start_date" field.
func SaleStartDateEQ(v time.Time) predicate.Ticket {
	return predicate.Ticket(sql.FieldEQ(FieldSaleStartDate, v))
}

// SaleStartDateNEQ applies the NEQ predicate on the "sale_start_date" field.
func SaleStartDateNEQ(v time.Time) predicate.Ticket {
	return predicate.Ticket(sql.FieldNEQ(FieldSaleStartDate, v))
}

// SaleStartDateIn applies the In predicate on the "sale_start_date" field.
func SaleStartDateIn(vs ...time.Time) predicate.Ticket {
	return predicate.Ticket(sql.FieldIn(FieldSaleStartDate, vs...))
}

// SaleStartDateNotIn applies the NotIn predicate on the "sale_start_date" field.
func SaleStartDateNotIn(vs ...time.Time) predicate.Ticket {
	return predicate.Ticket(sql.FieldNotIn(FieldSaleStartDate, vs...))
}

// SaleStartDateGT applies the GT predicate on the "sale_start_date" field.
func SaleStartDateGT(v time.Time) predicate.Ticket {
	return predicate.Ticket(sql.FieldGT(FieldSaleStartDate, v))
}

// SaleStartDateGTE applies the GTE predicate on the "sale_start_date" field.
func SaleStartDateGTE(v time.Time) predicate.Ticket {
	return predicate.Ticket(sql.FieldGTE(FieldSaleStartDate, v))
}

// SaleStartDateLT applies the LT predicate on the "sale_start_date" field.
func SaleStartDateLT(v time.Time) predicate.Ticket {
	return predicate.Ticket(sql.FieldLT(FieldSaleStartDate, v))
}

// SaleStartDateLTE applies the LTE predicate on the "sale_start_date" field.
func SaleStartDateLTE(v time.Time) predicate.Ticket {
	return predicate.Ticket(sql.FieldLTE(FieldSaleStartDate, v))
}

// SaleEndDateEQ applies the EQ predicate on the "sale_end_date" field.
func SaleEndDateEQ(v time.Time) predicate.Ticket {
	return predicate.Ticket(sql.FieldEQ(FieldSaleEndDate, v))
}

// SaleEndDateNEQ applies the NEQ predicate on the "sale_end_date" field.
func SaleEndDateNEQ(v time.Time) predicate.Ticket {
	return predicate.Ticket(sql.FieldNEQ(FieldSaleEndDate, v))
}

// SaleEndDateIn applies the In predicate on the "sale_end_date" field.
func SaleEndDateIn(vs ...time.Time) predicate.Ticket {
	return predicate.Ticket(sql.FieldIn(FieldSaleEndDate, vs...))
}

// SaleEndDateNotIn applies the NotIn predicate on the "sale_end_date" field.
func SaleEndDateNotIn(vs ...time.Time) predicate.Ticket {
	return predicate.Ticket(sql.FieldNotIn(FieldSaleEndDate, vs...))
}

// SaleEndDateGT applies the GT predicate on the "sale_end_date" field.
func SaleEndDateGT(v time.Time) predicate.Ticket {
	return predicate.Ticket(sql.FieldGT(FieldSaleEndDate, v))
}

// SaleEndDateGTE applies the GTE predicate on the "sale_end_date" field.
func SaleEndDateGTE(v time.Time) predicate.Ticket {
	return predicate.Ticket(sql.FieldGTE(FieldSaleEndDate, v))
}

// SaleEndDateLT applies the LT predicate on the "sale_end_date" field.
func SaleEndDateLT(v time.Time) predicate.Ticket {
	return predicate.Ticket(sql.FieldLT(FieldSaleEndDate, v))
}

// SaleEndDateLTE applies the LTE predicate on the "sale_end_date" field.
func SaleEndDateLTE(v time.Time) predicate.Ticket {
	return predicate.Ticket(sql.FieldLTE(FieldSaleEndDate, v))
}

// SaleEndDateIsNil applies the IsNil predicate on the "sale_end_date" field.
func SaleEndDateIsNil() predicate.Ticket {
	return predicate.Ticket(sql.FieldIsNull(FieldSaleEndDate))
}

// SaleEndDateNotNil applies the NotNil predicate on the "sale_end_date" field.
func SaleEndDateNotNil() predicate.Ticket {
	return predicate.Ticket(sql.FieldNotNull(FieldSaleEndDate))
}

// EventIDEQ applies the EQ predicate on the "event_id" field.
func EventIDEQ(v string) predicate.Ticket {
	return predicate.Ticket(sql.FieldEQ(FieldEventID, v))
}

// EventIDNEQ applies the NEQ predicate on the "event_id" field.
func EventIDNEQ(v string) predicate.Ticket {
	return predicate.Ticket(sql.FieldNEQ(FieldEventID, v))
}

// EventIDIn applies the In predicate on the "event_id" field.
func EventIDIn(vs ...string) predicate.Ticket {
	return predicate.Ticket(sql.FieldIn(FieldEventID, vs...))
}

// EventIDNotIn applies the NotIn predicate on the "event_id" field.
func EventIDNotIn(vs ...string) predicate.Ticket {
	return predicate.Ticket(sql.FieldNotIn(FieldEventID, vs...))
}

// EventIDGT applies the GT predicate on the "event_id" field.
func EventIDGT(v string) predicate.Ticket {
	return predicate.Ticket(sql.FieldGT(FieldEventID, v))
}

// EventIDGTE applies the GTE predicate on the "event_id" field.
func EventIDGTE(v string) predicate.Ticket {
	return predicate.Ticket(sql.FieldGTE(FieldEventID, v))
}

// EventIDLT applies the LT predicate on the "event_id" field.
func EventIDLT(v string) predicate.Ticket {
	return predicate.Ticket(sql.FieldLT(FieldEventID, v))
}

// EventIDLTE applies the LTE predicate on the "event_id" field.
func EventIDLTE(v string) predicate.Ticket {
	return predicate.Ticket(sql.FieldLTE(FieldEventID, v))
}

// EventIDContains applies the Contains predicate on the "event_id" field.
func EventIDContains(v string) predicate.Ticket {
	return predicate.Ticket(sql.FieldContains(FieldEventID, v))
}

// EventIDHasPrefix applies the HasPrefix predicate on the "event_id" field.
func EventIDHasPrefix(v string) predicate.Ticket {
	return predicate.Ticket(sql.FieldHasPrefix(FieldEventID, v))
}

// EventIDHasSuffix applies the HasSuffix predicate on the "event_id" field.
func EventIDHasSuffix(v string) predicate.Ticket {
	return predicate.Ticket(sql.FieldHasSuffix(FieldEventID, v))
}

// EventIDEqualFold applies the EqualFold predicate on the "event_id" field.
func EventIDEqualFold(v string) predicate.Ticket {
	return predicate.Ticket(sql.FieldEqualFold(FieldEventID, v))
}

// EventIDContainsFold applies the ContainsFold predicate on the "event_id" field.
func EventIDContainsFold(v string) predicate.Ticket {
	return predicate.Ticket(sql.FieldContainsFold(FieldEventID, v))
}

// TicketTypeEQ applies the EQ predicate on the "ticket_type" field.
func TicketTypeEQ(v string) predicate.Ticket {
	return predicate.Ticket(sql.FieldEQ(FieldTicketType, v))
}

// TicketTypeNEQ applies the NEQ predicate on the "ticket_type" field.
func TicketTypeNEQ(v string) predicate.Ticket {
	return predicate.Ticket(sql.FieldNEQ(FieldTicketType, v))
}

// TicketTypeIn applies the In predicate on the "ticket_type" field.
func TicketTypeIn(vs ...string) predicate.Ticket {
	return predicate.Ticket(sql.FieldIn(FieldTicketType, vs...))
}

// TicketTypeNotIn applies the NotIn predicate on the "ticket_type" field.
func TicketTypeNotIn(vs ...string) predicate.Ticket {
	return predicate.Ticket(sql.FieldNotIn(FieldTicketType, vs...))
}

// TicketTypeGT applies the GT predicate on the "ticket_type" field.
func TicketTypeGT(v string) predicate.Ticket {
	return predicate.Ticket(sql.FieldGT(FieldTicketType, v))
}

// TicketTypeGTE applies the GTE predicate on the "ticket_type" field.
func TicketTypeGTE(v string) predicate.Ticket {
	return predicate.Ticket(sql.FieldGTE(FieldTicketType, v))
}

// TicketTypeLT applies the LT predicate on the "ticket_type" field.
func TicketTypeLT(v string) predicate.Ticket {
	return predicate.Ticket(sql.FieldLT(FieldTicketType, v))
}

// TicketTypeLTE applies the LTE predicate on the "ticket_type" field.
func TicketTypeLTE(v string) predicate.Ticket {
	return predicate.Ticket(sql.FieldLTE(FieldTicketType, v))
}

// TicketTypeContains applies the Contains predicate on the "ticket_type" field.
func TicketTypeContains(v string) predicate.Ticket {
	return predicate.Ticket(sql.FieldContains(FieldTicketType, v))
}

// TicketTypeHasPrefix applies the HasPrefix predicate on the "ticket_type" field.
func TicketTypeHasPrefix(v string) predicate.Ticket {
	return predicate.Ticket(sql.FieldHasPrefix(FieldTicketType, v))
}

// TicketTypeHasSuffix applies the HasSuffix predicate on the "ticket_type" field.
func TicketTypeHasSuffix(v string) predicate.Ticket {
	return predicate.Ticket(sql.FieldHasSuffix(FieldTicketType, v))
}

// TicketTypeEqualFold applies the EqualFold predicate on the "ticket_type" field.
func TicketTypeEqualFold(v string) predicate.Ticket {
	return predicate.Ticket(sql.FieldEqualFold(FieldTicketType, v))
}

// TicketTypeContainsFold applies the ContainsFold predicate on the "ticket_type" field.
func TicketTypeContainsFold(v string) predicate.Ticket {
	return predicate.Ticket(sql.FieldContainsFold(FieldTicketType, v))
}

// IsActiveEQ applies the EQ predicate on the "is_active" field.
func IsActiveEQ(v bool) predicate.Ticket {
	return predicate.Ticket(sql.FieldEQ(FieldIsActive, v))
}

// IsActiveNEQ applies the NEQ predicate on the "is_active" field.
func IsActiveNEQ(v bool) predicate.Ticket {
	return predicate.Ticket(sql.FieldNEQ(FieldIsActive, v))
}

// IsRefundableEQ applies the EQ predicate on the "is_refundable" field.
func IsRefundableEQ(v bool) predicate.Ticket {
	return predicate.Ticket(sql.FieldEQ(FieldIsRefundable, v))
}

// IsRefundableNEQ applies the NEQ predicate on the "is_refundable" field.
func IsRefundableNEQ(v bool) predicate.Ticket {
	return predicate.Ticket(sql.FieldNEQ(FieldIsRefundable, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Ticket) predicate.Ticket {
	return predicate.Ticket(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Ticket) predicate.Ticket {
	return predicate.Ticket(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Ticket) predicate.Ticket {
	return predicate.Ticket(sql.NotPredicates(p))
}
