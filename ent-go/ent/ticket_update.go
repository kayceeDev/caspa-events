// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/kayceeDev/caspa-events/ent-go/ent/predicate"
	"github.com/kayceeDev/caspa-events/ent-go/ent/ticket"
)

// TicketUpdate is the builder for updating Ticket entities.
type TicketUpdate struct {
	config
	hooks    []Hook
	mutation *TicketMutation
}

// Where appends a list predicates to the TicketUpdate builder.
func (tu *TicketUpdate) Where(ps ...predicate.Ticket) *TicketUpdate {
	tu.mutation.Where(ps...)
	return tu
}

// SetUpdateTime sets the "update_time" field.
func (tu *TicketUpdate) SetUpdateTime(t time.Time) *TicketUpdate {
	tu.mutation.SetUpdateTime(t)
	return tu
}

// SetName sets the "name" field.
func (tu *TicketUpdate) SetName(s string) *TicketUpdate {
	tu.mutation.SetName(s)
	return tu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (tu *TicketUpdate) SetNillableName(s *string) *TicketUpdate {
	if s != nil {
		tu.SetName(*s)
	}
	return tu
}

// SetDescription sets the "description" field.
func (tu *TicketUpdate) SetDescription(s string) *TicketUpdate {
	tu.mutation.SetDescription(s)
	return tu
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (tu *TicketUpdate) SetNillableDescription(s *string) *TicketUpdate {
	if s != nil {
		tu.SetDescription(*s)
	}
	return tu
}

// SetPrice sets the "price" field.
func (tu *TicketUpdate) SetPrice(f float64) *TicketUpdate {
	tu.mutation.ResetPrice()
	tu.mutation.SetPrice(f)
	return tu
}

// SetNillablePrice sets the "price" field if the given value is not nil.
func (tu *TicketUpdate) SetNillablePrice(f *float64) *TicketUpdate {
	if f != nil {
		tu.SetPrice(*f)
	}
	return tu
}

// AddPrice adds f to the "price" field.
func (tu *TicketUpdate) AddPrice(f float64) *TicketUpdate {
	tu.mutation.AddPrice(f)
	return tu
}

// SetQuantity sets the "quantity" field.
func (tu *TicketUpdate) SetQuantity(i int) *TicketUpdate {
	tu.mutation.ResetQuantity()
	tu.mutation.SetQuantity(i)
	return tu
}

// SetNillableQuantity sets the "quantity" field if the given value is not nil.
func (tu *TicketUpdate) SetNillableQuantity(i *int) *TicketUpdate {
	if i != nil {
		tu.SetQuantity(*i)
	}
	return tu
}

// AddQuantity adds i to the "quantity" field.
func (tu *TicketUpdate) AddQuantity(i int) *TicketUpdate {
	tu.mutation.AddQuantity(i)
	return tu
}

// SetQuantitySold sets the "quantity_sold" field.
func (tu *TicketUpdate) SetQuantitySold(i int) *TicketUpdate {
	tu.mutation.ResetQuantitySold()
	tu.mutation.SetQuantitySold(i)
	return tu
}

// SetNillableQuantitySold sets the "quantity_sold" field if the given value is not nil.
func (tu *TicketUpdate) SetNillableQuantitySold(i *int) *TicketUpdate {
	if i != nil {
		tu.SetQuantitySold(*i)
	}
	return tu
}

// AddQuantitySold adds i to the "quantity_sold" field.
func (tu *TicketUpdate) AddQuantitySold(i int) *TicketUpdate {
	tu.mutation.AddQuantitySold(i)
	return tu
}

// SetSaleStartDate sets the "sale_start_date" field.
func (tu *TicketUpdate) SetSaleStartDate(t time.Time) *TicketUpdate {
	tu.mutation.SetSaleStartDate(t)
	return tu
}

// SetNillableSaleStartDate sets the "sale_start_date" field if the given value is not nil.
func (tu *TicketUpdate) SetNillableSaleStartDate(t *time.Time) *TicketUpdate {
	if t != nil {
		tu.SetSaleStartDate(*t)
	}
	return tu
}

// SetSaleEndDate sets the "sale_end_date" field.
func (tu *TicketUpdate) SetSaleEndDate(t time.Time) *TicketUpdate {
	tu.mutation.SetSaleEndDate(t)
	return tu
}

// SetNillableSaleEndDate sets the "sale_end_date" field if the given value is not nil.
func (tu *TicketUpdate) SetNillableSaleEndDate(t *time.Time) *TicketUpdate {
	if t != nil {
		tu.SetSaleEndDate(*t)
	}
	return tu
}

// ClearSaleEndDate clears the value of the "sale_end_date" field.
func (tu *TicketUpdate) ClearSaleEndDate() *TicketUpdate {
	tu.mutation.ClearSaleEndDate()
	return tu
}

// SetEventID sets the "event_id" field.
func (tu *TicketUpdate) SetEventID(s string) *TicketUpdate {
	tu.mutation.SetEventID(s)
	return tu
}

// SetNillableEventID sets the "event_id" field if the given value is not nil.
func (tu *TicketUpdate) SetNillableEventID(s *string) *TicketUpdate {
	if s != nil {
		tu.SetEventID(*s)
	}
	return tu
}

// SetTicketType sets the "ticket_type" field.
func (tu *TicketUpdate) SetTicketType(s string) *TicketUpdate {
	tu.mutation.SetTicketType(s)
	return tu
}

// SetNillableTicketType sets the "ticket_type" field if the given value is not nil.
func (tu *TicketUpdate) SetNillableTicketType(s *string) *TicketUpdate {
	if s != nil {
		tu.SetTicketType(*s)
	}
	return tu
}

// SetIsActive sets the "is_active" field.
func (tu *TicketUpdate) SetIsActive(b bool) *TicketUpdate {
	tu.mutation.SetIsActive(b)
	return tu
}

// SetNillableIsActive sets the "is_active" field if the given value is not nil.
func (tu *TicketUpdate) SetNillableIsActive(b *bool) *TicketUpdate {
	if b != nil {
		tu.SetIsActive(*b)
	}
	return tu
}

// SetIsRefundable sets the "is_refundable" field.
func (tu *TicketUpdate) SetIsRefundable(b bool) *TicketUpdate {
	tu.mutation.SetIsRefundable(b)
	return tu
}

// SetNillableIsRefundable sets the "is_refundable" field if the given value is not nil.
func (tu *TicketUpdate) SetNillableIsRefundable(b *bool) *TicketUpdate {
	if b != nil {
		tu.SetIsRefundable(*b)
	}
	return tu
}

// Mutation returns the TicketMutation object of the builder.
func (tu *TicketUpdate) Mutation() *TicketMutation {
	return tu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (tu *TicketUpdate) Save(ctx context.Context) (int, error) {
	tu.defaults()
	return withHooks(ctx, tu.sqlSave, tu.mutation, tu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (tu *TicketUpdate) SaveX(ctx context.Context) int {
	affected, err := tu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (tu *TicketUpdate) Exec(ctx context.Context) error {
	_, err := tu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tu *TicketUpdate) ExecX(ctx context.Context) {
	if err := tu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (tu *TicketUpdate) defaults() {
	if _, ok := tu.mutation.UpdateTime(); !ok {
		v := ticket.UpdateDefaultUpdateTime()
		tu.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tu *TicketUpdate) check() error {
	if v, ok := tu.mutation.Name(); ok {
		if err := ticket.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Ticket.name": %w`, err)}
		}
	}
	if v, ok := tu.mutation.Description(); ok {
		if err := ticket.DescriptionValidator(v); err != nil {
			return &ValidationError{Name: "description", err: fmt.Errorf(`ent: validator failed for field "Ticket.description": %w`, err)}
		}
	}
	if v, ok := tu.mutation.Price(); ok {
		if err := ticket.PriceValidator(v); err != nil {
			return &ValidationError{Name: "price", err: fmt.Errorf(`ent: validator failed for field "Ticket.price": %w`, err)}
		}
	}
	if v, ok := tu.mutation.Quantity(); ok {
		if err := ticket.QuantityValidator(v); err != nil {
			return &ValidationError{Name: "quantity", err: fmt.Errorf(`ent: validator failed for field "Ticket.quantity": %w`, err)}
		}
	}
	if v, ok := tu.mutation.QuantitySold(); ok {
		if err := ticket.QuantitySoldValidator(v); err != nil {
			return &ValidationError{Name: "quantity_sold", err: fmt.Errorf(`ent: validator failed for field "Ticket.quantity_sold": %w`, err)}
		}
	}
	if v, ok := tu.mutation.TicketType(); ok {
		if err := ticket.TicketTypeValidator(v); err != nil {
			return &ValidationError{Name: "ticket_type", err: fmt.Errorf(`ent: validator failed for field "Ticket.ticket_type": %w`, err)}
		}
	}
	return nil
}

func (tu *TicketUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := tu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(ticket.Table, ticket.Columns, sqlgraph.NewFieldSpec(ticket.FieldID, field.TypeInt))
	if ps := tu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tu.mutation.UpdateTime(); ok {
		_spec.SetField(ticket.FieldUpdateTime, field.TypeTime, value)
	}
	if value, ok := tu.mutation.Name(); ok {
		_spec.SetField(ticket.FieldName, field.TypeString, value)
	}
	if value, ok := tu.mutation.Description(); ok {
		_spec.SetField(ticket.FieldDescription, field.TypeString, value)
	}
	if value, ok := tu.mutation.Price(); ok {
		_spec.SetField(ticket.FieldPrice, field.TypeFloat64, value)
	}
	if value, ok := tu.mutation.AddedPrice(); ok {
		_spec.AddField(ticket.FieldPrice, field.TypeFloat64, value)
	}
	if value, ok := tu.mutation.Quantity(); ok {
		_spec.SetField(ticket.FieldQuantity, field.TypeInt, value)
	}
	if value, ok := tu.mutation.AddedQuantity(); ok {
		_spec.AddField(ticket.FieldQuantity, field.TypeInt, value)
	}
	if value, ok := tu.mutation.QuantitySold(); ok {
		_spec.SetField(ticket.FieldQuantitySold, field.TypeInt, value)
	}
	if value, ok := tu.mutation.AddedQuantitySold(); ok {
		_spec.AddField(ticket.FieldQuantitySold, field.TypeInt, value)
	}
	if value, ok := tu.mutation.SaleStartDate(); ok {
		_spec.SetField(ticket.FieldSaleStartDate, field.TypeTime, value)
	}
	if value, ok := tu.mutation.SaleEndDate(); ok {
		_spec.SetField(ticket.FieldSaleEndDate, field.TypeTime, value)
	}
	if tu.mutation.SaleEndDateCleared() {
		_spec.ClearField(ticket.FieldSaleEndDate, field.TypeTime)
	}
	if value, ok := tu.mutation.EventID(); ok {
		_spec.SetField(ticket.FieldEventID, field.TypeString, value)
	}
	if value, ok := tu.mutation.TicketType(); ok {
		_spec.SetField(ticket.FieldTicketType, field.TypeString, value)
	}
	if value, ok := tu.mutation.IsActive(); ok {
		_spec.SetField(ticket.FieldIsActive, field.TypeBool, value)
	}
	if value, ok := tu.mutation.IsRefundable(); ok {
		_spec.SetField(ticket.FieldIsRefundable, field.TypeBool, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, tu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{ticket.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	tu.mutation.done = true
	return n, nil
}

// TicketUpdateOne is the builder for updating a single Ticket entity.
type TicketUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *TicketMutation
}

// SetUpdateTime sets the "update_time" field.
func (tuo *TicketUpdateOne) SetUpdateTime(t time.Time) *TicketUpdateOne {
	tuo.mutation.SetUpdateTime(t)
	return tuo
}

// SetName sets the "name" field.
func (tuo *TicketUpdateOne) SetName(s string) *TicketUpdateOne {
	tuo.mutation.SetName(s)
	return tuo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (tuo *TicketUpdateOne) SetNillableName(s *string) *TicketUpdateOne {
	if s != nil {
		tuo.SetName(*s)
	}
	return tuo
}

// SetDescription sets the "description" field.
func (tuo *TicketUpdateOne) SetDescription(s string) *TicketUpdateOne {
	tuo.mutation.SetDescription(s)
	return tuo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (tuo *TicketUpdateOne) SetNillableDescription(s *string) *TicketUpdateOne {
	if s != nil {
		tuo.SetDescription(*s)
	}
	return tuo
}

// SetPrice sets the "price" field.
func (tuo *TicketUpdateOne) SetPrice(f float64) *TicketUpdateOne {
	tuo.mutation.ResetPrice()
	tuo.mutation.SetPrice(f)
	return tuo
}

// SetNillablePrice sets the "price" field if the given value is not nil.
func (tuo *TicketUpdateOne) SetNillablePrice(f *float64) *TicketUpdateOne {
	if f != nil {
		tuo.SetPrice(*f)
	}
	return tuo
}

// AddPrice adds f to the "price" field.
func (tuo *TicketUpdateOne) AddPrice(f float64) *TicketUpdateOne {
	tuo.mutation.AddPrice(f)
	return tuo
}

// SetQuantity sets the "quantity" field.
func (tuo *TicketUpdateOne) SetQuantity(i int) *TicketUpdateOne {
	tuo.mutation.ResetQuantity()
	tuo.mutation.SetQuantity(i)
	return tuo
}

// SetNillableQuantity sets the "quantity" field if the given value is not nil.
func (tuo *TicketUpdateOne) SetNillableQuantity(i *int) *TicketUpdateOne {
	if i != nil {
		tuo.SetQuantity(*i)
	}
	return tuo
}

// AddQuantity adds i to the "quantity" field.
func (tuo *TicketUpdateOne) AddQuantity(i int) *TicketUpdateOne {
	tuo.mutation.AddQuantity(i)
	return tuo
}

// SetQuantitySold sets the "quantity_sold" field.
func (tuo *TicketUpdateOne) SetQuantitySold(i int) *TicketUpdateOne {
	tuo.mutation.ResetQuantitySold()
	tuo.mutation.SetQuantitySold(i)
	return tuo
}

// SetNillableQuantitySold sets the "quantity_sold" field if the given value is not nil.
func (tuo *TicketUpdateOne) SetNillableQuantitySold(i *int) *TicketUpdateOne {
	if i != nil {
		tuo.SetQuantitySold(*i)
	}
	return tuo
}

// AddQuantitySold adds i to the "quantity_sold" field.
func (tuo *TicketUpdateOne) AddQuantitySold(i int) *TicketUpdateOne {
	tuo.mutation.AddQuantitySold(i)
	return tuo
}

// SetSaleStartDate sets the "sale_start_date" field.
func (tuo *TicketUpdateOne) SetSaleStartDate(t time.Time) *TicketUpdateOne {
	tuo.mutation.SetSaleStartDate(t)
	return tuo
}

// SetNillableSaleStartDate sets the "sale_start_date" field if the given value is not nil.
func (tuo *TicketUpdateOne) SetNillableSaleStartDate(t *time.Time) *TicketUpdateOne {
	if t != nil {
		tuo.SetSaleStartDate(*t)
	}
	return tuo
}

// SetSaleEndDate sets the "sale_end_date" field.
func (tuo *TicketUpdateOne) SetSaleEndDate(t time.Time) *TicketUpdateOne {
	tuo.mutation.SetSaleEndDate(t)
	return tuo
}

// SetNillableSaleEndDate sets the "sale_end_date" field if the given value is not nil.
func (tuo *TicketUpdateOne) SetNillableSaleEndDate(t *time.Time) *TicketUpdateOne {
	if t != nil {
		tuo.SetSaleEndDate(*t)
	}
	return tuo
}

// ClearSaleEndDate clears the value of the "sale_end_date" field.
func (tuo *TicketUpdateOne) ClearSaleEndDate() *TicketUpdateOne {
	tuo.mutation.ClearSaleEndDate()
	return tuo
}

// SetEventID sets the "event_id" field.
func (tuo *TicketUpdateOne) SetEventID(s string) *TicketUpdateOne {
	tuo.mutation.SetEventID(s)
	return tuo
}

// SetNillableEventID sets the "event_id" field if the given value is not nil.
func (tuo *TicketUpdateOne) SetNillableEventID(s *string) *TicketUpdateOne {
	if s != nil {
		tuo.SetEventID(*s)
	}
	return tuo
}

// SetTicketType sets the "ticket_type" field.
func (tuo *TicketUpdateOne) SetTicketType(s string) *TicketUpdateOne {
	tuo.mutation.SetTicketType(s)
	return tuo
}

// SetNillableTicketType sets the "ticket_type" field if the given value is not nil.
func (tuo *TicketUpdateOne) SetNillableTicketType(s *string) *TicketUpdateOne {
	if s != nil {
		tuo.SetTicketType(*s)
	}
	return tuo
}

// SetIsActive sets the "is_active" field.
func (tuo *TicketUpdateOne) SetIsActive(b bool) *TicketUpdateOne {
	tuo.mutation.SetIsActive(b)
	return tuo
}

// SetNillableIsActive sets the "is_active" field if the given value is not nil.
func (tuo *TicketUpdateOne) SetNillableIsActive(b *bool) *TicketUpdateOne {
	if b != nil {
		tuo.SetIsActive(*b)
	}
	return tuo
}

// SetIsRefundable sets the "is_refundable" field.
func (tuo *TicketUpdateOne) SetIsRefundable(b bool) *TicketUpdateOne {
	tuo.mutation.SetIsRefundable(b)
	return tuo
}

// SetNillableIsRefundable sets the "is_refundable" field if the given value is not nil.
func (tuo *TicketUpdateOne) SetNillableIsRefundable(b *bool) *TicketUpdateOne {
	if b != nil {
		tuo.SetIsRefundable(*b)
	}
	return tuo
}

// Mutation returns the TicketMutation object of the builder.
func (tuo *TicketUpdateOne) Mutation() *TicketMutation {
	return tuo.mutation
}

// Where appends a list predicates to the TicketUpdate builder.
func (tuo *TicketUpdateOne) Where(ps ...predicate.Ticket) *TicketUpdateOne {
	tuo.mutation.Where(ps...)
	return tuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (tuo *TicketUpdateOne) Select(field string, fields ...string) *TicketUpdateOne {
	tuo.fields = append([]string{field}, fields...)
	return tuo
}

// Save executes the query and returns the updated Ticket entity.
func (tuo *TicketUpdateOne) Save(ctx context.Context) (*Ticket, error) {
	tuo.defaults()
	return withHooks(ctx, tuo.sqlSave, tuo.mutation, tuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (tuo *TicketUpdateOne) SaveX(ctx context.Context) *Ticket {
	node, err := tuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (tuo *TicketUpdateOne) Exec(ctx context.Context) error {
	_, err := tuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tuo *TicketUpdateOne) ExecX(ctx context.Context) {
	if err := tuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (tuo *TicketUpdateOne) defaults() {
	if _, ok := tuo.mutation.UpdateTime(); !ok {
		v := ticket.UpdateDefaultUpdateTime()
		tuo.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tuo *TicketUpdateOne) check() error {
	if v, ok := tuo.mutation.Name(); ok {
		if err := ticket.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Ticket.name": %w`, err)}
		}
	}
	if v, ok := tuo.mutation.Description(); ok {
		if err := ticket.DescriptionValidator(v); err != nil {
			return &ValidationError{Name: "description", err: fmt.Errorf(`ent: validator failed for field "Ticket.description": %w`, err)}
		}
	}
	if v, ok := tuo.mutation.Price(); ok {
		if err := ticket.PriceValidator(v); err != nil {
			return &ValidationError{Name: "price", err: fmt.Errorf(`ent: validator failed for field "Ticket.price": %w`, err)}
		}
	}
	if v, ok := tuo.mutation.Quantity(); ok {
		if err := ticket.QuantityValidator(v); err != nil {
			return &ValidationError{Name: "quantity", err: fmt.Errorf(`ent: validator failed for field "Ticket.quantity": %w`, err)}
		}
	}
	if v, ok := tuo.mutation.QuantitySold(); ok {
		if err := ticket.QuantitySoldValidator(v); err != nil {
			return &ValidationError{Name: "quantity_sold", err: fmt.Errorf(`ent: validator failed for field "Ticket.quantity_sold": %w`, err)}
		}
	}
	if v, ok := tuo.mutation.TicketType(); ok {
		if err := ticket.TicketTypeValidator(v); err != nil {
			return &ValidationError{Name: "ticket_type", err: fmt.Errorf(`ent: validator failed for field "Ticket.ticket_type": %w`, err)}
		}
	}
	return nil
}

func (tuo *TicketUpdateOne) sqlSave(ctx context.Context) (_node *Ticket, err error) {
	if err := tuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(ticket.Table, ticket.Columns, sqlgraph.NewFieldSpec(ticket.FieldID, field.TypeInt))
	id, ok := tuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Ticket.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := tuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, ticket.FieldID)
		for _, f := range fields {
			if !ticket.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != ticket.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := tuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tuo.mutation.UpdateTime(); ok {
		_spec.SetField(ticket.FieldUpdateTime, field.TypeTime, value)
	}
	if value, ok := tuo.mutation.Name(); ok {
		_spec.SetField(ticket.FieldName, field.TypeString, value)
	}
	if value, ok := tuo.mutation.Description(); ok {
		_spec.SetField(ticket.FieldDescription, field.TypeString, value)
	}
	if value, ok := tuo.mutation.Price(); ok {
		_spec.SetField(ticket.FieldPrice, field.TypeFloat64, value)
	}
	if value, ok := tuo.mutation.AddedPrice(); ok {
		_spec.AddField(ticket.FieldPrice, field.TypeFloat64, value)
	}
	if value, ok := tuo.mutation.Quantity(); ok {
		_spec.SetField(ticket.FieldQuantity, field.TypeInt, value)
	}
	if value, ok := tuo.mutation.AddedQuantity(); ok {
		_spec.AddField(ticket.FieldQuantity, field.TypeInt, value)
	}
	if value, ok := tuo.mutation.QuantitySold(); ok {
		_spec.SetField(ticket.FieldQuantitySold, field.TypeInt, value)
	}
	if value, ok := tuo.mutation.AddedQuantitySold(); ok {
		_spec.AddField(ticket.FieldQuantitySold, field.TypeInt, value)
	}
	if value, ok := tuo.mutation.SaleStartDate(); ok {
		_spec.SetField(ticket.FieldSaleStartDate, field.TypeTime, value)
	}
	if value, ok := tuo.mutation.SaleEndDate(); ok {
		_spec.SetField(ticket.FieldSaleEndDate, field.TypeTime, value)
	}
	if tuo.mutation.SaleEndDateCleared() {
		_spec.ClearField(ticket.FieldSaleEndDate, field.TypeTime)
	}
	if value, ok := tuo.mutation.EventID(); ok {
		_spec.SetField(ticket.FieldEventID, field.TypeString, value)
	}
	if value, ok := tuo.mutation.TicketType(); ok {
		_spec.SetField(ticket.FieldTicketType, field.TypeString, value)
	}
	if value, ok := tuo.mutation.IsActive(); ok {
		_spec.SetField(ticket.FieldIsActive, field.TypeBool, value)
	}
	if value, ok := tuo.mutation.IsRefundable(); ok {
		_spec.SetField(ticket.FieldIsRefundable, field.TypeBool, value)
	}
	_node = &Ticket{config: tuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, tuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{ticket.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	tuo.mutation.done = true
	return _node, nil
}
